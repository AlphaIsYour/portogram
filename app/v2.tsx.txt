"use client";

//=============================================================================
// 1. IMPORTS
//=============================================================================
import React, {
  useState,
  useEffect,
  useCallback,
  useMemo,
  useRef,
  createContext,
  useContext,
  ReactNode,
} from "react";
import {
  Chart,
  registerables,
  ChartConfiguration,
  ChartOptions,
  TooltipItem,
} from "chart.js";
import { Line, Radar, Doughnut, Pie, Bar } from "react-chartjs-2"; // Menggunakan react-chartjs-2
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { library, IconDefinition } from "@fortawesome/fontawesome-svg-core";
import { fas } from "@fortawesome/free-solid-svg-icons";
import { fab } from "@fortawesome/free-brands-svg-icons";
import { motion, AnimatePresence } from "framer-motion";
import { useTranslation, I18nextProvider } from "react-i18next"; // Import useTranslation
import i18n from "i18next"; // Import i18n instance (akan dikonfigurasi secara inline untuk demo)
import { initReactI18next } from "react-i18next"; // Import initReactI18next

// Import ikon spesifik (jika perlu, bisa langsung dari fas atau fab)
import {
  faShareAlt,
  faBookmark,
  faEllipsisH,
  faCheckCircle,
  faCodeBranch,
  faStar,
  faEye,
  faUserCircle,
  faHome,
  faCode,
  faBriefcase,
  faAward,
  faChartLine,
  faRss,
  faCommentDots,
  faEnvelope,
  faMapMarkerAlt,
  faCalendarAlt,
  faUsers,
  faGlobe,
  faPaperPlane,
  faDownload,
  faPrint,
  faBars,
  faUserPlus,
  faFire,
  faArrowDown,
  faChevronLeft,
  faChevronRight,
  faSearch,
  faFilter,
  faSort,
  faListUl,
  faTable,
  faPlus,
  faMinus,
  faCheck,
  faTimes,
  faInfoCircle,
  faExclamationCircle,
  faQuestionCircle,
  faLayerGroup,
  faServer,
  faDatabase,
  faLock,
  faShieldAlt,
  faChartPie,
  faChartBar,
  faCloudUploadAlt,
  faCloudDownloadAlt,
  faCog,
  faSync,
  faPlay,
  faPause,
  faStop,
  faForward,
  faBackward,
  faBell,
  faExclamationTriangle,
  faLightbulb,
  faBolt,
  faMagic,
  faGraduationCap,
  faToolbox,
  faNetworkWired,
  faTerminal,
  faMicrochip,
  faClock,
  faCalendarCheck,
  faFileCode,
  faFileAlt,
  faFilePdf,
  faFileExcel,
  faLink,
  faRocket,
  faTrophy,
  faMedal,
  faCertificate,
  faHandshake,
  faProjectDiagram,
  faHistory,
  faBookOpen,
  faLaptopCode,
  faWindowMaximize,
  faMobileAlt,
  faTabletAlt,
  faWrench,
  faTools,
  faSun,
  faMoon,
  faDesktop,
  faLanguage,
  faUniversalAccess,
  faFont,
  faVideoSlash,
  faSpinner,
  faAngleDown,
  faAngleUp,
  faExternalLinkAlt,
  faBuilding,
  faMapPin,
  faBriefcaseMedical,
  faUserTie,
  faUserGraduate,
  faUserCog,
} from "@fortawesome/free-solid-svg-icons";
import {
  faGithub,
  faTwitter,
  faLinkedin,
  faLaravel,
  faAws,
  faReact,
  faNode,
  faPython,
  faVuejs,
  faAngular,
  faDocker,
  faStripe,
  faJsSquare,
  faCss3,
  faHtml5,
  faBootstrap,
  faFigma,
  faWordpress,
  faNpm,
  faYarn,
  faGitAlt,
  faGithubAlt,
  faApple,
  faAndroid,
  faSlack,
  faDiscord,
  faTelegram,
  faWhatsapp,
  faStackOverflow,
  faMedium,
  faDev,
  faCodepen,
  faDigitalOcean,
  faAmazon,
  faGoogle,
  faMicrosoft,
  faFacebook,
  faInstagram,
} from "@fortawesome/free-brands-svg-icons";

// Initialize FontAwesome library
library.add(
  fas,
  fab,
  faSun,
  faMoon,
  faDesktop,
  faLanguage,
  faUniversalAccess,
  faFont,
  faVideoSlash,
  faSpinner,
  faAngleDown,
  faAngleUp,
  faExternalLinkAlt,
  faBuilding,
  faMapPin,
  faBriefcaseMedical,
  faUserTie,
  faUserGraduate,
  faUserCog
);

// Register Chart.js components
Chart.register(...registerables);

//=============================================================================
// 2. TYPESCRIPT INTERFACES & TYPES
//=============================================================================

/** Represents a skill with proficiency details */
interface Skill {
  name: string;
  percentage: number;
  color: string; // Tailwind gradient class: e.g., "from-blue-600 to-indigo-500"
  icon?: IconDefinition;
  category:
    | "frontend"
    | "backend"
    | "devops"
    | "database"
    | "tools"
    | "language"
    | "other";
  description: string;
  yearsOfExperience?: number; // Optional: years of experience
}

/** Represents a professional certification */
interface Certification {
  name: string;
  issuer: string;
  date: string; // Format: "YYYY-MM" or "YYYY-MM-DD"
  icon?: IconDefinition | string; // FontAwesome icon or platform name (e.g., 'aws')
  credentialId: string;
  expiry?: string; // Format: "YYYY-MM" or "YYYY-MM-DD"
  skills: string[];
  description: string;
  verificationUrl?: string;
}

/** Represents an educational background item */
interface Education {
  institution: string;
  degree: string;
  field: string;
  period: string; // e.g., "2016 - 2020"
  description: string;
  logo?: string; // URL or path to logo image
  achievements?: string[];
  gpa?: string;
}

/** Represents a work experience entry */
interface WorkExperience {
  company: string;
  position: string;
  period: string; // e.g., "Jan 2023 - Present"
  description: string;
  technologies: string[];
  achievements: string[];
  logo?: string; // URL or path to logo image
  location: string;
  type: "full-time" | "part-time" | "freelance" | "contract" | "internship";
  responsibilities: string[];
}

/** Represents a project */
interface Project {
  id: string; // Added unique ID for key props
  title: string;
  description: string;
  category: string;
  techStack: string[];
  stats: {
    branches?: number;
    stars?: number;
    views?: number;
    forks?: number;
    issues?: number;
  };
  image?: string; // URL or path to project image
  demoUrl?: string;
  githubUrl?: string;
  features: string[];
  status: "completed" | "in-progress" | "planned";
  startDate: string; // Format: "YYYY-MM"
  endDate?: string; // Format: "YYYY-MM"
  collaborators?: string[]; // e.g., ["@username1", "@username2"]
  testimonials?: Testimonial[]; // Testimonials specific to this project
}

/** Represents a significant achievement or recognition */
interface Achievement {
  id: string; // Added unique ID
  title: string;
  date: string; // Format: "YYYY-MM" or "YYYY-MM-DD"
  description: string;
  icon: IconDefinition;
  category: string;
  issuer?: string;
}

/** Represents a blog post summary */
interface BlogPost {
  id: string; // Added unique ID
  title: string;
  excerpt: string;
  date: string; // Format: "YYYY-MM-DD"
  tags: string[];
  readTime: string; // e.g., "8 min"
  image?: string; // URL or path to post image
  likes?: number;
  comments?: number;
  shares?: number;
  category: string;
  slug: string; // URL slug for the full post
}

/** Represents monthly contribution data for charts */
interface Contribution {
  month: string; // e.g., "Jan", "Feb"
  count: number;
}

/** Represents a testimonial from a client or colleague */
interface Testimonial {
  id: string; // Added unique ID
  name: string;
  position: string;
  company: string;
  text: string;
  avatar?: string; // URL or path to avatar image
  rating: number; // e.g., 1-5 stars
  date: string; // Format: "YYYY-MM-DD"
  relation: string; // e.g., "Client", "Colleague", "Manager"
}

/** Represents a contact information item */
interface Contact {
  type: string; // e.g., "Email", "Location", "Website", "Phone"
  value: string;
  icon: IconDefinition;
  isPublic: boolean; // Determines if it's shown publicly
  href?: string; // Optional direct link (e.g., mailto:, tel:, https://)
}

/** Represents a social media profile link */
interface SocialMedia {
  platform: string;
  url: string;
  icon: IconDefinition;
  username: string;
}

/** Represents overall developer statistics */
interface DevStats {
  repos?: number;
  stars?: number;
  contributions?: number; // e.g., last year
  rating?: string; // e.g., "4.9/5"
  followers?: number;
  following?: number;
  streak?: number; // e.g., contribution streak
  commits?: number; // total commits
}

/** Represents a specific technology in the tech stack */
interface TechStackItem {
  id: string; // Added unique ID
  name: string;
  icon: IconDefinition;
  proficiency: number; // Scale, e.g., 1-5
  category: string; // Consistent with Skill categories
  yearsOfExperience: number;
}

/** Represents a filter option for projects or skills */
interface FilterOption {
  category: string; // e.g., 'status', 'tech', 'category'
  value: string;
}

/** Represents a sorting option */
interface SortOption {
  field: string; // e.g., 'title', 'stars', 'date'
  order: "asc" | "desc";
}

/** Represents a notification message */
interface Notification {
  id: string;
  title: string;
  message: string;
  type: "info" | "success" | "warning" | "error";
  date: Date;
  read: boolean;
}

/** Represents the structure for the entire profile data */
interface ProfileData {
  basicInfo: {
    name: string;
    handle: string;
    headline: string; // Short professional headline
    location: string;
    availability: string;
    profilePictureUrl: string;
    coverPictureUrl: string;
    developerLevel: number; // e.g., 99
    developerLevelProgress: number; // e.g., 80%
    bio: string; // Detailed bio
  };
  contacts: Contact[];
  socialMedia: SocialMedia[];
  devStats: DevStats;
  skills: Skill[];
  certifications: Certification[];
  education: Education[];
  workExperience: WorkExperience[];
  projects: Project[];
  achievements: Achievement[];
  blogPosts: BlogPost[];
  testimonials: Testimonial[];
  techStack: TechStackItem[];
  contributions: Contribution[];
}

/** Type for the main navigation tabs */
type TabId =
  | "overview"
  | "projects"
  | "skills"
  | "experience"
  | "education"
  | "achievements"
  | "activity"
  | "blog"
  | "testimonials"
  | "contact";

/** Type for theme setting */
type Theme = "light" | "dark" | "system";

/** Type for font size setting */
type FontSize = "default" | "large" | "xlarge";

/** Type for export formats */
type ExportFormat = "pdf" | "json";

//=============================================================================
// 3. MOCK DATA (Encapsulated)
//=============================================================================

/**
 * Centralized object holding all profile data.
 * In a real application, this might come from an API or CMS.
 */
const profileData: ProfileData = {
  basicInfo: {
    name: "Youralpha",
    handle: "@eno4lph_",
    headline: "Senior Full Stack Developer | React, Node.js, Laravel Expert",
    location: "San Francisco, CA",
    availability: "Full-time Available",
    profilePictureUrl: "/image/r10.jpg", // Placeholder path
    coverPictureUrl: "/image/r6.jpg", // Placeholder path
    developerLevel: 99,
    developerLevelProgress: 80,
    bio: "Passionate full-stack developer with 5+ years experience in building scalable web applications. Specialized in React, Node.js, and Laravel ecosystems with a strong focus on delivering high-performance, user-friendly solutions. Devoted to clean code, accessibility, and staying updated with the latest tech trends.",
  },
  contacts: [
    {
      type: "Email",
      value: "youralpha@example.com",
      icon: faEnvelope,
      isPublic: true,
      href: "mailto:youralpha@example.com",
    },
    {
      type: "Website",
      value: "youralpha.dev",
      icon: faGlobe,
      isPublic: true,
      href: "https://youralpha.dev",
    },
    {
      type: "Location",
      value: "San Francisco, CA",
      icon: faMapMarkerAlt,
      isPublic: true,
    },
    {
      type: "Availability",
      value: "Full-time Available",
      icon: faCalendarCheck,
      isPublic: true,
    },
    {
      type: "Phone",
      value: "+1 (555) 123-4567",
      icon: faMobileAlt,
      isPublic: false,
      href: "tel:+15551234567",
    }, // Example private contact
  ],
  socialMedia: [
    {
      platform: "GitHub",
      url: "https://github.com/AlphaIsYour",
      icon: faGithub,
      username: "@AlphaIsYour",
    },
    {
      platform: "LinkedIn",
      url: "https://linkedin.com/in/youralpha",
      icon: faLinkedin,
      username: "youralpha",
    },
    {
      platform: "Twitter",
      url: "https://twitter.com/eno4lph_",
      icon: faTwitter,
      username: "@eno4lph_",
    },
    {
      platform: "Medium",
      url: "https://medium.com/@youralpha",
      icon: faMedium,
      username: "@youralpha",
    },
    {
      platform: "Dev.to",
      url: "https://dev.to/youralpha",
      icon: faDev,
      username: "youralpha",
    },
  ],
  devStats: {
    repos: 20,
    stars: 199,
    contributions: 498, // Example: Contributions in the last year
    rating: "4.9/5",
    followers: 358,
    following: 125,
    streak: 87, // Days
    commits: 1245,
  },
  skills: [
    {
      name: "PHP",
      percentage: 92,
      color: "from-blue-600 to-indigo-500",
      icon: faLaravel,
      category: "backend",
      description:
        "Expert in building scalable applications with PHP 8, Laravel, and Symfony frameworks.",
      yearsOfExperience: 5,
    },
    {
      name: "JavaScript",
      percentage: 85,
      color: "from-yellow-500 to-amber-500",
      icon: faJsSquare,
      category: "frontend",
      description:
        "Proficient in modern JavaScript, ES6+, TypeScript, and various JS frameworks.",
      yearsOfExperience: 4.5,
    },
    {
      name: "React",
      percentage: 88,
      color: "from-blue-400 to-cyan-300",
      icon: faReact,
      category: "frontend",
      description:
        "Advanced knowledge of React.js, Next.js, Redux, Context API, and React Hooks.",
      yearsOfExperience: 4,
    },
    {
      name: "Node.js",
      percentage: 82,
      color: "from-green-500 to-emerald-400",
      icon: faNode,
      category: "backend",
      description:
        "Strong experience with Node.js, Express, NestJS, and serverless architectures.",
      yearsOfExperience: 3.5,
    },
    {
      name: "Python",
      percentage: 75,
      color: "from-blue-500 to-purple-500",
      icon: faPython,
      category: "backend",
      description:
        "Proficient in Python for web development (Django/Flask), data analysis, and automation.",
      yearsOfExperience: 3,
    },
    {
      name: "Docker",
      percentage: 79,
      color: "from-blue-500 to-cyan-400",
      icon: faDocker,
      category: "devops",
      description:
        "Expert in containerization, Docker Compose, and understanding of container orchestration (Kubernetes basics).",
      yearsOfExperience: 3.5,
    },
    {
      name: "AWS",
      percentage: 72,
      color: "from-orange-500 to-amber-400",
      icon: faAws,
      category: "devops",
      description:
        "Certified AWS Developer with experience in EC2, S3, Lambda, RDS, DynamoDB, and CloudFormation.",
      yearsOfExperience: 3,
    },
    {
      name: "HTML/CSS",
      percentage: 90,
      color: "from-red-500 to-orange-400",
      icon: faHtml5,
      category: "frontend",
      description:
        "Expert in semantic HTML5, CSS3, SASS/SCSS, Tailwind CSS, and responsive web design principles.",
      yearsOfExperience: 5,
    },
    {
      name: "SQL",
      percentage: 83,
      color: "from-blue-600 to-blue-400",
      icon: faDatabase,
      category: "database",
      description:
        "Proficient in SQL (PostgreSQL, MySQL), query optimization, database design, and ORM usage.",
      yearsOfExperience: 4,
    },
    {
      name: "MongoDB",
      percentage: 77,
      color: "from-green-600 to-green-400",
      icon: faDatabase,
      category: "database",
      description:
        "Experienced in MongoDB schema design, aggregation framework, and performance tuning.",
      yearsOfExperience: 3,
    },
    {
      name: "CI/CD",
      percentage: 81,
      color: "from-purple-600 to-indigo-400",
      icon: faCodeBranch,
      category: "devops",
      description:
        "Expert in setting up CI/CD pipelines using GitHub Actions, GitLab CI, and Jenkins.",
      yearsOfExperience: 3.5,
    },
    {
      name: "Git",
      percentage: 95,
      color: "from-orange-600 to-red-500",
      icon: faGitAlt,
      category: "tools",
      description:
        "Advanced Git workflow management (Git Flow, GitHub Flow), branching strategies, and version control best practices.",
      yearsOfExperience: 5,
    },
    {
      name: "TypeScript",
      percentage: 86,
      color: "from-blue-500 to-cyan-400",
      icon: faCode,
      category: "language",
      description:
        "Strong proficiency in TypeScript for building robust and scalable applications.",
      yearsOfExperience: 3.5,
    },
  ],
  certifications: [
    {
      name: "AWS Certified Developer - Associate",
      issuer: "Amazon Web Services",
      date: "2024-01",
      icon: faAws,
      credentialId: "AWS-DEV-12345",
      expiry: "2027-01",
      skills: ["EC2", "S3", "Lambda", "DynamoDB", "CloudFormation", "IAM"],
      description:
        "Validates technical expertise in developing, deploying, and debugging cloud-based applications using AWS.",
      verificationUrl: "#",
    },
    {
      name: "Laravel Certified Developer",
      issuer: "Laravel",
      date: "2023-05",
      icon: faLaravel,
      credentialId: "LCD-67890",
      skills: ["PHP", "Laravel", "MVC", "Eloquent ORM", "Blade", "Testing"],
      description:
        "Certifies proficiency in developing applications using the Laravel framework according to best practices.",
      verificationUrl: "#",
    },
    {
      name: "React Professional Developer",
      issuer: "React Certification Board (Mock)",
      date: "2023-11",
      icon: faReact,
      credentialId: "RPD-24680",
      skills: [
        "React",
        "Redux",
        "React Hooks",
        "Context API",
        "NextJS",
        "Performance",
      ],
      description:
        "Demonstrates advanced knowledge of React.js, state management, and related ecosystem technologies.",
      verificationUrl: "#",
    },
    {
      name: "Certified Kubernetes Administrator",
      issuer: "Cloud Native Computing Foundation",
      date: "2023-08",
      icon: faServer,
      credentialId: "CKA-13579",
      expiry: "2026-08",
      skills: [
        "Kubernetes",
        "Container Orchestration",
        "Docker",
        "Microservices",
        "Networking",
      ],
      description:
        "Validates the skills, knowledge, and competency to perform the responsibilities of a Kubernetes Administrator.",
      verificationUrl: "#",
    },
    {
      name: "MongoDB Professional Developer",
      issuer: "MongoDB, Inc.",
      date: "2022-12",
      icon: faDatabase,
      credentialId: "MDB-97531",
      skills: [
        "MongoDB",
        "NoSQL",
        "Database Design",
        "Aggregation",
        "Indexing",
        "Performance Tuning",
      ],
      description:
        "Certifies advanced knowledge of MongoDB database development, schema design, and optimization techniques.",
      verificationUrl: "#",
    },
  ],
  education: [
    {
      institution: "Stanford University",
      degree: "Master of Science",
      field: "Computer Science",
      period: "2020 - 2022",
      description:
        "Specialized in Artificial Intelligence and Machine Learning with focus on Natural Language Processing and distributed systems.",
      gpa: "3.92/4.0",
      achievements: [
        "Graduated with Distinction",
        "Published research paper on NLP techniques in IEEE",
        "Teaching Assistant for Advanced Algorithms course",
      ],
    },
    {
      institution: "University of California, Berkeley",
      degree: "Bachelor of Science",
      field: "Computer Engineering",
      period: "2016 - 2020",
      description:
        "Comprehensive curriculum covering software engineering principles, hardware design, and distributed systems.",
      gpa: "3.85/4.0",
      achievements: [
        "Dean's List (All Semesters)",
        "Capstone Project: Distributed file system with Byzantine fault tolerance",
        "President of ACM Student Chapter",
        "Member of IEEE",
      ],
    },
  ],
  workExperience: [
    {
      company: "Tech Innovators Inc.",
      position: "Senior Full Stack Developer",
      period: "Jan 2023 - Present",
      description:
        "Leading the architecture and development of flagship enterprise SaaS applications using modern web technologies.",
      technologies: [
        "React",
        "Next.js",
        "Node.js",
        "TypeScript",
        "AWS (Serverless, EC2, S3)",
        "GraphQL",
        "PostgreSQL",
        "Docker",
      ],
      achievements: [
        "Reduced application load time by 60% through performance optimization and code splitting.",
        "Designed and implemented a scalable microservices architecture, improving deployment frequency by 4x.",
        "Mentored and led a team of 5 developers, fostering a collaborative and high-performance environment.",
        "Implemented a comprehensive CI/CD pipeline using GitHub Actions, decreasing deployment time by 75%.",
      ],
      location: "San Francisco, CA",
      type: "full-time",
      responsibilities: [
        "Architect and develop scalable, resilient web applications.",
        "Lead front-end and back-end development efforts.",
        "Design and implement database schemas and APIs (RESTful & GraphQL).",
        "Collaborate closely with product managers, designers, and stakeholders.",
        "Perform code reviews, enforce coding standards, and promote best practices.",
        "Optimize application performance, scalability, and security.",
        "Manage cloud infrastructure deployment and monitoring on AWS.",
      ],
    },
    {
      company: "GlobalSoft Solutions",
      position: "Full Stack Developer",
      period: "Apr 2021 - Dec 2022",
      description:
        "Developed and maintained complex e-commerce platforms and internal tools for various enterprise clients.",
      technologies: [
        "Laravel",
        "PHP",
        "Vue.js",
        "MySQL",
        "Redis",
        "Docker",
        "jQuery (legacy)",
        "REST APIs",
      ],
      achievements: [
        "Successfully built and launched a real-time inventory management system, increasing client operational efficiency by 40%.",
        "Integrated multiple payment gateways (Stripe, PayPal) securely and efficiently.",
        "Optimized critical database queries, resulting in a 30% faster checkout process for a major e-commerce client.",
        "Contributed to migrating a legacy system to a modern Vue.js frontend.",
      ],
      location: "Boston, MA (Remote)",
      type: "full-time",
      responsibilities: [
        "Developed custom e-commerce features and solutions for B2B/B2C clients.",
        "Created and consumed RESTful APIs for backend services and mobile applications.",
        "Implemented efficient caching strategies using Redis.",
        "Participated actively in Agile ceremonies (sprint planning, stand-ups, retrospectives).",
        "Troubleshooted and resolved complex production issues.",
        "Wrote unit and integration tests to ensure code quality.",
      ],
    },
    {
      company: "Startech Innovations",
      position: "Backend Developer Intern",
      period: "Jun 2020 - Mar 2021",
      description:
        "Contributed to the development of a cloud-based SaaS platform for financial analytics during an extended internship.",
      technologies: [
        "Python",
        "Django",
        "PostgreSQL",
        "Celery",
        "AWS Lambda",
        "REST APIs",
      ],
      achievements: [
        "Developed a critical data processing pipeline handling over 1 million transactions daily.",
        "Implemented a secure API authentication system using OAuth 2.0.",
        "Contributed to optimizing database queries for large financial datasets.",
        "Assisted in reducing server costs by 15% through infrastructure adjustments.",
      ],
      location: "New York, NY",
      type: "internship",
      responsibilities: [
        "Assisted senior developers in designing and implementing backend services.",
        "Wrote and maintained API endpoints.",
        "Developed and executed automated tests.",
        "Participated in code reviews and learned best practices.",
        "Created technical documentation for developed features.",
      ],
    },
  ],
  projects: [
    {
      id: "proj-1",
      title: "Tokoeno E-Commerce",
      description:
        "A comprehensive, multi-tenant e-commerce platform featuring advanced inventory management, multi-vendor support, secure payment processing, and customer analytics dashboard.",
      category: "Full Stack",
      techStack: [
        "Next.js",
        "TypeScript",
        "Prisma",
        "PostgreSQL",
        "Stripe Connect",
        "AWS S3",
        "Tailwind CSS",
        "tRPC",
      ],
      stats: { branches: 25, stars: 145, views: 3200, forks: 42, issues: 12 },
      features: [
        "Real-time inventory tracking",
        "Multi-payment gateway integration (Stripe)",
        "Advanced analytics dashboard",
        "Responsive mobile-first design",
        "Multi-vendor marketplace support",
        "Role-based access control",
      ],
      status: "completed",
      startDate: "2023-02",
      endDate: "2023-11",
      demoUrl: "#",
      githubUrl: "#",
    },
    {
      id: "proj-2",
      title: "DevTracker",
      description:
        "A developer productivity and project management tool integrating with GitHub for time tracking, performance analytics, and streamlined sprint planning.",
      category: "Web Application",
      techStack: [
        "React",
        "Node.js",
        "Express",
        "MongoDB",
        "GraphQL",
        "GitHub API",
        "Docker",
        "Chart.js",
      ],
      stats: { branches: 18, stars: 92, views: 2400, forks: 28, issues: 7 },
      features: [
        "Direct GitHub repository integration",
        "Automated time tracking & productivity metrics",
        "Kanban-style sprint planning board",
        "Code quality & contribution visualization",
        "Team collaboration features (comments, assignments)",
      ],
      status: "in-progress",
      startDate: "2023-06",
      collaborators: ["@techdev", "@codemaster", "@devguru"],
    },
    {
      id: "proj-3",
      title: "AIAcademy",
      description:
        "An interactive online platform for learning AI and machine learning concepts through hands-on coding exercises, real-time feedback, and model visualization.",
      category: "Education Tech",
      techStack: [
        "Vue.js",
        "Nuxt.js",
        "Flask",
        "Python",
        "TensorFlow.js",
        "Firebase Auth",
        "Firestore",
        "Docker",
      ],
      stats: { branches: 15, stars: 210, views: 5600, forks: 65, issues: 22 },
      features: [
        "Interactive coding challenges with instant feedback",
        "Real-time AI model training visualization",
        "Personalized learning paths based on progress",
        "Sandboxed code execution environment",
        "Community forums for discussion",
      ],
      status: "completed",
      startDate: "2022-09",
      endDate: "2023-05",
      demoUrl: "#",
      githubUrl: "#",
    },
    {
      id: "proj-4",
      title: "CloudStack Orchestrator",
      description:
        "An open-source infrastructure management tool simplifying deployment and scaling of cloud applications across multiple providers (AWS, GCP).",
      category: "DevOps / Cloud",
      techStack: [
        "Golang",
        "Kubernetes API",
        "Terraform",
        "React",
        "GraphQL",
        "Prometheus",
        "Grafana",
      ],
      stats: { branches: 32, stars: 178, views: 2900, forks: 48, issues: 15 },
      features: [
        "Multi-cloud deployment support (initial: AWS, GCP)",
        "Infrastructure as Code (IaC) template library",
        "Automated cost optimization recommendations",
        "Real-time resource monitoring dashboard",
        "Policy-based automated scaling",
      ],
      status: "completed",
      startDate: "2022-11",
      endDate: "2023-08",
      demoUrl: "#",
      githubUrl: "#",
    },
    {
      id: "proj-5",
      title: "DataVizPro Library",
      description:
        "A high-performance data visualization library built with TypeScript and D3.js, offering customizable charts, graphs, and interactive dashboards.",
      category: "Library / Frontend",
      techStack: [
        "TypeScript",
        "D3.js",
        "WebGL (optional)",
        "Canvas API",
        "React Integration",
      ],
      stats: { branches: 14, stars: 122, views: 3100, forks: 26, issues: 9 },
      features: [
        "Wide range of interactive chart types",
        "Custom component API for extensibility",
        "Optimized for large datasets & real-time updates",
        "Export charts to SVG, PNG, PDF",
        "Fully responsive and themeable",
      ],
      status: "in-progress",
      startDate: "2023-03",
      collaborators: ["@datascientist", "@vizexpert"],
    },
    {
      id: "proj-6",
      title: "SecureAuth Service",
      description:
        "A standalone authentication & authorization microservice providing MFA, passwordless login, social logins, and RBAC features.",
      category: "Security / Backend",
      techStack: [
        "Node.js",
        "TypeScript",
        "Express",
        "JWT",
        "OAuth 2.0",
        "OpenID Connect",
        "WebAuthn",
        "MongoDB",
        "Redis",
      ],
      stats: { branches: 20, stars: 135, views: 2800, forks: 35, issues: 11 },
      features: [
        "Multi-factor authentication (TOTP, SMS, Email)",
        "Passwordless login (Magic Links, WebAuthn)",
        "Social Login integration (Google, GitHub)",
        "Fine-grained Role-Based Access Control (RBAC)",
        "Comprehensive audit logging and security event monitoring",
      ],
      status: "completed",
      startDate: "2022-08",
      endDate: "2023-02",
      demoUrl: "#",
      githubUrl: "#",
    },
  ],
  achievements: [
    {
      id: "ach-1",
      title: "Open Source Contributor of the Year",
      date: "2023-12",
      description:
        "Recognized by OpenSourceOrg for significant contributions to multiple popular open-source projects within the web development community.",
      icon: faTrophy,
      category: "Community",
      issuer: "OpenSourceOrg (Mock)",
    },
    {
      id: "ach-2",
      title: "Hackathon Winner - 1st Place",
      date: "2023-10",
      description:
        "Led the winning team at the TechCrunch Disrupt SF Hackathon 2023, developing an innovative AI-powered accessibility tool for web browsing.",
      icon: faMedal,
      category: "Competition",
      issuer: "TechCrunch",
    },
    {
      id: "ach-3",
      title: "Top 5% Global Developer Ranking",
      date: "2024-01",
      description:
        "Ranked within the top 5% of developers globally based on performance and contributions on the DevRank platform.",
      icon: faChartLine,
      category: "Ranking",
      issuer: "DevRank (Mock)",
    },
    {
      id: "ach-4",
      title: "Keynote Speaker at React Summit",
      date: "2023-06",
      description:
        "Invited as a keynote speaker at React Summit 2023, presenting on advanced state management techniques and performance optimization in large-scale React applications.",
      icon: faUsers,
      category: "Speaking",
      issuer: "React Summit",
    },
    {
      id: "ach-5",
      title: "Published Author: 'Modern Web Architectures'",
      date: "2023-04",
      description:
        "Authored a technical book covering modern web architecture patterns, microservices, and best practices, published by DevPress.",
      icon: faBookOpen,
      category: "Publication",
      issuer: "DevPress (Mock)",
    },
  ],
  blogPosts: [
    {
      id: "blog-1",
      title: "Optimizing React Applications for Blazing Fast Performance",
      excerpt:
        "Dive deep into advanced techniques like code splitting, memoization, virtualization, and server components to significantly boost your React app speed.",
      date: "2024-03-15",
      tags: [
        "React",
        "Performance",
        "JavaScript",
        "Web Development",
        "Optimization",
      ],
      readTime: "10 min",
      likes: 243,
      comments: 57,
      shares: 124,
      category: "Frontend",
      slug: "optimizing-react-performance",
      image: "/image/blog/react-perf.jpg",
    },
    {
      id: "blog-2",
      title:
        "Building Scalable and Resilient Backend Systems with Node.js & Microservices",
      excerpt:
        "A comprehensive guide to architecting Node.js applications using microservices, message queues, and robust error handling for high availability.",
      date: "2024-02-28",
      tags: [
        "Node.js",
        "Backend",
        "Scalability",
        "Architecture",
        "Microservices",
      ],
      readTime: "15 min",
      likes: 198,
      comments: 42,
      shares: 86,
      category: "Backend",
      slug: "scalable-nodejs-microservices",
      image: "/image/blog/node-scale.jpg",
    },
    {
      id: "blog-3",
      title: "The Future of Web Development: Trends Shaping 2025 and Beyond",
      excerpt:
        "Exploring the impact of AI, WebAssembly, edge computing, and new JavaScript frameworks on the future landscape of web development.",
      date: "2024-01-10",
      tags: ["Future", "Trends", "Web Development", "Technology", "AI"],
      readTime: "12 min",
      likes: 312,
      comments: 94,
      shares: 178,
      category: "Industry",
      slug: "future-web-development-2025",
      image: "/image/blog/web-future.jpg",
    },
    {
      id: "blog-4",
      title:
        "Mastering TypeScript: Advanced Patterns and Best Practices for Enterprise Apps",
      excerpt:
        "Elevate your TypeScript skills with generics, decorators, conditional types, module augmentation, and practical design patterns.",
      date: "2023-12-05",
      tags: [
        "TypeScript",
        "JavaScript",
        "Programming",
        "Development",
        "Best Practices",
      ],
      readTime: "18 min",
      likes: 276,
      comments: 63,
      shares: 112,
      category: "Programming",
      slug: "mastering-typescript-advanced",
      image: "/image/blog/ts-mastery.jpg",
    },
  ],
  testimonials: [
    {
      id: "test-1",
      name: "Sarah Johnson",
      position: "CTO",
      company: "TechForward Inc.",
      text: "Working with Youralpha was a pivotal moment for our platform. Their deep technical expertise, coupled with exceptional problem-solving skills, allowed us to overcome significant scaling challenges and modernize our infrastructure. Their ability to articulate complex technical concepts clearly was invaluable.",
      rating: 5,
      date: "2024-02-10",
      relation: "Client",
      avatar: "/image/avatar/sarah.jpg",
    },
    {
      id: "test-2",
      name: "Michael Chen",
      position: "Lead Software Engineer",
      company: "InnovateX",
      text: "I've had the distinct pleasure of collaborating with Youralpha on several challenging projects. Their commitment to code quality, robust testing, and detailed documentation is truly outstanding. They consistently deliver solutions that are not just functional but elegant and maintainable. A top-tier professional.",
      rating: 5,
      date: "2023-11-15",
      relation: "Colleague",
      avatar: "/image/avatar/michael.jpg",
    },
    {
      id: "test-3",
      name: "Elena Rodriguez",
      position: "Senior Product Manager",
      company: "GlobalTech Solutions",
      text: "Youralpha brought immense value to our product development lifecycle. They possess a rare combination of technical prowess and product intuition. They didn't just implement requirements; they challenged assumptions and suggested improvements that significantly enhanced the final product's user experience and market fit.",
      rating: 5,
      date: "2023-09-22",
      relation: "Collaborator (Product)",
      avatar: "/image/avatar/elena.jpg",
    },
    {
      id: "test-4",
      name: "David Kim",
      position: "Founder & CEO",
      company: "NextGenApps",
      text: "As a non-technical founder, finding a developer who could grasp our vision and translate it into a scalable, user-friendly reality was paramount. Youralpha exceeded all expectations. Their technical leadership and execution were instrumental in developing our MVP and ultimately securing our seed funding round.",
      rating: 5,
      date: "2024-01-05",
      relation: "Client (Startup)",
      avatar: "/image/avatar/david.jpg",
    },
  ],
  techStack: [
    {
      id: "ts-1",
      name: "React / Next.js",
      icon: faReact,
      proficiency: 4.8,
      category: "Frontend",
      yearsOfExperience: 4,
    },
    {
      id: "ts-2",
      name: "Node.js / Express",
      icon: faNode,
      proficiency: 4.5,
      category: "Backend",
      yearsOfExperience: 3.5,
    },
    {
      id: "ts-3",
      name: "Laravel / PHP",
      icon: faLaravel,
      proficiency: 4.7,
      category: "Backend",
      yearsOfExperience: 5,
    },
    {
      id: "ts-4",
      name: "AWS",
      icon: faAws,
      proficiency: 4.2,
      category: "DevOps",
      yearsOfExperience: 3,
    },
    {
      id: "ts-5",
      name: "Docker",
      icon: faDocker,
      proficiency: 4.3,
      category: "DevOps",
      yearsOfExperience: 3.5,
    },
    {
      id: "ts-6",
      name: "PostgreSQL",
      icon: faDatabase,
      proficiency: 4.4,
      category: "Database",
      yearsOfExperience: 4,
    },
    {
      id: "ts-7",
      name: "TypeScript",
      icon: faCode,
      proficiency: 4.6,
      category: "Language",
      yearsOfExperience: 3.5,
    },
    {
      id: "ts-8",
      name: "Python (Django/Flask)",
      icon: faPython,
      proficiency: 4.0,
      category: "Backend",
      yearsOfExperience: 3,
    },
  ],
  contributions: Array.from({ length: 12 }, (_, i) => {
    const date = new Date(2023, 11 - i); // Go back 12 months from Dec 2023
    return {
      month: date.toLocaleString("default", { month: "short" }),
      count: 50 + Math.floor(Math.random() * 150), // More realistic contribution counts
    };
  }).reverse(), // Ensure chronological order (Jan -> Dec)
};

//=============================================================================
// 4. i18n Configuration (Inline Simulation)
//=============================================================================
/**
 * NOTE: Proper i18n setup requires separate files and configuration
 * (next-i18next.config.js, public/locales/[lang]/common.json, and integration in _app.tsx or layout.tsx).
 * This is an inline simulation for demonstration within this single file.
 * In a real App Router project, you'd likely fetch translations on the server
 * or use a client-side provider setup.
 */
const resources = {
  en: {
    common: {
      // --- PASTE CONTENT OF public/locales/en/common.json HERE ---
      appName: "Youralpha Profile",
      "navbar.home": "Overview",
      "navbar.projects": "Projects",
      "navbar.skills": "Skills",
      "navbar.experience": "Experience",
      "navbar.education": "Education",
      "navbar.achievements": "Achievements",
      "navbar.activity": "Activity",
      "navbar.blog": "Blog",
      "navbar.testimonials": "Testimonials",
      "navbar.contact": "Contact",
      "profile.status": "Online",
      "profile.level": "Level",
      "profile.name": "Youralpha",
      "profile.handle": "@eno4lph_",
      "profile.contactMe": "Contact Me",
      "profile.downloadCV": "Download CV",
      "overview.aboutMe": "About Me",
      "overview.aboutMeText":
        "Passionate full-stack developer with 5+ years experience in building scalable web applications. Specialized in React, Node.js, and Laravel ecosystems with a strong focus on delivering high-performance, user-friendly solutions. Devoted to clean code, accessibility, and staying updated with the latest tech trends.",
      "overview.contactInfo": "Contact Information",
      "overview.personalInfo": "Personal Info",
      "overview.location": "San Francisco, CA",
      "overview.availability": "Full-time Available",
      "overview.devLevel": "Developer Level",
      "overview.coreTech": "Core Tech Stack",
      "overview.achievements": "Achievements",
      "overview.viewAll": "View all",
      "overview.years": "years",
      "projects.title": "Projects",
      "projects.searchPlaceholder": "Search projects...",
      "projects.filter.status": "Status",
      "projects.filter.tech": "Technology",
      "projects.filter.category": "Category",
      "projects.sort.title": "Sort by Title",
      "projects.sort.stars": "Sort by Stars",
      "projects.sort.date": "Sort by Date",
      "projects.sort.asc": "Ascending",
      "projects.sort.desc": "Descending",
      "projects.viewAsGrid": "Grid View",
      "projects.viewAsList": "List View",
      "projects.branches": "Branches",
      "projects.stars": "Stars",
      "projects.views": "Views",
      "projects.forks": "Forks",
      "projects.issues": "Issues",
      "projects.features": "Features",
      "projects.techStack": "Tech Stack",
      "projects.statusLabel.completed": "Completed",
      "projects.statusLabel.in-progress": "In Progress",
      "projects.statusLabel.planned": "Planned",
      "projects.viewDemo": "View Demo",
      "projects.viewCode": "View Code",
      "projects.close": "Close",
      "projects.noProjectsFound": "No projects found matching your criteria.",
      "skills.title": "Skills & Expertise",
      "skills.description": "My technical proficiency across various domains.",
      "skills.filterAll": "All",
      "skills.filterFrontend": "Frontend",
      "skills.filterBackend": "Backend",
      "skills.filterDevops": "DevOps",
      "skills.filterDatabase": "Database",
      "skills.filterTools": "Tools",
      "skills.filterLanguage": "Languages",
      "skills.yearsExp": "Years Exp.",
      "skills.proficiency": "Proficiency",
      "experience.title": "Work Experience",
      "experience.present": "Present",
      "experience.responsibilities": "Responsibilities",
      "experience.achievements": "Key Achievements",
      "experience.technologies": "Technologies Used",
      "education.title": "Education",
      "education.achievements": "Achievements/Activities",
      "achievements.title": "Achievements & Recognition",
      "achievements.issuedBy": "Issued by",
      "activity.title": "Contribution Activity & Stats",
      "activity.contributions": "Contributions",
      "activity.last12Months": "Last 12 Months",
      "activity.devStats": "Developer Stats",
      "activity.repos": "Repositories",
      "activity.stars": "Stars Received",
      "activity.rating": "Avg. Rating",
      "activity.followers": "Followers",
      "activity.following": "Following",
      "activity.streak": "Current Streak",
      "activity.commits": "Total Commits",
      "blog.title": "Latest Blog Posts",
      "blog.readMore": "Read More",
      "blog.readTimeSuffix": "min read",
      "blog.likes": "Likes",
      "blog.comments": "Comments",
      "blog.shares": "Shares",
      "testimonials.title": "Testimonials",
      "testimonials.whatPeopleSay": "What People Say About Me",
      "contact.title": "Get In Touch",
      "contact.form.title": "Send Me a Message",
      "contact.form.name": "Your Name",
      "contact.form.email": "Your Email",
      "contact.form.subject": "Subject",
      "contact.form.message": "Your Message",
      "contact.form.send": "Send Message",
      "contact.info": "Contact Info",
      "contact.social": "Find me on",
      "notifications.title": "Notifications",
      "notifications.markAsRead": "Mark as Read",
      "notifications.clearAll": "Clear All",
      "notifications.empty": "No new notifications",
      "settings.title": "Settings",
      "settings.theme": "Theme",
      "settings.theme.light": "Light",
      "settings.theme.dark": "Dark",
      "settings.theme.system": "System",
      "settings.language": "Language",
      "settings.accessibility": "Accessibility",
      "settings.fontSize": "Font Size",
      "settings.fontSize.default": "Default",
      "settings.fontSize.large": "Large",
      "settings.fontSize.xlarge": "Extra Large",
      "settings.reduceMotion": "Reduce Motion",
      "settings.export": "Export Portfolio",
      "settings.export.pdf": "Export as PDF",
      "settings.export.json": "Export as JSON",
      "settings.export.loading": "Exporting...",
      "footer.rights": "All rights reserved.",
      loading: "Loading Content...",
      "loading.page": "Initializing Profile...",
      "accessibility.skipLink": "Skip to main content",
      "common.viewDetails": "View Details",
      "common.showMore": "Show More",
      "common.showLess": "Show Less",
      "common.status": "Status",
      "common.category": "Category",
      "common.technology": "Technology",
      "common.date": "Date",
      "common.issuer": "Issuer",
      "common.period": "Period",
      "common.gpa": "GPA",
      "common.verified": "Verified", // Example addition
      "common.notVerified": "Not Verified", // Example addition
      "certifications.title": "Certifications",
      "certifications.credentialID": "Credential ID",
      "certifications.expiry": "Expires",
      "certifications.skillsCovered": "Skills Covered",
      "certifications.verify": "Verify",
      // ... (add other keys from your provided en/common.json)
    },
  },
  id: {
    common: {
      // --- PASTE CONTENT OF public/locales/id/common.json HERE ---
      appName: "Profil Youralpha",
      "navbar.home": "Ringkasan",
      "navbar.projects": "Proyek",
      "navbar.skills": "Keahlian",
      "navbar.experience": "Pengalaman",
      "navbar.education": "Pendidikan",
      "navbar.achievements": "Pencapaian",
      "navbar.activity": "Aktivitas",
      "navbar.blog": "Blog",
      "navbar.testimonials": "Testimoni",
      "navbar.contact": "Kontak",
      "profile.status": "Online",
      "profile.level": "Level",
      "profile.name": "Youralpha",
      "profile.handle": "@eno4lph_",
      "profile.contactMe": "Hubungi Saya",
      "profile.downloadCV": "Unduh CV",
      "overview.aboutMe": "Tentang Saya",
      "overview.aboutMeText":
        "Pengembang full-stack yang bersemangat dengan 5+ tahun pengalaman dalam membangun aplikasi web yang skalabel. Spesialisasi dalam ekosistem React, Node.js, dan Laravel dengan fokus kuat pada penyampaian solusi berkinerja tinggi dan ramah pengguna. Berdedikasi pada kode bersih, aksesibilitas, dan mengikuti tren teknologi terbaru.",
      "overview.contactInfo": "Informasi Kontak",
      "overview.personalInfo": "Info Pribadi",
      "overview.location": "San Francisco, CA",
      "overview.availability": "Tersedia Penuh Waktu",
      "overview.devLevel": "Level Pengembang",
      "overview.coreTech": "Teknologi Inti",
      "overview.achievements": "Pencapaian",
      "overview.viewAll": "Lihat semua",
      "overview.years": "tahun",
      "projects.title": "Proyek",
      "projects.searchPlaceholder": "Cari proyek...",
      "projects.filter.status": "Status",
      "projects.filter.tech": "Teknologi",
      "projects.filter.category": "Kategori",
      "projects.sort.title": "Urutkan berdasarkan Judul",
      "projects.sort.stars": "Urutkan berdasarkan Bintang",
      "projects.sort.date": "Urutkan berdasarkan Tanggal",
      "projects.sort.asc": "Naik",
      "projects.sort.desc": "Turun",
      "projects.viewAsGrid": "Tampilan Grid",
      "projects.viewAsList": "Tampilan Daftar",
      "projects.branches": "Cabang",
      "projects.stars": "Bintang",
      "projects.views": "Dilihat",
      "projects.forks": "Fork",
      "projects.issues": "Isu",
      "projects.features": "Fitur",
      "projects.techStack": "Teknologi",
      "projects.statusLabel.completed": "Selesai",
      "projects.statusLabel.in-progress": "Sedang Berjalan",
      "projects.statusLabel.planned": "Direncanakan",
      "projects.viewDemo": "Lihat Demo",
      "projects.viewCode": "Lihat Kode",
      "projects.close": "Tutup",
      "projects.noProjectsFound":
        "Tidak ada proyek yang ditemukan sesuai kriteria Anda.",
      "skills.title": "Keahlian & Keahlian",
      "skills.description": "Kemahiran teknis saya di berbagai domain.",
      "skills.filterAll": "Semua",
      "skills.filterFrontend": "Frontend",
      "skills.filterBackend": "Backend",
      "skills.filterDevops": "DevOps",
      "skills.filterDatabase": "Database",
      "skills.filterTools": "Alat",
      "skills.filterLanguage": "Bahasa",
      "skills.yearsExp": "Thn Pengalaman",
      "skills.proficiency": "Kemahiran",
      "experience.title": "Pengalaman Kerja",
      "experience.present": "Sekarang",
      "experience.responsibilities": "Tanggung Jawab",
      "experience.achievements": "Pencapaian Utama",
      "experience.technologies": "Teknologi yang Digunakan",
      "education.title": "Pendidikan",
      "education.achievements": "Prestasi/Kegiatan",
      "achievements.title": "Pencapaian & Penghargaan",
      "achievements.issuedBy": "Dikeluarkan oleh",
      "activity.title": "Aktivitas Kontribusi & Statistik",
      "activity.contributions": "Kontribusi",
      "activity.last12Months": "12 Bulan Terakhir",
      "activity.devStats": "Statistik Pengembang",
      "activity.repos": "Repositori",
      "activity.stars": "Bintang Diterima",
      "activity.rating": "Peringkat Rata2",
      "activity.followers": "Pengikut",
      "activity.following": "Mengikuti",
      "activity.streak": "Streak Saat Ini",
      "activity.commits": "Total Commit",
      "blog.title": "Postingan Blog Terbaru",
      "blog.readMore": "Baca Selengkapnya",
      "blog.readTimeSuffix": "mnt baca",
      "blog.likes": "Suka",
      "blog.comments": "Komentar",
      "blog.shares": "Dibagikan",
      "testimonials.title": "Testimoni",
      "testimonials.whatPeopleSay": "Apa Kata Mereka Tentang Saya",
      "contact.title": "Hubungi Saya",
      "contact.form.title": "Kirim Pesan",
      "contact.form.name": "Nama Anda",
      "contact.form.email": "Email Anda",
      "contact.form.subject": "Subjek",
      "contact.form.message": "Pesan Anda",
      "contact.form.send": "Kirim Pesan",
      "contact.info": "Info Kontak",
      "contact.social": "Temukan saya di",
      "notifications.title": "Notifikasi",
      "notifications.markAsRead": "Tandai sudah dibaca",
      "notifications.clearAll": "Bersihkan Semua",
      "notifications.empty": "Tidak ada notifikasi baru",
      "settings.title": "Pengaturan",
      "settings.theme": "Tema",
      "settings.theme.light": "Terang",
      "settings.theme.dark": "Gelap",
      "settings.theme.system": "Sistem",
      "settings.language": "Bahasa",
      "settings.accessibility": "Aksesibilitas",
      "settings.fontSize": "Ukuran Font",
      "settings.fontSize.default": "Default",
      "settings.fontSize.large": "Besar",
      "settings.fontSize.xlarge": "Ekstra Besar",
      "settings.reduceMotion": "Kurangi Gerakan",
      "settings.export": "Ekspor Portofolio",
      "settings.export.pdf": "Ekspor sebagai PDF",
      "settings.export.json": "Ekspor sebagai JSON",
      "settings.export.loading": "Mengekspor...",
      "footer.rights": "Hak cipta dilindungi.",
      loading: "Memuat Konten...",
      "loading.page": "Menginisialisasi Profil...",
      "accessibility.skipLink": "Lompat ke konten utama",
      "common.viewDetails": "Lihat Detail",
      "common.showMore": "Tampilkan Lebih Banyak",
      "common.showLess": "Tampilkan Lebih Sedikit",
      "common.status": "Status",
      "common.category": "Kategori",
      "common.technology": "Teknologi",
      "common.date": "Tanggal",
      "common.issuer": "Penerbit",
      "common.period": "Periode",
      "common.gpa": "IPK",
      "common.verified": "Terverifikasi",
      "common.notVerified": "Belum Diverifikasi",
      "certifications.title": "Sertifikasi",
      "certifications.credentialID": "ID Kredensial",
      "certifications.expiry": "Kadaluarsa",
      "certifications.skillsCovered": "Keahlian yang Dicakup",
      "certifications.verify": "Verifikasi",
      // ... (add other keys from your provided id/common.json)
    },
  },
};

i18n
  .use(initReactI18next) // passes i18n down to react-i18next
  .init({
    resources,
    lng: "en", // default language
    fallbackLng: "en",
    ns: ["common"], // namespace
    defaultNS: "common",
    interpolation: {
      escapeValue: false, // react already safes from xss
    },
    react: {
      useSuspense: false, // Optional: disable suspense if not needed
    },
  });

//=============================================================================
// 5. CONTEXTS & PROVIDERS
//=============================================================================

// --- Theme Context ---
interface ThemeContextProps {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  resolvedTheme: "light" | "dark"; // Actual theme applied (light/dark)
}

const ThemeContext = createContext<ThemeContextProps | undefined>(undefined);

/**
 * Provides theme state (light, dark, system) and manages applying the theme class.
 * @param {object} props - Component props.
 * @param {ReactNode} props.children - Child components to wrap.
 */
const ThemeProvider = ({ children }: { children: ReactNode }) => {
  const [theme, setThemeState] = useState<Theme>(() => {
    // 1. Get theme from localStorage
    if (typeof window !== "undefined") {
      const storedTheme = localStorage.getItem("theme") as Theme | null;
      if (storedTheme && ["light", "dark", "system"].includes(storedTheme)) {
        return storedTheme;
      }
    }
    // 2. Fallback to system preference (or default to dark if no preference)
    return "dark"; // Defaulting to dark as per original code
  });

  // Calculate the actual theme to apply (resolving 'system')
  const resolvedTheme = useMemo<"light" | "dark">(() => {
    if (theme === "system") {
      if (typeof window !== "undefined") {
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      }
      return "dark"; // Default on server or if media query fails
    }
    return theme;
  }, [theme]);

  // Effect to apply theme class and listen for system changes
  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove("light", "dark");
    root.classList.add(resolvedTheme);
    localStorage.setItem("theme", theme); // Save preference

    // Listener for system theme changes
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const handleChange = () => {
      if (theme === "system") {
        const newResolvedTheme = mediaQuery.matches ? "dark" : "light";
        root.classList.remove("light", "dark");
        root.classList.add(newResolvedTheme);
      }
    };

    mediaQuery.addEventListener("change", handleChange);
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, [theme, resolvedTheme]);

  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
  };

  const contextValue = useMemo(
    () => ({ theme, setTheme, resolvedTheme }),
    [theme, resolvedTheme]
  );

  return (
    <ThemeContext.Provider value={contextValue}>
      {children}
    </ThemeContext.Provider>
  );
};

/** Hook to easily access theme context */
const useTheme = (): ThemeContextProps => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};

// --- Accessibility Context ---
interface AccessibilityContextProps {
  fontSize: FontSize;
  setFontSize: (size: FontSize) => void;
  reduceMotion: boolean;
  setReduceMotion: (enabled: boolean) => void;
}

const AccessibilityContext = createContext<
  AccessibilityContextProps | undefined
>(undefined);

/**
 * Provides accessibility settings like font size and reduced motion preference.
 * @param {object} props - Component props.
 * @param {ReactNode} props.children - Child components to wrap.
 */
const AccessibilityProvider = ({ children }: { children: ReactNode }) => {
  const [fontSize, setFontSizeState] = useState<FontSize>(() => {
    if (typeof window !== "undefined") {
      return (localStorage.getItem("fontSize") as FontSize | null) || "default";
    }
    return "default";
  });
  const [reduceMotion, setReduceMotionState] = useState<boolean>(() => {
    if (typeof window !== "undefined") {
      return localStorage.getItem("reduceMotion") === "true";
    }
    return false;
  });

  const setFontSize = (size: FontSize) => {
    setFontSizeState(size);
    localStorage.setItem("fontSize", size);
    document.documentElement.setAttribute("data-font-size", size); // Apply via data attribute
  };

  const setReduceMotion = (enabled: boolean) => {
    setReduceMotionState(enabled);
    localStorage.setItem("reduceMotion", String(enabled));
    document.documentElement.setAttribute(
      "data-reduce-motion",
      String(enabled)
    ); // Apply via data attribute
  };

  // Apply initial settings on mount
  useEffect(() => {
    document.documentElement.setAttribute("data-font-size", fontSize);
    document.documentElement.setAttribute(
      "data-reduce-motion",
      String(reduceMotion)
    );
  }, [fontSize, reduceMotion]);

  const contextValue = useMemo(
    () => ({
      fontSize,
      setFontSize,
      reduceMotion,
      setReduceMotion,
    }),
    [fontSize, reduceMotion]
  );

  return (
    <AccessibilityContext.Provider value={contextValue}>
      {children}
    </AccessibilityContext.Provider>
  );
};

/** Hook to easily access accessibility context */
const useAccessibility = (): AccessibilityContextProps => {
  const context = useContext(AccessibilityContext);
  if (context === undefined) {
    throw new Error(
      "useAccessibility must be used within an AccessibilityProvider"
    );
  }
  return context;
};

// --- Combined App Provider ---
/**
 * Combines all application-level providers for cleaner nesting in the main layout/page.
 * @param {object} props - Component props.
 * @param {ReactNode} props.children - Child components to wrap.
 */
const AppProvider = ({ children }: { children: ReactNode }) => {
  return (
    <I18nextProvider i18n={i18n}>
      {" "}
      {/* Added i18n Provider */}
      <ThemeProvider>
        <AccessibilityProvider>{children}</AccessibilityProvider>
      </ThemeProvider>
    </I18nextProvider>
  );
};

//=============================================================================
// 6. CUSTOM HOOKS
//=============================================================================

/**
 * Hook to persist state in localStorage.
 * @template T The type of the state value.
 * @param {string} key The key for localStorage.
 * @param {T} initialValue The initial value if nothing is stored.
 * @returns {[T, React.Dispatch<React.SetStateAction<T>>]} The state value and setter function.
 */
function useLocalStorage<T>(
  key: string,
  initialValue: T
): [T, React.Dispatch<React.SetStateAction<T>>] {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === "undefined") {
      return initialValue;
    }
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key “${key}”:`, error);
      return initialValue;
    }
  });

  const setValue = (value: T | ((val: T) => T)) => {
    try {
      const valueToStore =
        value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      if (typeof window !== "undefined") {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.error(`Error setting localStorage key “${key}”:`, error);
    }
  };

  return [storedValue, setValue];
}

/**
 * Hook to track window scroll position.
 * @returns {number} The current vertical scroll position (window.scrollY).
 */
function useScrollPosition(): number {
  const [scrollPosition, setScrollPosition] = useState(0);

  useEffect(() => {
    if (typeof window === "undefined") return;

    const handleScroll = () => {
      setScrollPosition(window.scrollY);
    };

    window.addEventListener("scroll", handleScroll);
    // Initial check in case the page loads scrolled
    handleScroll();

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  return scrollPosition;
}

/**
 * Hook to detect clicks outside a specified element.
 * @param {React.RefObject<HTMLElement>} ref - Ref to the element to monitor.
 * @param {() => void} handler - Function to call when a click outside occurs.
 */
function useOnClickOutside(
  ref: React.RefObject<HTMLElement>,
  handler: () => void
) {
  useEffect(() => {
    const listener = (event: MouseEvent | TouchEvent) => {
      // Do nothing if clicking ref's element or descendent elements
      if (!ref.current || ref.current.contains(event.target as Node)) {
        return;
      }
      handler();
    };

    document.addEventListener("mousedown", listener);
    document.addEventListener("touchstart", listener);

    return () => {
      document.removeEventListener("mousedown", listener);
      document.removeEventListener("touchstart", listener);
    };
  }, [ref, handler]); // Reload only if ref or handler changes
}

//=============================================================================
// 7. CORE UI COMPONENTS (Atomic Components)
//=============================================================================

// --- Button Component ---
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "secondary" | "danger" | "ghost" | "outline";
  size?: "sm" | "md" | "lg";
  leftIcon?: IconDefinition;
  rightIcon?: IconDefinition;
  isLoading?: boolean;
  children: ReactNode;
}

/**
 * A versatile Button component with different variants, sizes, icons, and loading state.
 */
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      children,
      variant = "primary",
      size = "md",
      leftIcon,
      rightIcon,
      isLoading = false,
      className = "",
      disabled,
      ...props
    },
    ref
  ) => {
    const { reduceMotion } = useAccessibility();

    const baseStyles =
      "inline-flex items-center justify-center font-medium rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background-light dark:focus:ring-offset-background-dark transition-all duration-200 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed";

    const sizeStyles = {
      sm: "px-3 py-1.5 text-sm",
      md: "px-4 py-2 text-base",
      lg: "px-6 py-3 text-lg",
    };

    const variantStyles = {
      primary:
        "bg-primary text-white hover:bg-primary-dark focus:ring-primary disabled:bg-primary/60",
      secondary:
        "bg-secondary text-white hover:bg-secondary-dark focus:ring-secondary disabled:bg-secondary/60",
      danger:
        "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 disabled:bg-red-600/60",
      ghost:
        "bg-transparent text-text hover:bg-gray-100 dark:hover:bg-gray-700 focus:ring-primary disabled:text-gray-400",
      outline:
        "bg-transparent border border-border text-text hover:bg-gray-100 dark:hover:bg-gray-700 focus:ring-primary disabled:border-gray-300 disabled:text-gray-400",
    };

    const motionProps = reduceMotion
      ? {}
      : { whileHover: { scale: 1.03 }, whileTap: { scale: 0.97 } };

    return (
      <motion.button
        ref={ref}
        className={`${baseStyles} ${sizeStyles[size]} ${variantStyles[variant]} ${className}`}
        disabled={disabled || isLoading}
        {...motionProps}
        {...props}
      >
        {isLoading && (
          <FontAwesomeIcon
            icon={faSpinner}
            className="animate-spin -ml-1 mr-2 h-4 w-4"
          />
        )}
        {!isLoading && leftIcon && (
          <FontAwesomeIcon
            icon={leftIcon}
            className={`-ml-1 mr-2 h-4 w-4 ${size === "lg" ? "h-5 w-5" : ""}`}
          />
        )}
        {children}
        {!isLoading && rightIcon && (
          <FontAwesomeIcon
            icon={rightIcon}
            className={`ml-2 -mr-1 h-4 w-4 ${size === "lg" ? "h-5 w-5" : ""}`}
          />
        )}
      </motion.button>
    );
  }
);
Button.displayName = "Button";

// --- Card Component ---
interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  children: ReactNode;
  shadow?: "sm" | "md" | "lg" | "xl" | "none";
  padding?: "sm" | "md" | "lg" | "none";
  className?: string;
}

/**
 * A basic Card component for wrapping content sections.
 */
const Card: React.FC<CardProps> = ({
  children,
  shadow = "lg",
  padding = "md",
  className = "",
  ...props
}) => {
  const shadowStyles = {
    sm: "shadow-sm",
    md: "shadow-md",
    lg: "shadow-lg",
    xl: "shadow-xl",
    none: "shadow-none",
  };
  const paddingStyles = {
    sm: "p-4",
    md: "p-6",
    lg: "p-8",
    none: "p-0",
  };
  return (
    <div
      className={`bg-card rounded-lg overflow-hidden ${shadowStyles[shadow]} ${paddingStyles[padding]} ${className}`}
      {...props}
    >
      {children}
    </div>
  );
};

// --- Icon Component ---
interface IconProps {
  icon: IconDefinition;
  size?: "xs" | "sm" | "md" | "lg" | "xl" | "2x" | "3x";
  className?: string;
  color?: string; // Tailwind color class e.g., "text-blue-500"
}
/**
 * Wrapper around FontAwesomeIcon for consistent styling.
 */
const Icon: React.FC<IconProps> = ({
  icon,
  size = "md",
  className = "",
  color,
}) => {
  const sizeClasses = {
    xs: "h-3 w-3",
    sm: "h-4 w-4",
    md: "h-5 w-5",
    lg: "h-6 w-6",
    xl: "h-8 w-8",
    "2x": "h-10 w-10",
    "3x": "h-12 w-12",
  };
  return (
    <FontAwesomeIcon
      icon={icon}
      className={`${sizeClasses[size]} ${color || "text-current"} ${className}`}
    />
  );
};

// --- Modal Component ---
interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: ReactNode;
  size?: "sm" | "md" | "lg" | "xl" | "full";
}

/**
 * A modal dialog component with animation.
 */
const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  title,
  children,
  size = "md",
}) => {
  const { reduceMotion } = useAccessibility();
  const modalRef = useRef<HTMLDivElement>(null);

  // Close modal on escape key press
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === "Escape") {
        onClose();
      }
    };
    if (isOpen) {
      document.addEventListener("keydown", handleEscape);
    }
    return () => document.removeEventListener("keydown", handleEscape);
  }, [isOpen, onClose]);

  // Close modal on outside click
  useOnClickOutside(modalRef, onClose);

  const sizeClasses = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    full: "max-w-full",
  };

  const animationVariants = reduceMotion
    ? {}
    : {
        hidden: { opacity: 0, scale: 0.9 },
        visible: {
          opacity: 1,
          scale: 1,
          transition: { duration: 0.2, ease: "easeOut" },
        },
        exit: {
          opacity: 0,
          scale: 0.9,
          transition: { duration: 0.15, ease: "easeIn" },
        },
      };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-60 backdrop-blur-sm"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          <motion.div
            ref={modalRef}
            className={`bg-card rounded-lg shadow-xl overflow-hidden w-full ${sizeClasses[size]} flex flex-col max-h-[90vh]`}
            variants={animationVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            role="dialog"
            aria-modal="true"
            aria-labelledby={title ? "modal-title" : undefined}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-border">
              {title && (
                <h2
                  id="modal-title"
                  className="text-lg font-semibold text-text"
                >
                  {title}
                </h2>
              )}
              <Button
                variant="ghost"
                size="sm"
                onClick={onClose}
                aria-label="Close modal"
                className="ml-auto -mr-2" // Adjust margin for alignment
              >
                <Icon icon={faTimes} size="lg" />
              </Button>
            </div>

            {/* Body */}
            <div className="p-6 overflow-y-auto flex-grow">{children}</div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

// --- Skeleton Component ---
interface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {
  height?: string; // e.g., 'h-4', 'h-32'
  width?: string; // e.g., 'w-full', 'w-1/2'
  shape?: "rect" | "circle";
  className?: string;
}

/**
 * A skeleton loading component with a shimmer animation.
 */
const Skeleton: React.FC<SkeletonProps> = ({
  height = "h-4",
  width = "w-full",
  shape = "rect",
  className = "",
  ...props
}) => {
  const shapeClass = shape === "circle" ? "rounded-full" : "rounded";
  const baseBg = "bg-gray-300 dark:bg-gray-700";
  const shimmerBg = "bg-shimmer-gradient-light dark:bg-shimmer-gradient";

  return (
    <div
      className={`animate-shimmer ${baseBg} ${shimmerBg} bg-[length:2000px_100%] ${height} ${width} ${shapeClass} ${className}`}
      style={{
        backgroundRepeat: "no-repeat",
      }}
      {...props}
    />
  );
};

// --- Tag Component ---
interface TagProps {
  children: ReactNode;
  color?:
    | "blue"
    | "green"
    | "yellow"
    | "red"
    | "indigo"
    | "purple"
    | "pink"
    | "gray";
  size?: "sm" | "md";
  className?: string;
  icon?: IconDefinition;
}
/**
 * A simple Tag component for displaying labels or categories.
 */
const Tag: React.FC<TagProps> = ({
  children,
  color = "gray",
  size = "sm",
  className = "",
  icon,
}) => {
  const colorClasses = {
    blue: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
    green: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
    yellow:
      "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
    red: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
    indigo:
      "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200",
    purple:
      "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200",
    pink: "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200",
    gray: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200",
  };
  const sizeClasses = {
    sm: "px-2.5 py-0.5 text-xs",
    md: "px-3 py-1 text-sm",
  };
  return (
    <span
      className={`inline-flex items-center font-medium rounded-full ${colorClasses[color]} ${sizeClasses[size]} ${className}`}
    >
      {icon && <Icon icon={icon} size="sm" className="mr-1.5" />}
      {children}
    </span>
  );
};

// --- Tooltip Component ---
interface TooltipProps {
  content: ReactNode;
  children: ReactElement; // Must be a single React element
  position?: "top" | "bottom" | "left" | "right";
  className?: string;
}
/**
 * A simple Tooltip component appearing on hover.
 * Uses basic CSS for positioning, could be enhanced with Popper.js.
 */
const Tooltip: React.FC<TooltipProps> = ({
  content,
  children,
  position = "top",
  className,
}) => {
  const [isVisible, setIsVisible] = useState(false);

  const positionClasses = {
    top: "bottom-full left-1/2 -translate-x-1/2 mb-2",
    bottom: "top-full left-1/2 -translate-x-1/2 mt-2",
    left: "right-full top-1/2 -translate-y-1/2 mr-2",
    right: "left-full top-1/2 -translate-y-1/2 ml-2",
  };

  // Ensure only one child is passed and add event handlers
  const child = React.Children.only(children);
  const trigger = React.cloneElement(child, {
    onMouseEnter: () => setIsVisible(true),
    onMouseLeave: () => setIsVisible(false),
    onFocus: () => setIsVisible(true),
    onBlur: () => setIsVisible(false),
    "aria-describedby": isVisible ? "tooltip-content" : undefined,
  });

  return (
    <div className={`relative inline-block ${className}`}>
      {trigger}
      <AnimatePresence>
        {isVisible && (
          <motion.div
            id="tooltip-content"
            role="tooltip"
            className={`absolute z-10 px-3 py-1.5 text-sm font-medium text-white bg-gray-900 rounded-lg shadow-sm dark:bg-gray-700 whitespace-nowrap ${positionClasses[position]}`}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            transition={{ duration: 0.15 }}
          >
            {content}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

// --- Input Component ---
interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  leftIcon?: IconDefinition;
  rightIcon?: IconDefinition;
  wrapperClassName?: string;
}
/**
 * Styled Input component with optional label, error message, and icons.
 */
const Input = React.forwardRef<HTMLInputElement, InputProps>(
  (
    {
      label,
      id,
      error,
      leftIcon,
      rightIcon,
      className = "",
      wrapperClassName = "",
      type = "text",
      ...props
    },
    ref
  ) => {
    const inputId =
      id ||
      label?.toLowerCase().replace(/\s+/g, "-") ||
      `input-${Math.random().toString(36).substring(7)}`;
    const hasError = Boolean(error);
    const hasLeftIcon = Boolean(leftIcon);
    const hasRightIcon = Boolean(rightIcon);

    return (
      <div className={`mb-4 ${wrapperClassName}`}>
        {label && (
          <label
            htmlFor={inputId}
            className="block text-sm font-medium text-text mb-1"
          >
            {label}
          </label>
        )}
        <div className="relative rounded-md shadow-sm">
          {hasLeftIcon && (
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Icon icon={leftIcon!} className="text-gray-400" size="sm" />
            </div>
          )}
          <input
            type={type}
            id={inputId}
            ref={ref}
            className={`block w-full px-3 py-2 border rounded-md focus:outline-none sm:text-sm
                        ${hasLeftIcon ? "pl-10" : "pl-3"}
                        ${hasRightIcon ? "pr-10" : "pr-3"}
                        ${
                          hasError
                            ? "border-red-500 text-red-900 placeholder-red-300 focus:ring-red-500 focus:border-red-500 dark:border-red-400"
                            : "border-border text-text placeholder-gray-400 dark:placeholder-gray-500 focus:ring-primary focus:border-primary bg-background dark:bg-gray-700 dark:border-gray-600"
                        }
                        ${className}`}
            aria-invalid={hasError}
            aria-describedby={hasError ? `${inputId}-error` : undefined}
            {...props}
          />
          {hasRightIcon && !hasError && (
            <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <Icon icon={rightIcon!} className="text-gray-400" size="sm" />
            </div>
          )}
          {hasError && (
            <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <Icon
                icon={faExclamationCircle}
                className="text-red-500"
                size="sm"
              />
            </div>
          )}
        </div>
        {hasError && (
          <p
            id={`${inputId}-error`}
            className="mt-1 text-xs text-red-600 dark:text-red-400"
          >
            {error}
          </p>
        )}
      </div>
    );
  }
);
Input.displayName = "Input";

// --- Textarea Component ---
interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  label?: string;
  error?: string;
  wrapperClassName?: string;
  rows?: number;
}

/**
 * Styled Textarea component.
 */
const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  (
    {
      label,
      id,
      error,
      className = "",
      wrapperClassName = "",
      rows = 4,
      ...props
    },
    ref
  ) => {
    const textareaId =
      id ||
      label?.toLowerCase().replace(/\s+/g, "-") ||
      `textarea-${Math.random().toString(36).substring(7)}`;
    const hasError = Boolean(error);

    return (
      <div className={`mb-4 ${wrapperClassName}`}>
        {label && (
          <label
            htmlFor={textareaId}
            className="block text-sm font-medium text-text mb-1"
          >
            {label}
          </label>
        )}
        <textarea
          id={textareaId}
          ref={ref}
          rows={rows}
          className={`block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none sm:text-sm
                      ${
                        hasError
                          ? "border-red-500 text-red-900 placeholder-red-300 focus:ring-red-500 focus:border-red-500 dark:border-red-400"
                          : "border-border text-text placeholder-gray-400 dark:placeholder-gray-500 focus:ring-primary focus:border-primary bg-background dark:bg-gray-700 dark:border-gray-600"
                      }
                      ${className}`}
          aria-invalid={hasError}
          aria-describedby={hasError ? `${textareaId}-error` : undefined}
          {...props}
        />
        {hasError && (
          <p
            id={`${textareaId}-error`}
            className="mt-1 text-xs text-red-600 dark:text-red-400"
          >
            {error}
          </p>
        )}
      </div>
    );
  }
);
Textarea.displayName = "Textarea";

// --- Select Component ---
interface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {
  label?: string;
  error?: string;
  wrapperClassName?: string;
  options: { value: string | number; label: string }[];
}
/**
 * Styled Select dropdown component.
 */
const Select = React.forwardRef<HTMLSelectElement, SelectProps>(
  (
    {
      label,
      id,
      error,
      options,
      className = "",
      wrapperClassName = "",
      ...props
    },
    ref
  ) => {
    const selectId =
      id ||
      label?.toLowerCase().replace(/\s+/g, "-") ||
      `select-${Math.random().toString(36).substring(7)}`;
    const hasError = Boolean(error);

    return (
      <div className={`mb-4 ${wrapperClassName}`}>
        {label && (
          <label
            htmlFor={selectId}
            className="block text-sm font-medium text-text mb-1"
          >
            {label}
          </label>
        )}
        <select
          id={selectId}
          ref={ref}
          className={`block w-full pl-3 pr-10 py-2 border rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm
                    ${
                      hasError
                        ? "border-red-500 text-red-900 focus:ring-red-500 focus:border-red-500 dark:border-red-400"
                        : "border-border text-text focus:ring-primary focus:border-primary bg-background dark:bg-gray-700 dark:border-gray-600"
                    }
                    ${className}`}
          aria-invalid={hasError}
          aria-describedby={hasError ? `${selectId}-error` : undefined}
          {...props}
        >
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        {hasError && (
          <p
            id={`${selectId}-error`}
            className="mt-1 text-xs text-red-600 dark:text-red-400"
          >
            {error}
          </p>
        )}
      </div>
    );
  }
);
Select.displayName = "Select";

// --- Notification Toast Component ---
interface NotificationToastProps {
  notification: Notification;
  onDismiss: (id: string) => void;
}
/**
 * Displays a single notification toast message.
 */
const NotificationToast: React.FC<NotificationToastProps> = ({
  notification,
  onDismiss,
}) => {
  const { t } = useTranslation("common");
  const { reduceMotion } = useAccessibility();
  const [isExiting, setIsExiting] = useState(false);

  const icons = {
    info: faInfoCircle,
    success: faCheckCircle,
    warning: faExclamationTriangle,
    error: faExclamationCircle,
  };

  const colors = {
    info: "blue",
    success: "green",
    warning: "yellow",
    error: "red",
  };

  const iconColor = `text-${colors[notification.type]}-500 dark:text-${
    colors[notification.type]
  }-400`;
  const bgColor = `bg-${colors[notification.type]}-50 dark:bg-gray-800`;
  const borderColor = `border-${colors[notification.type]}-300 dark:border-${
    colors[notification.type]
  }-700`;

  // Auto-dismiss after a delay
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsExiting(true);
      setTimeout(() => onDismiss(notification.id), 300); // Wait for exit animation
    }, 5000); // 5 seconds

    return () => clearTimeout(timer);
  }, [notification.id, onDismiss]);

  const handleManualDismiss = () => {
    setIsExiting(true);
    setTimeout(() => onDismiss(notification.id), 300); // Wait for exit animation
  };

  const animationProps = reduceMotion
    ? {}
    : {
        initial: { opacity: 0, x: 100 },
        animate: { opacity: 1, x: 0 },
        exit: { opacity: 0, x: 100, transition: { duration: 0.3 } },
        transition: { type: "spring", stiffness: 100, damping: 15 },
      };

  return (
    <motion.div
      layout // Animate layout changes (when items are removed)
      {...animationProps}
      className={`w-full max-w-sm p-4 mb-3 border ${borderColor} rounded-lg shadow-lg ${bgColor} pointer-events-auto flex items-start space-x-3`}
      role="alert"
      aria-live="assertive"
      aria-atomic="true"
    >
      <div className={`flex-shrink-0 ${iconColor}`}>
        <Icon icon={icons[notification.type]} size="lg" />
      </div>
      <div className="flex-1">
        <p className="text-sm font-semibold text-gray-900 dark:text-white">
          {notification.title}
        </p>
        <p className="text-sm text-gray-600 dark:text-gray-300">
          {notification.message}
        </p>
      </div>
      <div className="flex-shrink-0">
        <Button
          variant="ghost"
          size="sm"
          onClick={handleManualDismiss}
          aria-label={t("notifications.markAsRead")}
          className="-m-1.5 p-1.5"
        >
          <Icon
            icon={faTimes}
            size="sm"
            className="text-gray-500 dark:text-gray-400"
          />
        </Button>
      </div>
    </motion.div>
  );
};

// --- Notifications Container ---
interface NotificationContainerProps {
  notifications: Notification[];
  onDismiss: (id: string) => void;
}
/**
 * Manages the display and animation of multiple notification toasts.
 */
const NotificationContainer: React.FC<NotificationContainerProps> = ({
  notifications,
  onDismiss,
}) => {
  return (
    <div className="fixed top-4 right-4 z-[100] w-full max-w-sm space-y-3">
      <AnimatePresence initial={false}>
        {notifications.map((notification) => (
          <NotificationToast
            key={notification.id}
            notification={notification}
            onDismiss={onDismiss}
          />
        ))}
      </AnimatePresence>
    </div>
  );
};

// --- Skip Link Component ---
/**
 * Provides a "Skip to main content" link for accessibility.
 */
const SkipLink: React.FC<{ mainContentId: string }> = ({ mainContentId }) => {
  const { t } = useTranslation("common");
  return (
    <a
      href={`#${mainContentId}`}
      className="sr-only focus:not-sr-only focus:absolute focus:z-[999] focus:top-2 focus:left-2 focus:px-4 focus:py-2 focus:bg-white dark:focus:bg-gray-800 focus:text-blue-600 dark:focus:text-blue-400 focus:border focus:border-blue-500 focus:rounded-md focus:shadow-lg"
    >
      {t("accessibility.skipLink")}
    </a>
  );
};

//=============================================================================
// 8. LAYOUT COMPONENTS
//=============================================================================

// --- Navbar Component ---
interface NavbarProps {
  activeTab: TabId;
  onTabChange: (tabId: TabId) => void;
  onToggleNotifications: () => void;
  notificationCount: number;
  onOpenSettings: () => void;
}
/**
 * The main navigation bar, becomes fixed on scroll, includes theme toggle, language switcher, and accessibility controls.
 */
const Navbar: React.FC<NavbarProps> = ({
  activeTab,
  onTabChange,
  onToggleNotifications,
  notificationCount,
  onOpenSettings,
}) => {
  const { t, i18n } = useTranslation("common");
  const { theme, setTheme, resolvedTheme } = useTheme();
  const { reduceMotion } = useAccessibility();
  const scrollPosition = useScrollPosition();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  const isFixed = scrollPosition > 200; // Adjust threshold as needed

  const tabs: { id: TabId; labelKey: string; icon: IconDefinition }[] = [
    { id: "overview", labelKey: "navbar.home", icon: faHome },
    { id: "projects", labelKey: "navbar.projects", icon: faCodeBranch },
    { id: "skills", labelKey: "navbar.skills", icon: faCode },
    { id: "experience", labelKey: "navbar.experience", icon: faBriefcase },
    { id: "education", labelKey: "navbar.education", icon: faGraduationCap },
    { id: "achievements", labelKey: "navbar.achievements", icon: faAward },
    { id: "activity", labelKey: "navbar.activity", icon: faChartLine },
    { id: "blog", labelKey: "navbar.blog", icon: faRss },
    {
      id: "testimonials",
      labelKey: "navbar.testimonials",
      icon: faCommentDots,
    },
    { id: "contact", labelKey: "navbar.contact", icon: faEnvelope },
  ];

  const navVariants = reduceMotion
    ? {}
    : {
        initial: { y: -100, opacity: 0 },
        animate: {
          y: 0,
          opacity: 1,
          transition: { type: "spring", stiffness: 100, damping: 20 },
        },
        exit: { y: -100, opacity: 0 },
      };

  const handleLanguageChange = (lang: string) => {
    i18n.changeLanguage(lang);
    // Persist language preference if needed (e.g., using useLocalStorage hook)
  };

  return (
    <>
      {/* Placeholder for fixed navbar height to prevent content jump */}
      {isFixed && <div className="h-16" />}

      <motion.nav
        className={`w-full z-40 transition-all duration-300 ease-in-out ${
          isFixed
            ? "fixed top-0 left-0 right-0 shadow-lg bg-background/80 dark:bg-background-dark/80 backdrop-blur-md"
            : "relative bg-transparent"
        }`}
        variants={navVariants}
        initial={isFixed ? "initial" : false} // Only animate if starting fixed? Or always animate?
        animate={isFixed ? "animate" : { y: 0, opacity: 1 }} // Ensure it's visible when not fixed
        exit="exit" // Might not be needed if it never unmounts
      >
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Logo/Brand */}
            <div className="flex-shrink-0">
              <a
                href="#"
                className="text-xl font-bold text-text hover:text-primary transition-colors"
              >
                {t("profile.name")} {/* Or use appName */}
              </a>
            </div>

            {/* Desktop Navigation Tabs */}
            <div className="hidden md:block">
              <div className="ml-10 flex items-baseline space-x-1 lg:space-x-2 xl:space-x-4">
                {tabs.slice(0, 6).map(
                  (
                    tab // Show fewer tabs on smaller desktop screens
                  ) => (
                    <Button
                      key={tab.id}
                      variant="ghost"
                      size="sm"
                      onClick={() => onTabChange(tab.id)}
                      className={`px-2 py-1 lg:px-3 lg:py-2 ${
                        activeTab === tab.id
                          ? "text-primary dark:text-blue-400 bg-primary/10 dark:bg-blue-900/30"
                          : "text-text hover:text-primary dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-700"
                      }`}
                      leftIcon={tab.icon}
                      aria-current={activeTab === tab.id ? "page" : undefined}
                    >
                      {t(tab.labelKey)}
                    </Button>
                  )
                )}
                {/* Dropdown for more tabs if needed */}
              </div>
            </div>

            {/* Right Side Icons (Desktop) */}
            <div className="hidden md:flex items-center space-x-3">
              {/* Language Switcher */}
              <div className="relative">
                <Select
                  id="language-switcher"
                  value={i18n.language}
                  onChange={(e) => handleLanguageChange(e.target.value)}
                  options={[
                    { value: "en", label: "EN" },
                    { value: "id", label: "ID" },
                  ]}
                  className="bg-transparent border-0 focus:ring-0 !p-0 !pr-6 appearance-none text-sm"
                  wrapperClassName="!mb-0" // Remove margin bottom from Select wrapper
                  aria-label={t("settings.language")}
                />
                <Icon
                  icon={faAngleDown}
                  className="absolute right-1 top-1/2 -translate-y-1/2 pointer-events-none text-gray-400"
                  size="xs"
                />
              </div>

              {/* Theme Toggle */}
              <Tooltip content={t("settings.theme")} position="bottom">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() =>
                    setTheme(resolvedTheme === "dark" ? "light" : "dark")
                  }
                  aria-label={`Switch to ${
                    resolvedTheme === "dark" ? "light" : "dark"
                  } mode`}
                  className="p-2 rounded-full"
                >
                  <Icon
                    icon={resolvedTheme === "dark" ? faSun : faMoon}
                    size="md"
                  />
                </Button>
              </Tooltip>

              {/* Notifications */}
              <Tooltip content={t("notifications.title")} position="bottom">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onToggleNotifications}
                  aria-label={`${notificationCount} notifications`}
                  className="relative p-2 rounded-full"
                >
                  <Icon icon={faBell} size="md" />
                  {notificationCount > 0 && (
                    <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500 ring-2 ring-background dark:ring-background-dark" />
                  )}
                </Button>
              </Tooltip>

              {/* Settings */}
              <Tooltip content={t("settings.title")} position="bottom">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onOpenSettings}
                  aria-label={t("settings.title")}
                  className="p-2 rounded-full"
                >
                  <Icon icon={faCog} size="md" />
                </Button>
              </Tooltip>
            </div>

            {/* Mobile Menu Button */}
            <div className="md:hidden flex items-center">
              {/* Add Mobile Notifications/Theme Toggles here if desired */}
              <Tooltip content={t("settings.theme")} position="bottom">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() =>
                    setTheme(resolvedTheme === "dark" ? "light" : "dark")
                  }
                  aria-label={`Switch to ${
                    resolvedTheme === "dark" ? "light" : "dark"
                  } mode`}
                  className="p-2 rounded-full mr-1"
                >
                  <Icon
                    icon={resolvedTheme === "dark" ? faSun : faMoon}
                    size="md"
                  />
                </Button>
              </Tooltip>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                aria-label="Open main menu"
                aria-expanded={isMobileMenuOpen}
                className="p-2 rounded-md"
              >
                <Icon icon={isMobileMenuOpen ? faTimes : faBars} size="lg" />
              </Button>
            </div>
          </div>
        </div>

        {/* Mobile Menu */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              className="md:hidden border-t border-border bg-background dark:bg-background-dark absolute w-full shadow-lg"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.2 }}
            >
              <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                {tabs.map((tab) => (
                  <Button
                    key={tab.id}
                    variant="ghost"
                    size="md"
                    onClick={() => {
                      onTabChange(tab.id);
                      setIsMobileMenuOpen(false);
                    }}
                    className={`w-full justify-start ${
                      activeTab === tab.id
                        ? "text-primary dark:text-blue-400 bg-primary/10 dark:bg-blue-900/30"
                        : "text-text hover:text-primary dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-700"
                    }`}
                    leftIcon={tab.icon}
                    aria-current={activeTab === tab.id ? "page" : undefined}
                  >
                    {t(tab.labelKey)}
                  </Button>
                ))}
                {/* Add mobile settings/language toggles here */}
                <div className="border-t border-border pt-2 mt-2 flex justify-between items-center px-3">
                  <Select
                    id="language-switcher-mobile"
                    value={i18n.language}
                    onChange={(e) => handleLanguageChange(e.target.value)}
                    options={[
                      { value: "en", label: "English" },
                      { value: "id", label: "Bahasa" },
                    ]}
                    className="text-sm"
                    wrapperClassName="!mb-0 flex-grow mr-4"
                    aria-label={t("settings.language")}
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={onToggleNotifications}
                    aria-label={`${notificationCount} notifications`}
                    className="relative p-2 rounded-full mr-1"
                  >
                    <Icon icon={faBell} size="md" />
                    {notificationCount > 0 && (
                      <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500 ring-2 ring-white dark:ring-gray-800" />
                    )}
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={onOpenSettings}
                    aria-label={t("settings.title")}
                    className="p-2 rounded-full"
                  >
                    <Icon icon={faCog} size="md" />
                  </Button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.nav>
    </>
  );
};

// --- Footer Component ---
/**
 * Simple Footer component.
 */
const Footer: React.FC = () => {
  const { t } = useTranslation("common");
  const currentYear = new Date().getFullYear();

  return (
    <footer className="mt-16 py-8 border-t border-border">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center text-gray-500 dark:text-gray-400 text-sm">
        <p>
          &copy; {currentYear} {t("profile.name")}. {t("footer.rights")}
        </p>
        {/* Optional: Add links or other footer content here */}
        <div className="flex justify-center space-x-4 mt-4">
          {profileData.socialMedia.map((social) => (
            <a
              key={social.platform}
              href={social.url}
              target="_blank"
              rel="noopener noreferrer"
              className="text-gray-400 hover:text-text transition-colors"
              aria-label={`Visit ${social.platform} profile`}
            >
              <Icon icon={social.icon} size="lg" />
            </a>
          ))}
        </div>
      </div>
    </footer>
  );
};

// --- Profile Header Component ---
interface ProfileHeaderProps {
  data: ProfileData["basicInfo"] & { socialMedia: ProfileData["socialMedia"] };
  onContactClick: () => void;
  onDownloadCVClick: () => void; // Placeholder for CV download functionality
}
/**
 * Renders the main profile header section with cover image, profile picture, name, social links, and action buttons.
 */
const ProfileHeader: React.FC<ProfileHeaderProps> = ({
  data,
  onContactClick,
  onDownloadCVClick,
}) => {
  const { t } = useTranslation("common");
  const { reduceMotion } = useAccessibility();

  const coverAnimation = reduceMotion
    ? {}
    : {
        initial: { scale: 1.05, opacity: 0.8 },
        animate: {
          scale: 1,
          opacity: 1,
          transition: { duration: 0.5, ease: "easeOut" },
        },
      };

  const profilePicAnimation = reduceMotion
    ? {}
    : {
        initial: { scale: 0.8, y: 20, opacity: 0 },
        animate: {
          scale: 1,
          y: 0,
          opacity: 1,
          transition: {
            delay: 0.2,
            type: "spring",
            stiffness: 100,
            damping: 15,
          },
        },
      };

  return (
    <Card shadow="xl" padding="none" className="mb-6">
      {/* Cover Image */}
      <div className="h-48 md:h-64 lg:h-80 relative overflow-hidden group">
        <motion.img
          src={data.coverPictureUrl}
          alt="Cover"
          className="w-full h-full object-cover"
          {...coverAnimation}
        />
        {/* Optional Cover Image Overlay */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-black/10"></div>

        {/* Online Status Indicator */}
        <div className="absolute top-4 right-4 flex items-center px-3 py-1 rounded-full bg-gray-900 bg-opacity-60 backdrop-blur-sm text-xs">
          <span className="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse" />
          <span className="text-green-300 font-medium">
            {t("profile.status")}
          </span>
        </div>

        {/* Action Buttons (Share, Bookmark etc. - Placeholder) */}
        <div className="absolute top-4 left-4 flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          <Tooltip content="Share Profile" position="bottom">
            <Button
              variant="secondary"
              size="sm"
              className="!p-2 bg-gray-900/60 hover:bg-gray-800/80 backdrop-blur-sm rounded-full !text-gray-200 hover:!text-white"
            >
              <Icon icon={faShareAlt} />
            </Button>
          </Tooltip>
          <Tooltip content="Bookmark Profile" position="bottom">
            <Button
              variant="secondary"
              size="sm"
              className="!p-2 bg-gray-900/60 hover:bg-gray-800/80 backdrop-blur-sm rounded-full !text-gray-200 hover:!text-white"
            >
              <Icon icon={faBookmark} />
            </Button>
          </Tooltip>
          <Tooltip content="More Options" position="bottom">
            <Button
              variant="secondary"
              size="sm"
              className="!p-2 bg-gray-900/60 hover:bg-gray-800/80 backdrop-blur-sm rounded-full !text-gray-200 hover:!text-white"
            >
              <Icon icon={faEllipsisH} />
            </Button>
          </Tooltip>
        </div>
      </div>

      {/* Profile Info Section */}
      <div className="relative px-4 sm:px-6 lg:px-8 pb-6">
        {/* Profile Picture */}
        <div className="absolute -top-12 sm:-top-16 left-4 sm:left-6 lg:left-8 transform">
          <motion.div
            className="rounded-full border-4 border-card dark:border-gray-800 shadow-xl"
            {...profilePicAnimation}
          >
            <img
              src={data.profilePictureUrl}
              alt={t("profile.name")}
              className="w-24 h-24 sm:w-32 sm:h-32 rounded-full object-cover bg-gray-200 dark:bg-gray-700" // Added bg color as fallback
            />
            {/* Developer Level Badge */}
            <div className="absolute -bottom-1 -right-1 sm:bottom-0 sm:right-0 bg-gradient-to-tr from-red-500 to-pink-500 text-white text-xs font-bold rounded-full w-7 h-7 sm:w-8 sm:h-8 flex items-center justify-center border-2 border-card dark:border-gray-800 shadow-md">
              {data.developerLevel}
            </div>
          </motion.div>
        </div>

        {/* Name, Handle, Social Links, Actions */}
        <div className="flex flex-col md:flex-row md:justify-between md:items-end pt-16 sm:pt-20 md:pt-4">
          {/* Left Side: Name, Handle, Social */}
          <div className="md:ml-40 lg:ml-44 mt-4 md:mt-0">
            <h1 className="text-2xl sm:text-3xl font-bold text-text">
              {data.name}
            </h1>
            <p className="text-blue-500 dark:text-blue-400 text-base sm:text-lg mb-3">
              {data.handle}
            </p>
            {/* Social Media Links */}
            <div className="flex flex-wrap gap-x-4 gap-y-2">
              {data.socialMedia.slice(0, 5).map(
                (
                  social // Limit displayed icons initially
                ) => (
                  <Tooltip
                    key={social.platform}
                    content={social.platform}
                    position="bottom"
                  >
                    <a
                      href={social.url}
                      className="text-gray-500 dark:text-gray-400 hover:text-primary dark:hover:text-blue-400 transition-colors"
                      target="_blank"
                      rel="noopener noreferrer"
                      aria-label={`Visit ${data.name}'s ${social.platform}`}
                    >
                      <Icon icon={social.icon} size="lg" />
                    </a>
                  </Tooltip>
                )
              )}
            </div>
          </div>

          {/* Right Side: Action Buttons */}
          <div className="flex flex-wrap gap-3 mt-4 md:mt-0">
            <Button
              variant="primary"
              size="md"
              onClick={onContactClick}
              leftIcon={faEnvelope}
            >
              {t("profile.contactMe")}
            </Button>
            <Button
              variant="outline"
              size="md"
              onClick={onDownloadCVClick}
              leftIcon={faDownload}
              className="border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
            >
              {t("profile.downloadCV")}
            </Button>
          </div>
        </div>
      </div>
    </Card>
  );
};

// --- Section Wrapper Component ---
interface SectionWrapperProps {
  id: string; // For linking and accessibility
  titleKey: string; // i18n key for the title
  icon?: IconDefinition;
  children: ReactNode;
  className?: string;
  titleClassName?: string;
  contentClassName?: string;
}
/**
 * A wrapper component for consistent section styling with title and icon.
 */
const SectionWrapper: React.FC<SectionWrapperProps> = ({
  id,
  titleKey,
  icon,
  children,
  className = "",
  titleClassName = "",
  contentClassName = "",
}) => {
  const { t } = useTranslation("common");

  return (
    <section
      id={id}
      aria-labelledby={`${id}-heading`}
      className={`py-8 md:py-12 ${className}`}
    >
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <h2
          id={`${id}-heading`}
          className={`text-2xl md:text-3xl font-bold text-text mb-6 md:mb-8 flex items-center ${titleClassName}`}
        >
          {icon && (
            <Icon
              icon={icon}
              className="mr-3 text-primary dark:text-blue-400"
              size="lg"
            />
          )}
          {t(titleKey)}
        </h2>
        <div className={contentClassName}>{children}</div>
      </div>
    </section>
  );
};

//=============================================================================
// 9. SECTION COMPONENTS (Rendering specific parts of the profile)
//=============================================================================

// --- Overview Section ---
interface OverviewSectionProps {
  data: Pick<
    ProfileData,
    | "basicInfo"
    | "contacts"
    | "techStack"
    | "achievements"
    | "projects"
    | "devStats"
  >;
  onNavigate: (tabId: TabId) => void; // Function to navigate to another tab
  onProjectClick: (project: Project) => void; // Function to open project details
}
/**
 * Renders the Overview tab content, including About Me, Stats, Tech Stack, Achievements, Featured Projects.
 */
const OverviewSection: React.FC<OverviewSectionProps> = ({
  data,
  onNavigate,
  onProjectClick,
}) => {
  const { t } = useTranslation("common");
  const { resolvedTheme } = useTheme();

  const statCards = useMemo(
    () => [
      {
        value: data.devStats.repos ?? "N/A",
        labelKey: "activity.repos",
        icon: faCodeBranch,
      },
      {
        value: data.devStats.stars ?? "N/A",
        labelKey: "activity.stars",
        icon: faStar,
      },
      {
        value: data.devStats.contributions ?? "N/A",
        labelKey: "activity.contributions",
        icon: faCode,
      },
      {
        value: data.devStats.rating ?? "N/A",
        labelKey: "activity.rating",
        icon: faCheckCircle,
      },
    ],
    [data.devStats]
  );

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Left Column (Developer Level, Core Tech, Mini Achievements) */}
      <div className="lg:col-span-1 space-y-6">
        {/* Developer Level */}
        <Card>
          <div className="flex justify-between items-center mb-3">
            <h3 className="text-lg font-semibold text-text">
              {t("overview.devLevel")}
            </h3>
            <Tag color="blue" size="md">
              {t("profile.level")} {data.basicInfo.developerLevel}
            </Tag>
          </div>
          <div className="h-2.5 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
            <motion.div
              className="h-full bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${data.basicInfo.developerLevelProgress}%` }}
              transition={{ duration: 1.5, ease: "easeOut" }}
            />
          </div>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1 text-right">
            {data.basicInfo.developerLevelProgress}% Complete
          </p>
        </Card>

        {/* Core Tech Stack */}
        <Card>
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-text">
              {t("overview.coreTech")}
            </h3>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onNavigate("skills")}
              className="text-primary dark:text-blue-400"
            >
              {t("overview.viewAll")}
            </Button>
          </div>
          <div className="space-y-4">
            {data.techStack.slice(0, 5).map((tech) => (
              <div key={tech.id} className="flex items-center group">
                <Tooltip content={tech.category} position="left">
                  <div className="w-10 h-10 flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-lg mr-3 group-hover:bg-blue-100 dark:group-hover:bg-blue-900 transition-colors">
                    <Icon
                      icon={tech.icon}
                      className="text-blue-500 dark:text-blue-400 text-xl"
                    />
                  </div>
                </Tooltip>
                <div className="flex-1">
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-sm font-medium text-text">
                      {tech.name}
                    </span>
                    <span className="text-xs text-gray-500 dark:text-gray-400">
                      {tech.yearsOfExperience} {t("overview.years")}
                    </span>
                  </div>
                  <div className="h-1.5 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                    <Tooltip
                      content={`${t("skills.proficiency")}: ${
                        tech.proficiency
                      }/5`}
                      position="top"
                    >
                      <div
                        className="h-full bg-gradient-to-r from-blue-500 to-indigo-600"
                        style={{ width: `${tech.proficiency * 20}%` }} // Assuming 5 is max proficiency
                      />
                    </Tooltip>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </Card>

        {/* Mini Achievements */}
        <Card>
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-text">
              {t("overview.achievements")}
            </h3>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onNavigate("achievements")}
              className="text-primary dark:text-blue-400"
            >
              {t("overview.viewAll")}
            </Button>
          </div>
          <div className="grid grid-cols-2 gap-4">
            {data.achievements.slice(0, 4).map((achievement) => (
              <Tooltip
                key={achievement.id}
                content={achievement.description}
                position="top"
              >
                <div
                  className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg flex flex-col items-center text-center hover:bg-blue-100 dark:hover:bg-blue-900 transition-colors cursor-pointer transform hover:-translate-y-1"
                  onClick={() => onNavigate("achievements")} // Navigate on click
                  role="button" // Semantics
                  tabIndex={0} // Make focusable
                  onKeyPress={(e) =>
                    e.key === "Enter" && onNavigate("achievements")
                  } // Keyboard nav
                >
                  <div className="w-10 h-10 mb-2 flex items-center justify-center">
                    <Icon
                      icon={achievement.icon}
                      className="text-blue-500 dark:text-blue-400"
                      size="lg"
                    />
                  </div>
                  <span className="text-xs font-medium text-text">
                    {achievement.title}
                  </span>
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {achievement.date.substring(0, 4)}
                  </span>
                </div>
              </Tooltip>
            ))}
          </div>
        </Card>
      </div>

      {/* Right Column (About Me, Stats, Featured Projects) */}
      <div className="lg:col-span-2 space-y-6">
        {/* About Me & Contact Info */}
        <Card>
          <h2 className="text-xl font-semibold text-text mb-4 flex items-center">
            <Icon
              icon={faUserCircle}
              className="mr-2 text-primary dark:text-blue-400"
            />
            {t("overview.aboutMe")}
          </h2>
          <p className="text-text mb-6 text-base leading-relaxed">
            {data.basicInfo.bio}
          </p>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 border-t border-border pt-6">
            {/* Contact Information */}
            <div>
              <h3 className="text-lg font-semibold text-text mb-3">
                {t("overview.contactInfo")}
              </h3>
              <ul className="space-y-3">
                {data.contacts
                  .filter((contact) => contact.isPublic)
                  .map((contact, idx) => (
                    <li
                      key={idx}
                      className="flex items-center text-sm text-text"
                    >
                      <div className="w-8 h-8 flex-shrink-0 flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-lg mr-3">
                        <Icon
                          icon={contact.icon}
                          className="text-primary dark:text-blue-400"
                        />
                      </div>
                      {contact.href ? (
                        <a
                          href={contact.href}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="hover:underline hover:text-primary dark:hover:text-blue-400 transition-colors"
                        >
                          {contact.value}
                          {contact.type === "Website" && (
                            <Icon
                              icon={faExternalLinkAlt}
                              size="xs"
                              className="ml-1.5 opacity-60"
                            />
                          )}
                        </a>
                      ) : (
                        <span>{contact.value}</span>
                      )}
                    </li>
                  ))}
              </ul>
            </div>

            {/* Developer Stats Mini */}
            <div>
              <h3 className="text-lg font-semibold text-text mb-3">
                {t("activity.devStats")}
              </h3>
              <div className="grid grid-cols-2 gap-3">
                {statCards.map((stat, i) => (
                  <div
                    key={i}
                    className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg text-center"
                  >
                    <Icon
                      icon={stat.icon}
                      className="text-blue-500 dark:text-blue-400 text-lg mb-1"
                    />
                    <div className="text-xl font-bold text-text">
                      {stat.value}
                    </div>
                    <div className="text-xs text-gray-500 dark:text-gray-400">
                      {t(stat.labelKey)}
                    </div>
                  </div>
                ))}
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onNavigate("activity")}
                className="text-primary dark:text-blue-400 mt-3 w-full"
              >
                {t("overview.viewAll")} {t("activity.title")}
              </Button>
            </div>
          </div>
        </Card>

        {/* Featured Projects */}
        <Card>
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold text-text flex items-center">
              <Icon
                icon={faLaptopCode}
                className="mr-2 text-primary dark:text-blue-400"
              />
              Featured Projects
            </h2>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onNavigate("projects")}
              className="text-primary dark:text-blue-400"
            >
              {t("overview.viewAll")}
            </Button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {data.projects.slice(0, 2).map(
              (
                project // Show only first 2 featured
              ) => (
                <ProjectCard
                  key={project.id}
                  project={project}
                  onProjectClick={onProjectClick}
                  viewMode="grid" // Use grid style for overview
                />
              )
            )}
          </div>
        </Card>
      </div>
    </div>
  );
};

// --- Project Card Component (Helper for Overview and Projects sections) ---
interface ProjectCardProps {
  project: Project;
  onProjectClick: (project: Project) => void;
  viewMode: "grid" | "list";
}

const ProjectCard: React.FC<ProjectCardProps> = ({
  project,
  onProjectClick,
  viewMode,
}) => {
  const { t } = useTranslation("common");
  const { reduceMotion } = useAccessibility();

  const cardAnimation = reduceMotion
    ? {}
    : {
        whileHover: {
          y: -5,
          boxShadow:
            "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
        }, // Lift and shadow
        transition: { duration: 0.2 },
      };

  const statusColors = {
    completed: "green",
    "in-progress": "blue",
    planned: "yellow",
  } as const; // Type assertion

  const statusIcons = {
    completed: faCheckCircle,
    "in-progress": faSync,
    planned: faClock,
  };

  if (viewMode === "list") {
    return (
      <motion.div
        className="bg-card rounded-lg shadow-md overflow-hidden mb-4 flex flex-col sm:flex-row items-start hover:shadow-lg transition-shadow duration-200 cursor-pointer border border-border"
        onClick={() => onProjectClick(project)}
        role="button"
        tabIndex={0}
        onKeyPress={(e) => e.key === "Enter" && onProjectClick(project)}
        layout // Animate layout changes
        {...cardAnimation}
      >
        {project.image && (
          <img
            src={project.image || "/image/placeholder-project.png"}
            alt={project.title}
            className="w-full sm:w-48 h-32 sm:h-full object-cover flex-shrink-0"
          />
        )}
        <div className="p-4 flex-grow">
          <div className="flex justify-between items-start mb-2">
            <h3 className="text-lg font-semibold text-text hover:text-primary transition-colors">
              {project.title}
            </h3>
            <Tag
              color={statusColors[project.status]}
              size="sm"
              icon={statusIcons[project.status]}
            >
              {t(`projects.statusLabel.${project.status}`)}
            </Tag>
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2">
            {project.description}
          </p>
          <div className="flex flex-wrap gap-1 mb-3">
            {project.techStack.slice(0, 5).map((tech) => (
              <Tag key={tech} color="gray" size="sm">
                {tech}
              </Tag>
            ))}
            {project.techStack.length > 5 && (
              <Tag color="gray" size="sm">
                ...
              </Tag>
            )}
          </div>
          <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
            <div className="flex space-x-3">
              {project.stats?.stars !== undefined && (
                <span>
                  <Icon icon={faStar} className="mr-1" /> {project.stats.stars}
                </span>
              )}
              {project.stats?.forks !== undefined && (
                <span>
                  <Icon icon={faCodeBranch} className="mr-1" />{" "}
                  {project.stats.forks}
                </span>
              )}
            </div>
            <span>
              {t("common.category")}: {project.category}
            </span>
          </div>
        </div>
      </motion.div>
    );
  }

  // Default to Grid View
  return (
    <motion.div
      className="bg-card rounded-lg shadow-md overflow-hidden flex flex-col h-full hover:shadow-xl transition-shadow duration-200 cursor-pointer border border-border"
      onClick={() => onProjectClick(project)}
      role="button"
      tabIndex={0}
      onKeyPress={(e) => e.key === "Enter" && onProjectClick(project)}
      layout // Animate layout changes
      {...cardAnimation}
    >
      {/* Image */}
      <div className="h-48 bg-gradient-to-r from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800 relative">
        {project.image ? (
          <img
            src={project.image}
            alt={project.title}
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center text-gray-500">
            <Icon icon={faLaptopCode} size="3x" />
          </div>
        )}
        <div className="absolute top-2 right-2">
          <Tag
            color={statusColors[project.status]}
            size="sm"
            icon={statusIcons[project.status]}
          >
            {t(`projects.statusLabel.${project.status}`)}
          </Tag>
        </div>
      </div>

      {/* Content */}
      <div className="p-4 flex flex-col flex-grow">
        <h3 className="text-lg font-semibold text-text mb-2 group-hover:text-primary transition-colors">
          {project.title}
        </h3>
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 flex-grow line-clamp-3">
          {project.description}
        </p>

        {/* Tech Stack */}
        <div className="mb-3">
          <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase mb-1.5">
            {t("projects.techStack")}
          </h4>
          <div className="flex flex-wrap gap-1.5">
            {project.techStack.slice(0, 4).map((tech) => (
              <Tag key={tech} color="gray" size="sm">
                {tech}
              </Tag>
            ))}
            {project.techStack.length > 4 && (
              <Tag color="gray" size="sm">
                +{project.techStack.length - 4}
              </Tag>
            )}
          </div>
        </div>

        {/* Stats */}
        <div className="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400 border-t border-border pt-2 mt-auto">
          <div className="flex space-x-3">
            {project.stats?.stars !== undefined && (
              <span>
                <Icon icon={faStar} className="mr-1" /> {project.stats.stars}
              </span>
            )}
            {project.stats?.forks !== undefined && (
              <span>
                <Icon icon={faCodeBranch} className="mr-1" />{" "}
                {project.stats.forks}
              </span>
            )}
            {project.stats?.views !== undefined && (
              <span>
                <Icon icon={faEye} className="mr-1" /> {project.stats.views}
              </span>
            )}
          </div>
          <span className="font-medium">{project.category}</span>
        </div>
      </div>
    </motion.div>
  );
};

// --- Projects Section ---
interface ProjectsSectionProps {
  projects: Project[];
  onProjectClick: (project: Project) => void;
}
/**
 * Renders the Projects tab content with filtering, sorting, view toggles, and pagination.
 */
const ProjectsSection: React.FC<ProjectsSectionProps> = ({
  projects,
  onProjectClick,
}) => {
  const { t } = useTranslation("common");
  const { resolvedTheme } = useTheme();
  const [searchQuery, setSearchQuery] = useState("");
  const [filterOptions, setFilterOptions] = useState<FilterOption[]>([]);
  const [sortOption, setSortOption] = useState<SortOption>({
    field: "stars",
    order: "desc",
  }); // Default sort
  const [currentView, setCurrentView] = useState<"grid" | "list">("grid");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(6); // Adjust as needed
  const [isLoading, setIsLoading] = useState(true); // Simulate loading

  // Simulate loading delay
  useEffect(() => {
    const timer = setTimeout(() => setIsLoading(false), 800); // Shorter delay for section content
    return () => clearTimeout(timer);
  }, []);

  // --- Filtering and Sorting Logic ---
  const uniqueCategories = useMemo(
    () => [...new Set(projects.map((p) => p.category))],
    [projects]
  );
  const uniqueTech = useMemo(
    () => [...new Set(projects.flatMap((p) => p.techStack))].sort(),
    [projects]
  );
  const uniqueStatuses: Project["status"][] = [
    "completed",
    "in-progress",
    "planned",
  ];

  const filteredProjects = useMemo(() => {
    return projects.filter((project) => {
      // Filter by search query (title, description, tech stack)
      const searchLower = searchQuery.toLowerCase();
      const matchesSearch =
        !searchQuery ||
        project.title.toLowerCase().includes(searchLower) ||
        project.description.toLowerCase().includes(searchLower) ||
        project.techStack.some((tech) =>
          tech.toLowerCase().includes(searchLower)
        );

      // Filter by selected options
      const matchesFilters =
        filterOptions.length === 0 ||
        filterOptions.every((filter) => {
          if (filter.category === "status")
            return project.status === filter.value;
          if (filter.category === "tech")
            return project.techStack.includes(filter.value);
          if (filter.category === "category")
            return project.category === filter.value;
          return true;
        });

      return matchesSearch && matchesFilters;
    });
  }, [projects, searchQuery, filterOptions]);

  const sortedProjects = useMemo(() => {
    return [...filteredProjects].sort((a, b) => {
      let compareResult = 0;
      switch (sortOption.field) {
        case "title":
          compareResult = a.title.localeCompare(b.title);
          break;
        case "stars":
          compareResult = (b.stats?.stars ?? 0) - (a.stats?.stars ?? 0); // Higher stars first
          break;
        case "date":
          // Assuming startDate is YYYY-MM
          const dateA = new Date(a.startDate + "-01").getTime();
          const dateB = new Date(b.startDate + "-01").getTime();
          compareResult = dateB - dateA; // Newer first
          break;
        default:
          compareResult = (b.stats?.stars ?? 0) - (a.stats?.stars ?? 0); // Default to stars desc
      }
      return sortOption.order === "asc" ? compareResult : -compareResult;
    });
  }, [filteredProjects, sortOption]);

  // --- Pagination Logic ---
  const totalPages = useMemo(
    () => Math.ceil(sortedProjects.length / itemsPerPage),
    [sortedProjects.length, itemsPerPage]
  );
  const paginatedProjects = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return sortedProjects.slice(startIndex, startIndex + itemsPerPage);
  }, [sortedProjects, currentPage, itemsPerPage]);

  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
      // Optional: Scroll to top of projects list
      document
        .getElementById("projects-list")
        ?.scrollIntoView({ behavior: "smooth" });
    }
  };

  // --- Event Handlers ---
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1); // Reset pagination
  };

  const handleFilterToggle = (category: string, value: string) => {
    setFilterOptions((prev) => {
      const exists = prev.some(
        (f) => f.category === category && f.value === value
      );
      if (exists) {
        return prev.filter(
          (f) => !(f.category === category && f.value === value)
        );
      } else {
        // Optional: Allow only one filter per category (e.g., only one status)
        // const filteredPrev = prev.filter(f => f.category !== category);
        // return [...filteredPrev, { category, value }];
        return [...prev, { category, value }]; // Allow multiple filters per category
      }
    });
    setCurrentPage(1); // Reset pagination
  };

  const handleSortChange = (field: string) => {
    setSortOption((prev) => ({
      field,
      // Toggle order if clicking the same field, otherwise default to desc
      order:
        prev.field === field ? (prev.order === "asc" ? "desc" : "asc") : "desc",
    }));
  };

  const isFilterActive = (category: string, value: string) => {
    return filterOptions.some(
      (f) => f.category === category && f.value === value
    );
  };

  return (
    <div>
      {/* Toolbar: Search, Filters, Sort, View Toggle */}
      <div className="mb-6 p-4 bg-card rounded-lg shadow flex flex-col md:flex-row md:items-center gap-4">
        {/* Search Input */}
        <div className="flex-grow md:max-w-xs">
          <Input
            id="project-search"
            placeholder={t("projects.searchPlaceholder")}
            value={searchQuery}
            onChange={handleSearchChange}
            leftIcon={faSearch}
            wrapperClassName="!mb-0" // Remove default margin
            aria-label={t("projects.searchPlaceholder")}
          />
        </div>

        {/* Filters (Dropdowns or Buttons) - Example with Buttons */}
        <div className="flex flex-wrap gap-2">
          {/* Status Filter */}
          <div className="relative group">
            <Button variant="outline" size="sm" rightIcon={faAngleDown}>
              {t("common.status")}
              {filterOptions.filter((f) => f.category === "status").length >
                0 && (
                <span className="ml-1.5 bg-primary text-white rounded-full px-1.5 py-0.5 text-xs">
                  {filterOptions.filter((f) => f.category === "status").length}
                </span>
              )}
            </Button>
            <div className="absolute z-10 top-full left-0 mt-1 w-48 bg-card rounded-md shadow-lg ring-1 ring-black ring-opacity-5 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-150 invisible group-hover:visible focus-within:visible p-2 space-y-1">
              {uniqueStatuses.map((status) => (
                <Button
                  key={status}
                  variant={
                    isFilterActive("status", status) ? "primary" : "ghost"
                  }
                  size="sm"
                  onClick={() => handleFilterToggle("status", status)}
                  className="w-full justify-start"
                  leftIcon={
                    isFilterActive("status", status) ? faCheck : undefined
                  }
                >
                  {t(`projects.statusLabel.${status}`)}
                </Button>
              ))}
            </div>
          </div>

          {/* Category Filter */}
          <div className="relative group">
            <Button variant="outline" size="sm" rightIcon={faAngleDown}>
              {t("common.category")}
              {filterOptions.filter((f) => f.category === "category").length >
                0 && (
                <span className="ml-1.5 bg-primary text-white rounded-full px-1.5 py-0.5 text-xs">
                  {
                    filterOptions.filter((f) => f.category === "category")
                      .length
                  }
                </span>
              )}
            </Button>
            <div className="absolute z-10 top-full left-0 mt-1 w-48 bg-card rounded-md shadow-lg ring-1 ring-black ring-opacity-5 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-150 invisible group-hover:visible focus-within:visible p-2 space-y-1 max-h-60 overflow-y-auto">
              {uniqueCategories.map((category) => (
                <Button
                  key={category}
                  variant={
                    isFilterActive("category", category) ? "primary" : "ghost"
                  }
                  size="sm"
                  onClick={() => handleFilterToggle("category", category)}
                  className="w-full justify-start"
                  leftIcon={
                    isFilterActive("category", category) ? faCheck : undefined
                  }
                >
                  {category}
                </Button>
              ))}
            </div>
          </div>

          {/* Technology Filter */}
          <div className="relative group">
            <Button variant="outline" size="sm" rightIcon={faAngleDown}>
              {t("common.technology")}
              {filterOptions.filter((f) => f.category === "tech").length >
                0 && (
                <span className="ml-1.5 bg-primary text-white rounded-full px-1.5 py-0.5 text-xs">
                  {filterOptions.filter((f) => f.category === "tech").length}
                </span>
              )}
            </Button>
            <div className="absolute z-10 top-full right-0 md:left-0 mt-1 w-56 bg-card rounded-md shadow-lg ring-1 ring-black ring-opacity-5 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-150 invisible group-hover:visible focus-within:visible p-2 space-y-1 max-h-60 overflow-y-auto">
              {uniqueTech.map((tech) => (
                <Button
                  key={tech}
                  variant={isFilterActive("tech", tech) ? "primary" : "ghost"}
                  size="sm"
                  onClick={() => handleFilterToggle("tech", tech)}
                  className="w-full justify-start"
                  leftIcon={isFilterActive("tech", tech) ? faCheck : undefined}
                >
                  {tech}
                </Button>
              ))}
            </div>
          </div>
        </div>

        {/* Sort Controls */}
        <div className="relative group ml-auto mr-2 hidden md:block">
          <Button variant="outline" size="sm" rightIcon={faAngleDown}>
            <Icon icon={faSort} className="mr-1.5" /> Sort:{" "}
            {t(`projects.sort.${sortOption.field}`)} (
            {t(`projects.sort.${sortOption.order}`)})
          </Button>
          <div className="absolute z-10 top-full right-0 mt-1 w-48 bg-card rounded-md shadow-lg ring-1 ring-black ring-opacity-5 opacity-0 group-hover:opacity-100 focus-within:opacity-100 transition-opacity duration-150 invisible group-hover:visible focus-within:visible p-2 space-y-1">
            {(["title", "stars", "date"] as const).map((field) => (
              <Button
                key={field}
                variant={sortOption.field === field ? "primary" : "ghost"}
                size="sm"
                onClick={() => handleSortChange(field)}
                className="w-full justify-start"
                rightIcon={
                  sortOption.field === field
                    ? sortOption.order === "asc"
                      ? faArrowUp
                      : faArrowDown
                    : undefined
                }
              >
                {t(`projects.sort.${field}`)}
              </Button>
            ))}
          </div>
        </div>

        {/* View Toggle */}
        <div className="flex border border-border rounded-lg overflow-hidden">
          <Tooltip content={t("projects.viewAsGrid")} position="bottom">
            <Button
              variant={currentView === "grid" ? "secondary" : "ghost"}
              size="sm"
              onClick={() => setCurrentView("grid")}
              className={`!rounded-none !p-2 border-r border-border ${
                currentView !== "grid" ? "text-gray-500" : ""
              }`}
              aria-pressed={currentView === "grid"}
            >
              <Icon icon={faTable} size="md" />
            </Button>
          </Tooltip>
          <Tooltip content={t("projects.viewAsList")} position="bottom">
            <Button
              variant={currentView === "list" ? "secondary" : "ghost"}
              size="sm"
              onClick={() => setCurrentView("list")}
              className={`!rounded-none !p-2 ${
                currentView !== "list" ? "text-gray-500" : ""
              }`}
              aria-pressed={currentView === "list"}
            >
              <Icon icon={faListUl} size="md" />
            </Button>
          </Tooltip>
        </div>
      </div>

      {/* Projects Grid/List */}
      <div id="projects-list">
        {isLoading && (
          // Skeleton Loading state
          <div
            className={`grid gap-6 ${
              currentView === "grid"
                ? "grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
                : "grid-cols-1"
            }`}
          >
            {Array.from({ length: itemsPerPage }).map((_, index) =>
              currentView === "grid" ? (
                <Card key={index} padding="none">
                  <Skeleton
                    height="h-48"
                    width="w-full"
                    shape="rect"
                    className="!rounded-b-none"
                  />
                  <div className="p-4">
                    <Skeleton height="h-5" width="w-3/4" className="mb-2" />
                    <Skeleton height="h-4" width="w-full" className="mb-1" />
                    <Skeleton height="h-4" width="w-5/6" className="mb-3" />
                    <Skeleton height="h-3" width="w-1/3" className="mb-2" />
                    <div className="flex gap-1.5 mb-3">
                      <Skeleton height="h-5" width="w-10" shape="rect" />
                      <Skeleton height="h-5" width="w-12" shape="rect" />
                      <Skeleton height="h-5" width="w-8" shape="rect" />
                    </div>
                    <Skeleton height="h-4" width="w-full" className="mt-auto" />
                  </div>
                </Card>
              ) : (
                <Card key={index} padding="none" className="flex mb-4">
                  <Skeleton
                    height="h-32"
                    width="w-48"
                    shape="rect"
                    className="!rounded-r-none flex-shrink-0"
                  />
                  <div className="p-4 flex-grow">
                    <Skeleton height="h-5" width="w-3/4" className="mb-2" />
                    <Skeleton height="h-4" width="w-full" className="mb-1" />
                    <Skeleton height="h-4" width="w-5/6" className="mb-3" />
                    <div className="flex gap-1.5 mb-3">
                      <Skeleton height="h-5" width="w-10" shape="rect" />
                      <Skeleton height="h-5" width="w-12" shape="rect" />
                    </div>
                    <Skeleton height="h-4" width="w-1/2" className="mt-auto" />
                  </div>
                </Card>
              )
            )}
          </div>
        )}
        {!isLoading && paginatedProjects.length > 0 && (
          <div
            className={`grid gap-6 ${
              currentView === "grid"
                ? "grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
                : "grid-cols-1"
            }`}
          >
            <AnimatePresence>
              {paginatedProjects.map((project, index) => (
                <motion.div
                  key={project.id}
                  layout // Enable layout animation
                  initial={{ opacity: 0, y: 20 }}
                  animate={{
                    opacity: 1,
                    y: 0,
                    transition: { delay: index * 0.05 },
                  }}
                  exit={{ opacity: 0, y: -10 }}
                >
                  <ProjectCard
                    project={project}
                    onProjectClick={onProjectClick}
                    viewMode={currentView}
                  />
                </motion.div>
              ))}
            </AnimatePresence>
          </div>
        )}
        {!isLoading && paginatedProjects.length === 0 && (
          <div className="text-center py-16 text-gray-500 dark:text-gray-400">
            <Icon icon={faSearch} size="3x" className="mb-4 opacity-50" />
            <p>{t("projects.noProjectsFound")}</p>
          </div>
        )}
      </div>

      {/* Pagination */}
      {!isLoading && totalPages > 1 && (
        <div className="mt-8 flex justify-center items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
            leftIcon={faChevronLeft}
            aria-label="Previous page"
          />
          {/* Generate page numbers (optional: add ellipsis for many pages) */}
          {[...Array(totalPages)].map((_, i) => {
            const pageNum = i + 1;
            // Logic to show only a range of pages around current page
            const showPage =
              Math.abs(pageNum - currentPage) < 3 ||
              pageNum === 1 ||
              pageNum === totalPages;
            const showEllipsisBefore =
              pageNum === totalPages && currentPage < totalPages - 2;
            const showEllipsisAfter = pageNum === 1 && currentPage > 3;

            if (!showPage && pageNum !== 1 && pageNum !== totalPages)
              return null; // Hide pages far from current

            return (
              <React.Fragment key={pageNum}>
                {showEllipsisBefore && (
                  <span className="text-gray-500 px-2">...</span>
                )}
                <Button
                  variant={currentPage === pageNum ? "primary" : "ghost"}
                  size="sm"
                  onClick={() => handlePageChange(pageNum)}
                  className="!px-3 !py-1 min-w-[32px]" // Fixed width for page numbers
                  aria-label={`Go to page ${pageNum}`}
                  aria-current={currentPage === pageNum ? "page" : undefined}
                >
                  {pageNum}
                </Button>
                {showEllipsisAfter && (
                  <span className="text-gray-500 px-2">...</span>
                )}
              </React.Fragment>
            );
          })}

          <Button
            variant="outline"
            size="sm"
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
            rightIcon={faChevronRight}
            aria-label="Next page"
          />
        </div>
      )}
    </div>
  );
};

// --- Skills Section ---
interface SkillsSectionProps {
  skills: Skill[];
  techStack: TechStackItem[]; // Add full tech stack for potential detailed view
}
/**
 * Renders the Skills tab content, showcasing skills with progress bars and potentially a radar chart.
 */
const SkillsSection: React.FC<SkillsSectionProps> = ({ skills, techStack }) => {
  const { t } = useTranslation("common");
  const { resolvedTheme } = useTheme();
  const [activeCategory, setActiveCategory] = useState<
    Skill["category"] | "all"
  >("all");
  const skillRadarChartRef = useRef<HTMLCanvasElement>(null); // Ref for chart canvas

  const categories = useMemo(
    () =>
      ["all", ...[...new Set(skills.map((s) => s.category))].sort()] as (
        | Skill["category"]
        | "all"
      )[],
    [skills]
  );

  const filteredSkills = useMemo(
    () =>
      activeCategory === "all"
        ? skills.sort((a, b) => b.percentage - a.percentage) // Sort all skills by percentage desc
        : skills
            .filter((skill) => skill.category === activeCategory)
            .sort((a, b) => b.percentage - a.percentage),
    [skills, activeCategory]
  );

  // Radar Chart Data Preparation
  const radarChartData = useMemo(() => {
    const radarCategories: Skill["category"][] = [
      "frontend",
      "backend",
      "devops",
      "database",
      "tools",
      "language",
    ];
    const categoryAverages = radarCategories.map((category) => {
      const categorySkills = skills.filter(
        (skill) => skill.category === category
      );
      const average = categorySkills.length
        ? categorySkills.reduce((sum, skill) => sum + skill.percentage, 0) /
          categorySkills.length
        : 0;
      return Math.round(average); // Round to nearest whole number
    });
    return {
      labels: radarCategories.map((cat) =>
        t(`skills.filter${cat.charAt(0).toUpperCase() + cat.slice(1)}` as any)
      ), // Use translation keys
      datasets: [
        {
          label: t("skills.proficiency"),
          data: categoryAverages,
          backgroundColor:
            resolvedTheme === "dark"
              ? "rgba(59, 130, 246, 0.3)"
              : "rgba(59, 130, 246, 0.2)",
          borderColor: "#3b82f6", // blue-500
          pointBackgroundColor: "#3b82f6",
          pointBorderColor: resolvedTheme === "dark" ? "#1f2937" : "#fff", // Match bg
          pointHoverBackgroundColor:
            resolvedTheme === "dark" ? "#1f2937" : "#fff",
          pointHoverBorderColor: "#3b82f6",
          borderWidth: 2,
          pointRadius: 4,
          pointHoverRadius: 6,
        },
      ],
    };
  }, [skills, resolvedTheme, t]); // Include t in dependencies

  const radarChartOptions: ChartOptions<"radar"> = useMemo(
    () => ({
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        r: {
          min: 0,
          max: 100,
          angleLines: {
            color:
              resolvedTheme === "dark"
                ? "rgba(255, 255, 255, 0.1)"
                : "rgba(0, 0, 0, 0.1)",
          },
          grid: {
            color:
              resolvedTheme === "dark"
                ? "rgba(255, 255, 255, 0.1)"
                : "rgba(0, 0, 0, 0.1)",
          },
          pointLabels: {
            color: resolvedTheme === "dark" ? "#e5e7eb" : "#374151", // gray-200 dark, gray-700 light
            font: { size: 12 },
          },
          ticks: {
            display: false, // Hide numerical ticks
            stepSize: 20,
            backdropColor: "transparent", // Make ticks background transparent
          },
        },
      },
      plugins: {
        legend: { display: false },
        tooltip: {
          backgroundColor: resolvedTheme === "dark" ? "#1f2937" : "#ffffff", // gray-800 dark, white light
          titleColor: resolvedTheme === "dark" ? "#e5e7eb" : "#1f2937",
          bodyColor: resolvedTheme === "dark" ? "#d1d5db" : "#374151",
          borderColor: resolvedTheme === "dark" ? "#374151" : "#e5e7eb",
          borderWidth: 1,
          padding: 10,
          callbacks: {
            label: (context: TooltipItem<"radar">) => {
              return `${context.dataset.label}: ${context.formattedValue}%`;
            },
          },
        },
      },
    }),
    [resolvedTheme]
  ); // Update options when theme changes

  return (
    <div>
      <p className="text-lg text-gray-600 dark:text-gray-400 mb-8 text-center max-w-2xl mx-auto">
        {t("skills.description")}
      </p>

      {/* Filter Buttons */}
      <div className="flex flex-wrap justify-center gap-2 mb-8">
        {categories.map((category) => (
          <Button
            key={category}
            variant={activeCategory === category ? "primary" : "outline"}
            size="sm"
            onClick={() => setActiveCategory(category)}
            className="capitalize"
          >
            {t(
              `skills.filter${
                category.charAt(0).toUpperCase() + category.slice(1)
              }` as any
            )}
          </Button>
        ))}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Skill List */}
        <div className="space-y-5">
          {filteredSkills.map((skill) => (
            <motion.div
              key={skill.name}
              className="group"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3 }}
            >
              <div className="flex justify-between items-center mb-1.5">
                <div className="flex items-center">
                  {skill.icon && (
                    <Icon
                      icon={skill.icon}
                      className={`mr-2 ${
                        skill.color.replace("from-", "text-").split(" ")[0]
                      }`}
                    />
                  )}{" "}
                  {/* Extract color class */}
                  <span className="font-medium text-text">{skill.name}</span>
                  {skill.yearsOfExperience && (
                    <span className="ml-2 text-xs text-gray-500 dark:text-gray-400">
                      ({skill.yearsOfExperience} {t("overview.years")})
                    </span>
                  )}
                </div>
                <span className="text-sm font-semibold text-text">
                  {skill.percentage}%
                </span>
              </div>
              <div className="h-2.5 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden relative">
                <Tooltip content={skill.description} position="top">
                  <motion.div
                    className={`h-full rounded-full bg-gradient-to-r ${skill.color}`}
                    initial={{ width: 0 }}
                    animate={{ width: `${skill.percentage}%` }}
                    transition={{ duration: 0.8, ease: "easeOut" }}
                  />
                </Tooltip>
              </div>
            </motion.div>
          ))}
          {filteredSkills.length === 0 && (
            <p className="text-gray-500 dark:text-gray-400 text-center py-8">
              {t("common.noItemsFound")}
            </p> // Add translation
          )}
        </div>

        {/* Radar Chart */}
        <div className="relative h-64 md:h-96">
          <Radar
            ref={skillRadarChartRef}
            data={radarChartData}
            options={radarChartOptions}
          />
        </div>
      </div>

      {/* Optional: Detailed Tech Stack Table (Example) */}
      {/* <div className="mt-12">
              <h3 className="text-xl font-semibold text-text mb-4">{t('overview.coreTech')} (Detailed)</h3>
               <div className="overflow-x-auto">
                    // Add a table here listing techStack items with proficiency, years, category etc.
                    // This can significantly increase line count if needed.
               </div>
         </div> */}
    </div>
  );
};

// --- Experience Section ---
interface ExperienceSectionProps {
  experience: WorkExperience[];
}
/**
 * Renders the Work Experience tab content as a timeline.
 */
const ExperienceSection: React.FC<ExperienceSectionProps> = ({
  experience,
}) => {
  const { t } = useTranslation("common");
  const [expandedId, setExpandedId] = useState<string | null>(null); // Track expanded item

  const toggleExpand = (id: string) => {
    setExpandedId((prevId) => (prevId === id ? null : id));
  };

  return (
    <div className="relative border-l-2 border-border pl-6 md:pl-10">
      {/* Timeline Line */}
      <div className="absolute left-0 top-0 bottom-0 w-0.5 bg-border -translate-x-1/2"></div>

      {experience.map((exp, index) => {
        const isExpanded = expandedId === exp.company + exp.position; // Unique ID for expansion state

        return (
          <motion.div
            key={index}
            className="mb-10 relative"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1, duration: 0.4 }}
          >
            {/* Timeline Dot */}
            <div
              className={`absolute -left-[25px] md:-left-[41px] top-1 w-4 h-4 rounded-full ring-4 ring-background dark:ring-background-dark ${
                index === 0 ? "bg-primary" : "bg-gray-400 dark:bg-gray-600"
              }`}
            ></div>

            <Card
              shadow="md"
              className="border border-border relative overflow-visible"
            >
              {/* Header */}
              <div className="flex flex-col sm:flex-row justify-between items-start mb-3">
                <div>
                  <h3 className="text-lg md:text-xl font-semibold text-text">
                    {exp.position}
                  </h3>
                  <div className="flex items-center text-sm text-primary dark:text-blue-400 mb-1">
                    <Icon icon={faBuilding} className="mr-1.5" />
                    <span className="font-medium">{exp.company}</span>
                    {exp.location && (
                      <span className="mx-2 text-gray-400 dark:text-gray-600">
                        •
                      </span>
                    )}
                    {exp.location && (
                      <span>
                        <Icon icon={faMapPin} className="mr-1" />
                        {exp.location}
                      </span>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400 uppercase">
                    {exp.period} • {exp.type}
                  </p>
                </div>
                {exp.logo && (
                  <img
                    src={exp.logo}
                    alt={`${exp.company} logo`}
                    className="w-12 h-12 object-contain rounded-md mt-2 sm:mt-0 ml-auto flex-shrink-0"
                  />
                )}
              </div>

              {/* Initial Description */}
              <p className="text-gray-600 dark:text-gray-300 mb-4 text-base leading-relaxed">
                {exp.description}
              </p>

              {/* Expandable Content */}
              <AnimatePresence initial={false}>
                {isExpanded && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: "auto", opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    transition={{ duration: 0.3, ease: "easeInOut" }}
                    className="overflow-hidden"
                  >
                    {/* Responsibilities */}
                    <div className="mt-4 pt-4 border-t border-border">
                      <h4 className="text-sm font-semibold uppercase text-gray-500 dark:text-gray-400 mb-2">
                        {t("experience.responsibilities")}
                      </h4>
                      <ul className="list-disc list-outside pl-5 space-y-1 text-gray-600 dark:text-gray-300 text-sm">
                        {exp.responsibilities.map((resp, i) => (
                          <li key={i}>{resp}</li>
                        ))}
                      </ul>
                    </div>

                    {/* Key Achievements */}
                    {exp.achievements && exp.achievements.length > 0 && (
                      <div className="mt-4 pt-4 border-t border-border">
                        <h4 className="text-sm font-semibold uppercase text-gray-500 dark:text-gray-400 mb-2">
                          {t("experience.achievements")}
                        </h4>
                        <ul className="list-disc list-outside pl-5 space-y-1 text-gray-600 dark:text-gray-300 text-sm">
                          {exp.achievements.map((ach, i) => (
                            <li key={i}>{ach}</li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Technologies Used */}
                    {exp.technologies && exp.technologies.length > 0 && (
                      <div className="mt-4 pt-4 border-t border-border">
                        <h4 className="text-sm font-semibold uppercase text-gray-500 dark:text-gray-400 mb-2">
                          {t("experience.technologies")}
                        </h4>
                        <div className="flex flex-wrap gap-2">
                          {exp.technologies.map((tech) => (
                            <Tag key={tech} color="gray" size="sm">
                              {tech}
                            </Tag>
                          ))}
                        </div>
                      </div>
                    )}
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Toggle Button */}
              {(exp.responsibilities?.length > 0 ||
                exp.achievements?.length > 0 ||
                exp.technologies?.length > 0) && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => toggleExpand(exp.company + exp.position)}
                  className="mt-4 text-primary dark:text-blue-400"
                  rightIcon={isExpanded ? faAngleUp : faAngleDown}
                >
                  {isExpanded ? t("common.showLess") : t("common.showMore")}
                </Button>
              )}
            </Card>
          </motion.div>
        );
      })}
    </div>
  );
};

// --- Education Section ---
interface EducationSectionProps {
  education: Education[];
}
/**
 * Renders the Education tab content.
 */
const EducationSection: React.FC<EducationSectionProps> = ({ education }) => {
  const { t } = useTranslation("common");

  return (
    <div className="space-y-8">
      {education.map((edu, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1, duration: 0.4 }}
        >
          <Card shadow="md" className="border border-border">
            <div className="flex flex-col sm:flex-row justify-between items-start">
              {/* Details */}
              <div className="flex-grow mb-4 sm:mb-0 sm:mr-6">
                <h3 className="text-lg md:text-xl font-semibold text-text">
                  {edu.institution}
                </h3>
                <p className="text-base text-primary dark:text-blue-400 font-medium">
                  {edu.degree} {t("common.in")} {edu.field}{" "}
                  {/* Add 'in' or similar translation */}
                </p>
                <p className="text-sm text-gray-500 dark:text-gray-400 mb-2">
                  <Icon icon={faCalendarAlt} className="mr-1.5" />
                  {edu.period}
                  {edu.gpa && (
                    <span className="ml-3">
                      <Icon icon={faGraduationCap} className="mr-1.5" />
                      GPA: {edu.gpa}
                    </span>
                  )}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-300 leading-relaxed mb-4">
                  {edu.description}
                </p>

                {/* Achievements */}
                {edu.achievements && edu.achievements.length > 0 && (
                  <div>
                    <h4 className="text-sm font-semibold uppercase text-gray-500 dark:text-gray-400 mb-2">
                      {t("education.achievements")}
                    </h4>
                    <ul className="list-disc list-outside pl-5 space-y-1 text-gray-600 dark:text-gray-300 text-sm">
                      {edu.achievements.map((ach, i) => (
                        <li key={i}>{ach}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>

              {/* Logo (Optional) */}
              {edu.logo && (
                <div className="flex-shrink-0 w-20 h-20 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center overflow-hidden p-1 self-center sm:self-start">
                  <img
                    src={edu.logo}
                    alt={`${edu.institution} logo`}
                    className="max-w-full max-h-full object-contain"
                  />
                </div>
              )}
            </div>
          </Card>
        </motion.div>
      ))}
    </div>
  );
};

// --- Achievements Section ---
interface AchievementsSectionProps {
  achievements: Achievement[];
  certifications: Certification[]; // Include certifications here
}
/**
 * Renders the Achievements & Certifications tab content.
 */
const AchievementsSection: React.FC<AchievementsSectionProps> = ({
  achievements,
  certifications,
}) => {
  const { t } = useTranslation("common");
  const { resolvedTheme } = useTheme();

  // Combine and sort achievements & certifications by date (most recent first)
  const combinedItems = useMemo(() => {
    const allItems = [
      ...achievements.map((a) => ({
        ...a,
        type: "achievement" as const,
        dateObj: new Date(a.date),
      })),
      ...certifications.map((c) => ({
        ...c,
        type: "certification" as const,
        dateObj: new Date(c.date),
      })),
    ];
    return allItems.sort((a, b) => b.dateObj.getTime() - a.dateObj.getTime());
  }, [achievements, certifications]);

  return (
    <div className="space-y-8">
      {/* Certifications Sub-section */}
      <div>
        <h3 className="text-xl font-semibold text-text mb-4 flex items-center">
          <Icon icon={faCertificate} className="mr-2 text-yellow-500" />{" "}
          {t("certifications.title")}
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {certifications
            .sort(
              (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
            )
            .map((cert) => (
              <motion.div
                key={cert.credentialId}
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.3 }}
              >
                <Card
                  shadow="md"
                  className="h-full flex flex-col border border-border hover:border-primary/50 transition-colors"
                >
                  <div className="flex items-start space-x-4 mb-3">
                    <div className="flex-shrink-0 w-10 h-10 flex items-center justify-center rounded-lg bg-yellow-100 dark:bg-yellow-900">
                      <Icon
                        icon={
                          typeof cert.icon === "string"
                            ? faCertificate
                            : cert.icon!
                        }
                        className="text-yellow-600 dark:text-yellow-400"
                        size="lg"
                      />
                    </div>
                    <div className="flex-grow">
                      <h4 className="font-semibold text-text">{cert.name}</h4>
                      <p className="text-sm text-gray-500 dark:text-gray-400">
                        {t("common.issuer")}: {cert.issuer}
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        {t("common.date")}: {cert.date}{" "}
                        {cert.expiry
                          ? `(${t("certifications.expiry")}: ${cert.expiry})`
                          : ""}
                      </p>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mb-3 flex-grow">
                    {cert.description}
                  </p>

                  {cert.skills && cert.skills.length > 0 && (
                    <div className="mb-3">
                      <h5 className="text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 mb-1.5">
                        {t("certifications.skillsCovered")}
                      </h5>
                      <div className="flex flex-wrap gap-1">
                        {cert.skills.slice(0, 5).map((skill) => (
                          <Tag key={skill} color="yellow" size="sm">
                            {skill}
                          </Tag>
                        ))}
                        {cert.skills.length > 5 && (
                          <Tag color="yellow" size="sm">
                            +{cert.skills.length - 5}
                          </Tag>
                        )}
                      </div>
                    </div>
                  )}

                  <div className="mt-auto pt-3 border-t border-border flex justify-between items-center">
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      ID: {cert.credentialId}
                    </p>
                    {cert.verificationUrl && cert.verificationUrl !== "#" && (
                      <Button
                        variant="ghost"
                        size="sm"
                        href={cert.verificationUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-primary dark:text-blue-400 !p-0" // Render as link
                        rightIcon={faExternalLinkAlt}
                      >
                        {t("certifications.verify")}
                      </Button>
                    )}
                    {(!cert.verificationUrl ||
                      cert.verificationUrl === "#") && (
                      <Tag color="gray" size="sm">
                        {t("common.notVerified")}
                      </Tag>
                    )}
                  </div>
                </Card>
              </motion.div>
            ))}
        </div>
      </div>

      {/* Achievements Sub-section */}
      <div className="mt-12">
        <h3 className="text-xl font-semibold text-text mb-4 flex items-center">
          <Icon icon={faTrophy} className="mr-2 text-green-500" />{" "}
          {t("achievements.title")}
        </h3>
        <div className="space-y-6">
          {achievements.map((ach) => (
            <motion.div
              key={ach.id}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3 }}
            >
              <Card
                shadow="sm"
                className="flex items-start space-x-4 border border-border p-4 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors"
              >
                <div className="flex-shrink-0 w-12 h-12 flex items-center justify-center rounded-full bg-green-100 dark:bg-green-900">
                  <Icon
                    icon={ach.icon}
                    className="text-green-600 dark:text-green-400"
                    size="lg"
                  />
                </div>
                <div className="flex-grow">
                  <div className="flex justify-between items-center mb-1">
                    <h4 className="font-semibold text-text">{ach.title}</h4>
                    <span className="text-xs text-gray-500 dark:text-gray-400">
                      {ach.date}
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mb-1">
                    {ach.description}
                  </p>
                  {ach.issuer && (
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {t("achievements.issuedBy")}:{" "}
                      <span className="font-medium">{ach.issuer}</span>
                    </p>
                  )}
                  <Tag color="green" size="sm" className="mt-2">
                    {ach.category}
                  </Tag>
                </div>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
};

// --- Activity Section ---
interface ActivitySectionProps {
  contributions: Contribution[];
  devStats: DevStats;
}
/**
 * Renders the Activity tab, showing contribution chart and developer stats.
 */
const ActivitySection: React.FC<ActivitySectionProps> = ({
  contributions,
  devStats,
}) => {
  const { t } = useTranslation("common");
  const { resolvedTheme } = useTheme();
  const activityChartRef = useRef<HTMLCanvasElement>(null); // Ref for chart canvas

  // Contribution Line Chart Data & Options
  const lineChartData = useMemo(
    () => ({
      labels: contributions.map((c) => c.month),
      datasets: [
        {
          label: t("activity.contributions"),
          data: contributions.map((c) => c.count),
          borderColor: "#3b82f6", // blue-500
          backgroundColor:
            resolvedTheme === "dark"
              ? "rgba(59, 130, 246, 0.2)"
              : "rgba(59, 130, 246, 0.1)",
          tension: 0.4,
          fill: true,
          pointRadius: 3,
          pointBackgroundColor: "#3b82f6",
          pointBorderColor: resolvedTheme === "dark" ? "#111827" : "#f9fafb", // Match background
          pointHoverRadius: 5,
          pointHoverBackgroundColor: "#3b82f6",
          pointHoverBorderColor:
            resolvedTheme === "dark" ? "#111827" : "#f9fafb",
        },
      ],
    }),
    [contributions, resolvedTheme, t]
  );

  const lineChartOptions: ChartOptions<"line"> = useMemo(
    () => ({
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: { display: false },
        tooltip: {
          backgroundColor: resolvedTheme === "dark" ? "#1f2937" : "#ffffff",
          titleColor: resolvedTheme === "dark" ? "#e5e7eb" : "#1f2937",
          bodyColor: resolvedTheme === "dark" ? "#d1d5db" : "#374151",
          borderColor: resolvedTheme === "dark" ? "#374151" : "#e5e7eb",
          borderWidth: 1,
          padding: 10,
          displayColors: false,
          callbacks: {
            title: (items) => `${items[0].label} 2024`, // Assuming data is for 2024, make dynamic if needed
            label: (item) =>
              `${item.formattedValue} ${t("activity.contributions")}`,
          },
        },
      },
      scales: {
        x: {
          grid: { display: false },
          ticks: { color: resolvedTheme === "dark" ? "#9ca3af" : "#6b7280" }, // gray-400 dark, gray-500 light
        },
        y: {
          beginAtZero: true,
          grid: {
            color:
              resolvedTheme === "dark"
                ? "rgba(255, 255, 255, 0.1)"
                : "rgba(0, 0, 0, 0.05)",
          },
          ticks: {
            color: resolvedTheme === "dark" ? "#9ca3af" : "#6b7280",
            padding: 10,
          },
        },
      },
    }),
    [resolvedTheme, t]
  );

  // Stats Grid Data
  const statsGrid = useMemo(
    () => [
      {
        value: devStats.repos ?? "N/A",
        labelKey: "activity.repos",
        icon: faCodeBranch,
      },
      {
        value: devStats.stars ?? "N/A",
        labelKey: "activity.stars",
        icon: faStar,
      },
      {
        value: devStats.contributions ?? "N/A",
        labelKey: "activity.contributions",
        icon: faCode,
      },
      {
        value: devStats.commits ?? "N/A",
        labelKey: "activity.commits",
        icon: faHistory,
      }, // Use history icon for commits
      {
        value: devStats.followers ?? "N/A",
        labelKey: "activity.followers",
        icon: faUsers,
      },
      {
        value: devStats.following ?? "N/A",
        labelKey: "activity.following",
        icon: faUserPlus,
      }, // Use user-plus
      {
        value: devStats.streak ? `${devStats.streak} days` : "N/A",
        labelKey: "activity.streak",
        icon: faFire,
      }, // Use fire icon for streak
      {
        value: devStats.rating ?? "N/A",
        labelKey: "activity.rating",
        icon: faCheckCircle,
      },
    ],
    [devStats, t]
  );

  return (
    <div className="space-y-10">
      {/* Contribution Chart */}
      <Card>
        <h3 className="text-xl font-semibold text-text mb-4">
          {t("activity.title")} ({t("activity.last12Months")})
        </h3>
        <div className="h-72 md:h-96 relative">
          <Line
            ref={activityChartRef}
            data={lineChartData}
            options={lineChartOptions}
          />
        </div>
      </Card>

      {/* Developer Stats Grid */}
      <Card>
        <h3 className="text-xl font-semibold text-text mb-6">
          {t("activity.devStats")}
        </h3>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 md:gap-6">
          {statsGrid.map((stat, i) => (
            <motion.div
              key={i}
              className="bg-gray-100 dark:bg-gray-700 p-4 rounded-lg text-center transition-colors transform hover:scale-105 hover:shadow-md"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: i * 0.05, duration: 0.3 }}
            >
              <Icon
                icon={stat.icon}
                className="text-blue-500 dark:text-blue-400 text-2xl mb-2 mx-auto"
              />
              <div className="text-2xl font-bold text-text">{stat.value}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">
                {t(stat.labelKey)}
              </div>
            </motion.div>
          ))}
        </div>
      </Card>
    </div>
  );
};

// --- Blog Section ---
interface BlogSectionProps {
  posts: BlogPost[];
}
/**
 * Renders the Blog tab content, showing latest posts.
 */
const BlogSection: React.FC<BlogSectionProps> = ({ posts }) => {
  const { t } = useTranslation("common");
  const [isLoading, setIsLoading] = useState(true); // Simulate loading

  // Simulate loading delay
  useEffect(() => {
    const timer = setTimeout(() => setIsLoading(false), 600); // Shorter delay
    return () => clearTimeout(timer);
  }, []);

  return (
    <div>
      {isLoading && (
        // Blog Skeleton Loading
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: 3 }).map((_, index) => (
            <Card key={index} padding="none" className="overflow-hidden">
              <Skeleton
                height="h-48"
                width="w-full"
                shape="rect"
                className="!rounded-b-none"
              />
              <div className="p-4">
                <Skeleton height="h-5" width="w-5/6" className="mb-2" />
                <Skeleton height="h-4" width="w-full" className="mb-1" />
                <Skeleton height="h-4" width="w-full" className="mb-3" />
                <div className="flex gap-1.5 mb-3">
                  <Skeleton height="h-5" width="w-10" shape="rect" />
                  <Skeleton height="h-5" width="w-12" shape="rect" />
                </div>
                <div className="flex justify-between mt-4">
                  <Skeleton height="h-4" width="w-1/4" />
                  <Skeleton height="h-4" width="w-1/4" />
                </div>
              </div>
            </Card>
          ))}
        </div>
      )}
      {!isLoading && posts.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
          {posts.map((post, index) => (
            <motion.div
              key={post.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1, duration: 0.4 }}
            >
              <Card
                shadow="md"
                padding="none"
                className="h-full flex flex-col overflow-hidden border border-border hover:shadow-lg transition-shadow"
              >
                {post.image && (
                  <div className="h-48 overflow-hidden">
                    <img
                      src={post.image}
                      alt={post.title}
                      className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                )}
                <div className="p-4 flex flex-col flex-grow">
                  <div className="mb-2">
                    <span className="text-xs text-gray-500 dark:text-gray-400 mr-2">
                      {post.date}
                    </span>
                    <Tag color="indigo" size="sm">
                      {post.category}
                    </Tag>
                  </div>
                  <h3 className="text-lg font-semibold text-text mb-2 hover:text-primary transition-colors">
                    <a
                      href={`/blog/${post.slug}`}
                      className="focus:outline-none focus:ring-2 focus:ring-primary rounded"
                    >
                      {" "}
                      {/* Update link structure */}
                      {post.title}
                    </a>
                  </h3>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mb-3 flex-grow line-clamp-3">
                    {post.excerpt}
                  </p>
                  <div className="flex flex-wrap gap-1.5 mb-4">
                    {post.tags.slice(0, 3).map((tag) => (
                      <Tag key={tag} color="gray" size="sm">
                        {tag}
                      </Tag>
                    ))}
                    {post.tags.length > 3 && (
                      <Tag color="gray" size="sm">
                        ...
                      </Tag>
                    )}
                  </div>
                  <div className="mt-auto pt-3 border-t border-border flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                    <span>
                      {post.readTime} {t("blog.readTimeSuffix")}
                    </span>
                    <div className="flex space-x-3">
                      {post.likes !== undefined && (
                        <span>
                          <Icon icon={faThumbsUp} className="mr-1" />{" "}
                          {post.likes}
                        </span>
                      )}
                      {post.comments !== undefined && (
                        <span>
                          <Icon icon={faCommentDots} className="mr-1" />{" "}
                          {post.comments}
                        </span>
                      )}
                      {/* {post.shares !== undefined && <span><Icon icon={faShareAlt} className="mr-1"/> {post.shares}</span>} */}
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    href={`/blog/${post.slug}`} // Update link structure
                    className="mt-4 text-primary dark:text-blue-400 self-start !p-0" // Render as link
                    rightIcon={faArrowRight}
                  >
                    {t("blog.readMore")}
                  </Button>
                </div>
              </Card>
            </motion.div>
          ))}
        </div>
      )}
      {!isLoading && posts.length === 0 && (
        <div className="text-center py-16 text-gray-500 dark:text-gray-400">
          <Icon icon={faRss} size="3x" className="mb-4 opacity-50" />
          <p>No blog posts available yet.</p> {/* Add translation */}
        </div>
      )}
    </div>
  );
};

// --- Testimonials Section ---
interface TestimonialsSectionProps {
  testimonials: Testimonial[];
}
/**
 * Renders the Testimonials tab content using a slider or grid.
 */
const TestimonialsSection: React.FC<TestimonialsSectionProps> = ({
  testimonials,
}) => {
  const { t } = useTranslation("common");
  const [currentIndex, setCurrentIndex] = useState(0);
  const { reduceMotion } = useAccessibility();

  const nextTestimonial = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % testimonials.length);
  };

  const prevTestimonial = () => {
    setCurrentIndex(
      (prevIndex) => (prevIndex - 1 + testimonials.length) % testimonials.length
    );
  };

  // Auto-play functionality (optional)
  useEffect(() => {
    if (reduceMotion) return; // Don't auto-play if reduce motion is enabled

    const timer = setInterval(() => {
      nextTestimonial();
    }, 7000); // Change every 7 seconds

    return () => clearInterval(timer);
  }, [testimonials.length, reduceMotion]);

  return (
    <div className="relative overflow-hidden">
      <h3 className="text-center text-xl font-semibold text-text mb-2">
        {t("testimonials.whatPeopleSay")}
      </h3>
      <div className="w-20 h-1 bg-primary mx-auto mb-8 rounded-full"></div>

      <div className="relative h-80 md:h-72 flex items-center justify-center">
        {" "}
        {/* Adjust height as needed */}
        <AnimatePresence initial={false} custom={currentIndex}>
          <motion.div
            key={currentIndex}
            className="absolute w-full max-w-2xl px-4"
            custom={currentIndex}
            initial={{ opacity: 0, x: 300 }} // Enter from right
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -300 }} // Exit to left
            transition={
              reduceMotion
                ? { duration: 0 }
                : {
                    x: { type: "spring", stiffness: 300, damping: 30 },
                    opacity: { duration: 0.2 },
                  }
            }
          >
            <Card
              shadow="lg"
              className="text-center border border-border p-6 md:p-8"
            >
              {testimonials[currentIndex].avatar && (
                <img
                  src={testimonials[currentIndex].avatar}
                  alt={testimonials[currentIndex].name}
                  className="w-16 h-16 rounded-full mx-auto mb-4 shadow-md border-2 border-white dark:border-gray-700"
                />
              )}
              <blockquote className="text-base md:text-lg italic text-gray-700 dark:text-gray-300 mb-4 leading-relaxed">
                "{testimonials[currentIndex].text}"
              </blockquote>
              <div className="font-semibold text-text">
                {testimonials[currentIndex].name}
              </div>
              <div className="text-sm text-gray-500 dark:text-gray-400">
                {testimonials[currentIndex].position},{" "}
                {testimonials[currentIndex].company}
              </div>
              {/* Star Rating */}
              <div className="flex justify-center mt-3">
                {Array.from({ length: 5 }).map((_, i) => (
                  <Icon
                    key={i}
                    icon={faStar}
                    className={`w-4 h-4 ${
                      i < testimonials[currentIndex].rating
                        ? "text-yellow-400"
                        : "text-gray-300 dark:text-gray-600"
                    }`}
                  />
                ))}
              </div>
            </Card>
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Navigation Buttons */}
      {testimonials.length > 1 && (
        <>
          <Button
            variant="secondary"
            size="sm"
            onClick={prevTestimonial}
            className="!absolute top-1/2 left-0 sm:left-4 transform -translate-y-1/2 !rounded-full !p-2 z-10 bg-card/70 backdrop-blur-sm"
            aria-label="Previous testimonial"
          >
            <Icon icon={faChevronLeft} />
          </Button>
          <Button
            variant="secondary"
            size="sm"
            onClick={nextTestimonial}
            className="!absolute top-1/2 right-0 sm:right-4 transform -translate-y-1/2 !rounded-full !p-2 z-10 bg-card/70 backdrop-blur-sm"
            aria-label="Next testimonial"
          >
            <Icon icon={faChevronRight} />
          </Button>
        </>
      )}

      {/* Dots Indicator */}
      {testimonials.length > 1 && (
        <div className="flex justify-center space-x-2 mt-6">
          {testimonials.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentIndex(index)}
              className={`w-2 h-2 rounded-full transition-colors duration-300 ${
                currentIndex === index
                  ? "bg-primary"
                  : "bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500"
              }`}
              aria-label={`Go to testimonial ${index + 1}`}
              aria-current={currentIndex === index}
            />
          ))}
        </div>
      )}
    </div>
  );
};

// --- Contact Section ---
interface ContactSectionProps {
  contacts: Contact[];
  socialMedia: SocialMedia[];
  onSubmitForm: (data: ContactFormData) => Promise<boolean>; // Returns true on success
}
interface ContactFormData {
  name: string;
  email: string;
  subject: string;
  message: string;
}
/**
 * Renders the Contact tab content with contact info and a form.
 */
const ContactSection: React.FC<ContactSectionProps> = ({
  contacts,
  socialMedia,
  onSubmitForm,
}) => {
  const { t } = useTranslation("common");
  const [formData, setFormData] = useState<ContactFormData>({
    name: "",
    email: "",
    subject: "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<
    "idle" | "success" | "error"
  >("idle");

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    if (submitStatus !== "idle") setSubmitStatus("idle"); // Reset status on input change
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return;

    setIsSubmitting(true);
    setSubmitStatus("idle");

    try {
      const success = await onSubmitForm(formData);
      if (success) {
        setSubmitStatus("success");
        setFormData({ name: "", email: "", subject: "", message: "" }); // Clear form
      } else {
        setSubmitStatus("error");
      }
    } catch (error) {
      console.error("Contact form submission error:", error);
      setSubmitStatus("error");
    } finally {
      setIsSubmitting(false);
    }
  };

  const publicContacts = contacts.filter((c) => c.isPublic);

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-8 md:gap-12">
      {/* Left Column: Contact Info & Social */}
      <div className="md:col-span-1 space-y-8">
        {/* Contact Info */}
        <Card>
          <h3 className="text-lg font-semibold text-text mb-4">
            {t("contact.info")}
          </h3>
          <ul className="space-y-3">
            {publicContacts.map((contact, idx) => (
              <li key={idx} className="flex items-start">
                <div className="w-8 h-8 mt-0.5 flex-shrink-0 flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-lg mr-3">
                  <Icon
                    icon={contact.icon}
                    className="text-primary dark:text-blue-400"
                  />
                </div>
                <div>
                  <span className="block text-sm font-medium text-text">
                    {contact.type}
                  </span>
                  {contact.href ? (
                    <a
                      href={contact.href}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-sm text-gray-600 dark:text-gray-300 hover:underline hover:text-primary dark:hover:text-blue-400 transition-colors break-words"
                    >
                      {contact.value}
                    </a>
                  ) : (
                    <span className="text-sm text-gray-600 dark:text-gray-300 break-words">
                      {contact.value}
                    </span>
                  )}
                </div>
              </li>
            ))}
          </ul>
        </Card>

        {/* Social Media */}
        <Card>
          <h3 className="text-lg font-semibold text-text mb-4">
            {t("contact.social")}
          </h3>
          <div className="flex flex-wrap gap-4">
            {socialMedia.map((social) => (
              <Tooltip
                key={social.platform}
                content={social.platform}
                position="bottom"
              >
                <a
                  href={social.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-gray-500 dark:text-gray-400 hover:text-primary dark:hover:text-blue-400 transition-colors p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"
                  aria-label={`Visit ${social.platform} profile`}
                >
                  <Icon icon={social.icon} size="xl" />
                </a>
              </Tooltip>
            ))}
          </div>
        </Card>
      </div>

      {/* Right Column: Contact Form */}
      <div className="md:col-span-2">
        <Card>
          <h3 className="text-xl font-semibold text-text mb-5">
            {t("contact.form.title")}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <Input
              label={t("contact.form.name")}
              id="contact-name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              required
              autoComplete="name"
            />
            <Input
              label={t("contact.form.email")}
              id="contact-email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleInputChange}
              required
              autoComplete="email"
            />
            <Input
              label={t("contact.form.subject")}
              id="contact-subject"
              name="subject"
              value={formData.subject}
              onChange={handleInputChange}
              required
            />
            <Textarea
              label={t("contact.form.message")}
              id="contact-message"
              name="message"
              rows={5}
              value={formData.message}
              onChange={handleInputChange}
              required
            />
            <div className="flex items-center justify-between pt-2">
              <Button
                type="submit"
                variant="primary"
                size="lg"
                isLoading={isSubmitting}
                disabled={isSubmitting}
                rightIcon={faPaperPlane}
              >
                {isSubmitting ? t("common.sending") : t("contact.form.send")}{" "}
                {/* Add sending translation */}
              </Button>
              {submitStatus === "success" && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-sm text-green-600 dark:text-green-400 flex items-center"
                >
                  <Icon icon={faCheckCircle} className="mr-1.5" /> Message sent
                  successfully!
                </motion.div>
              )}
              {submitStatus === "error" && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-sm text-red-600 dark:text-red-400 flex items-center"
                >
                  <Icon icon={faExclamationCircle} className="mr-1.5" /> Failed
                  to send message. Please try again.
                </motion.div>
              )}
            </div>
          </form>
        </Card>
      </div>
    </div>
  );
};

// --- Settings Modal Component ---
interface SettingsModalProps {
  isOpen: boolean;
  onClose: () => void;
  // Pass current settings and setters
  currentTheme: Theme;
  onThemeChange: (theme: Theme) => void;
  currentLanguage: string;
  onLanguageChange: (lang: string) => void;
  currentFontSize: FontSize;
  onFontSizeChange: (size: FontSize) => void;
  currentReduceMotion: boolean;
  onReduceMotionChange: (enabled: boolean) => void;
  onExport: (format: ExportFormat) => void;
  isExporting: boolean;
}

const SettingsModal: React.FC<SettingsModalProps> = ({
  isOpen,
  onClose,
  currentTheme,
  onThemeChange,
  currentLanguage,
  onLanguageChange,
  currentFontSize,
  onFontSizeChange,
  currentReduceMotion,
  onReduceMotionChange,
  onExport,
  isExporting,
}) => {
  const { t } = useTranslation("common");

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={t("settings.title")}
      size="md"
    >
      <div className="space-y-6">
        {/* Theme Settings */}
        <fieldset>
          <legend className="text-base font-medium text-text mb-2">
            {t("settings.theme")}
          </legend>
          <div className="flex items-center space-x-4">
            {(["light", "dark", "system"] as Theme[]).map((themeOption) => (
              <label
                key={themeOption}
                className="flex items-center space-x-2 cursor-pointer"
              >
                <input
                  type="radio"
                  name="theme"
                  value={themeOption}
                  checked={currentTheme === themeOption}
                  onChange={() => onThemeChange(themeOption)}
                  className="form-radio h-4 w-4 text-primary focus:ring-primary border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700"
                />
                <span className="text-sm text-text capitalize">
                  {t(`settings.theme.${themeOption}`)}
                </span>
                {themeOption === "light" && (
                  <Icon icon={faSun} className="text-yellow-500" />
                )}
                {themeOption === "dark" && (
                  <Icon icon={faMoon} className="text-indigo-400" />
                )}
                {themeOption === "system" && (
                  <Icon icon={faDesktop} className="text-gray-500" />
                )}
              </label>
            ))}
          </div>
        </fieldset>

        {/* Language Settings */}
        <fieldset>
          <label
            htmlFor="language-setting"
            className="block text-base font-medium text-text mb-2"
          >
            {t("settings.language")}
          </label>
          <Select
            id="language-setting"
            value={currentLanguage}
            onChange={(e) => onLanguageChange(e.target.value)}
            options={[
              { value: "en", label: "English" },
              { value: "id", label: "Bahasa Indonesia" },
            ]}
            wrapperClassName="!mb-0"
          />
        </fieldset>

        {/* Accessibility Settings */}
        <fieldset>
          <legend className="text-base font-medium text-text mb-3">
            {t("settings.accessibility")}
          </legend>
          <div className="space-y-3">
            {/* Font Size */}
            <div>
              <label className="block text-sm font-medium text-text mb-1.5">
                {t("settings.fontSize")}
              </label>
              <div className="flex items-center space-x-3">
                {(["default", "large", "xlarge"] as FontSize[]).map((size) => (
                  <Button
                    key={size}
                    variant={currentFontSize === size ? "primary" : "outline"}
                    size="sm"
                    onClick={() => onFontSizeChange(size)}
                  >
                    {t(`settings.fontSize.${size}`)}
                  </Button>
                ))}
              </div>
            </div>
            {/* Reduce Motion */}
            <div className="flex items-center justify-between">
              <label
                htmlFor="reduce-motion-toggle"
                className="text-sm font-medium text-text"
              >
                {t("settings.reduceMotion")}
              </label>
              <button
                id="reduce-motion-toggle"
                type="button"
                className={`${
                  currentReduceMotion
                    ? "bg-primary"
                    : "bg-gray-200 dark:bg-gray-600"
                } relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary`}
                role="switch"
                aria-checked={currentReduceMotion}
                onClick={() => onReduceMotionChange(!currentReduceMotion)}
              >
                <span
                  className={`${
                    currentReduceMotion ? "translate-x-6" : "translate-x-1"
                  } inline-block w-4 h-4 transform bg-white rounded-full transition-transform`}
                />
              </button>
            </div>
          </div>
        </fieldset>

        {/* Export Settings */}
        <fieldset>
          <legend className="text-base font-medium text-text mb-2">
            {t("settings.export")}
          </legend>
          <div className="flex items-center space-x-3">
            <Button
              variant="secondary"
              size="sm"
              onClick={() => onExport("pdf")}
              leftIcon={faFilePdf}
              isLoading={isExporting}
              disabled={isExporting}
            >
              {isExporting
                ? t("settings.export.loading")
                : t("settings.export.pdf")}
            </Button>
            <Button
              variant="secondary"
              size="sm"
              onClick={() => onExport("json")}
              leftIcon={faFileCode} // Use faFileCode for JSON
              isLoading={isExporting}
              disabled={isExporting}
            >
              {isExporting
                ? t("settings.export.loading")
                : t("settings.export.json")}
            </Button>
          </div>
        </fieldset>
      </div>
    </Modal>
  );
};

// --- Project Detail Modal Component ---
interface ProjectDetailModalProps {
  project: Project | null;
  isOpen: boolean;
  onClose: () => void;
}

const ProjectDetailModal: React.FC<ProjectDetailModalProps> = ({
  project,
  isOpen,
  onClose,
}) => {
  const { t } = useTranslation("common");
  if (!project) return null;

  const statusColors = {
    completed: "green",
    "in-progress": "blue",
    planned: "yellow",
  } as const;

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={project.title} size="xl">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Left Column: Image & Links */}
        <div className="md:col-span-1 space-y-4">
          {project.image && (
            <img
              src={project.image}
              alt={project.title}
              className="w-full h-auto rounded-lg shadow-md border border-border object-cover"
            />
          )}
          {!project.image && (
            <div className="w-full h-48 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center">
              <Icon
                icon={faLaptopCode}
                size="3x"
                className="text-gray-400 dark:text-gray-500"
              />
            </div>
          )}
          <div className="space-y-2">
            {project.demoUrl && project.demoUrl !== "#" && (
              <Button
                href={project.demoUrl}
                target="_blank"
                rel="noopener noreferrer"
                variant="primary"
                size="sm"
                leftIcon={faEye}
                className="w-full"
              >
                {t("projects.viewDemo")}
              </Button>
            )}
            {project.githubUrl && project.githubUrl !== "#" && (
              <Button
                href={project.githubUrl}
                target="_blank"
                rel="noopener noreferrer"
                variant="secondary"
                size="sm"
                leftIcon={faGithub}
                className="w-full"
              >
                {t("projects.viewCode")}
              </Button>
            )}
          </div>
          {/* Stats */}
          <Card
            padding="sm"
            shadow="sm"
            className="bg-gray-50 dark:bg-gray-700/50"
          >
            <h4 className="text-sm font-semibold text-text mb-2">
              {t("activity.devStats")}
            </h4>
            <div className="grid grid-cols-2 gap-2 text-xs text-gray-600 dark:text-gray-300">
              {project.stats?.stars !== undefined && (
                <div className="flex items-center">
                  <Icon
                    icon={faStar}
                    className="mr-1.5 text-yellow-500"
                    size="sm"
                  />{" "}
                  {t("projects.stars")}: {project.stats.stars}
                </div>
              )}
              {project.stats?.forks !== undefined && (
                <div className="flex items-center">
                  <Icon
                    icon={faCodeBranch}
                    className="mr-1.5 text-blue-500"
                    size="sm"
                  />{" "}
                  {t("projects.forks")}: {project.stats.forks}
                </div>
              )}
              {project.stats?.branches !== undefined && (
                <div className="flex items-center">
                  <Icon
                    icon={faCodeBranch}
                    className="mr-1.5 text-green-500"
                    size="sm"
                  />{" "}
                  {t("projects.branches")}: {project.stats.branches}
                </div>
              )}
              {project.stats?.views !== undefined && (
                <div className="flex items-center">
                  <Icon
                    icon={faEye}
                    className="mr-1.5 text-indigo-500"
                    size="sm"
                  />{" "}
                  {t("projects.views")}: {project.stats.views}
                </div>
              )}
              {project.stats?.issues !== undefined && (
                <div className="flex items-center">
                  <Icon
                    icon={faExclamationCircle}
                    className="mr-1.5 text-red-500"
                    size="sm"
                  />{" "}
                  {t("projects.issues")}: {project.stats.issues}
                </div>
              )}
            </div>
          </Card>
        </div>

        {/* Right Column: Details */}
        <div className="md:col-span-2 space-y-5">
          <div className="flex justify-between items-center">
            <h3 className="text-xl font-bold text-text">{project.title}</h3>
            <Tag color={statusColors[project.status]} size="md">
              {t(`projects.statusLabel.${project.status}`)}
            </Tag>
          </div>
          <p className="text-base text-gray-600 dark:text-gray-300 leading-relaxed">
            {project.description}
          </p>

          {/* Tech Stack */}
          <div>
            <h4 className="text-base font-semibold text-text mb-2">
              {t("projects.techStack")}
            </h4>
            <div className="flex flex-wrap gap-2">
              {project.techStack.map((tech) => (
                <Tag key={tech} color="gray" size="md">
                  {tech}
                </Tag>
              ))}
            </div>
          </div>

          {/* Features */}
          <div>
            <h4 className="text-base font-semibold text-text mb-2">
              {t("projects.features")}
            </h4>
            <ul className="list-disc list-outside pl-5 space-y-1 text-gray-600 dark:text-gray-300 text-sm">
              {project.features.map((feature, i) => (
                <li key={i}>{feature}</li>
              ))}
            </ul>
          </div>

          {/* Dates */}
          <div className="text-sm text-gray-500 dark:text-gray-400">
            <span>
              {t("common.startDate")}: {project.startDate}
            </span>
            {project.endDate && (
              <span className="ml-4">
                {t("common.endDate")}: {project.endDate}
              </span>
            )}
          </div>

          {/* Collaborators */}
          {project.collaborators && project.collaborators.length > 0 && (
            <div>
              <h4 className="text-base font-semibold text-text mb-2">
                {t("common.collaborators")}
              </h4>
              <div className="flex flex-wrap gap-2">
                {project.collaborators.map((collab) => (
                  <Tag key={collab} color="blue" size="md" icon={faUser}>
                    {collab}
                  </Tag>
                ))}
              </div>
            </div>
          )}
          {/* Optional: Add Project Specific Testimonials Here */}
        </div>
      </div>
    </Modal>
  );
};

//=============================================================================
// 10. MAIN PAGE COMPONENT (`HomePage`)
//=============================================================================

/**
 * The main component for the Professional Profile Page.
 * Orchestrates all sections, state management, and interactions.
 */
const HomePage = () => {
  // --- State Management ---
  const [activeTab, setActiveTab] = useLocalStorage<TabId>(
    "activeProfileTab",
    "overview"
  ); // Persist active tab
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [projectDialogOpen, setProjectDialogOpen] = useState(false);
  const [isInitialLoading, setIsInitialLoading] = useState(true); // For initial page shimmer
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [showNotifications, setShowNotifications] = useState(false); // Maybe manage via modal/dropdown instead?
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [showContactForm, setShowContactForm] = useState(false); // Maybe integrate into Contact tab directly?
  const [isExporting, setIsExporting] = useState(false);

  // Hooks for context data
  const { theme, setTheme, resolvedTheme } = useTheme();
  const { t, i18n } = useTranslation("common");
  const { fontSize, setFontSize, reduceMotion, setReduceMotion } =
    useAccessibility();

  // --- Refs ---
  // Refs are generally okay here, but chart instances are managed by react-chartjs-2 now
  // const navbarRef = useRef<HTMLDivElement>(null); // Potentially needed if Navbar wasn't a separate component

  // --- Data Fetching/Initialization ---
  // Using the static profileData object defined earlier
  const data = profileData; // In real app, fetch this data

  // --- Effects ---

  // Initial Loading Simulation
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsInitialLoading(false);
    }, 1500); // Adjust initial load time
    return () => clearTimeout(timer);
  }, []);

  // Mock Notifications (Consider fetching real notifications)
  useEffect(() => {
    const mockNotifications: Notification[] = [
      {
        id: "1",
        title: "Project Invite",
        message: "Sarah Johnson invited you to collaborate on DevTracker.",
        type: "info",
        date: new Date(2024, 3, 20, 10, 30),
        read: false,
      },
      {
        id: "2",
        title: "Milestone Achieved",
        message: "Your Tokoeno E-Commerce repository reached 200 stars!",
        type: "success",
        date: new Date(2024, 3, 18, 15, 0),
        read: true,
      },
      {
        id: "3",
        title: "Certification Expiring Soon",
        message:
          "Your AWS Developer Associate certification expires in 30 days.",
        type: "warning",
        date: new Date(2024, 3, 15, 8, 0),
        read: false,
      },
      {
        id: "4",
        title: "Deployment Failed",
        message: "Deployment of SecureAuth v1.2 failed. Check logs.",
        type: "error",
        date: new Date(2024, 3, 21, 9, 15),
        read: false,
      },
    ];
    setNotifications(
      mockNotifications.sort((a, b) => b.date.getTime() - a.date.getTime())
    ); // Sort newest first
  }, []);

  // --- Event Handlers ---

  const handleProjectClick = useCallback((project: Project) => {
    setSelectedProject(project);
    setProjectDialogOpen(true);
  }, []);

  const handleCloseProjectDialog = useCallback(() => {
    setProjectDialogOpen(false);
    // Delay clearing selected project for smoother exit animation
    setTimeout(() => setSelectedProject(null), 300);
  }, []);

  const handleTabChange = useCallback(
    (tabId: TabId) => {
      setActiveTab(tabId);
      // Optional: Scroll to top of content area when tab changes
      window.scrollTo({
        top: document.getElementById("main-content")?.offsetTop ?? 0 - 80,
        behavior: "smooth",
      });
    },
    [setActiveTab]
  );

  const handleContactFormSubmit = useCallback(
    async (formData: ContactFormData): Promise<boolean> => {
      console.log("Submitting contact form:", formData);
      // --- MOCK SUBMISSION ---
      await new Promise((resolve) => setTimeout(resolve, 1500)); // Simulate network delay
      const success = Math.random() > 0.2; // Simulate success/failure

      if (success) {
        // Show success notification
        const newNotification: Notification = {
          id: `notif-${Date.now()}`,
          title: t("contact.form.submitSuccessTitle") || "Message Sent!",
          message:
            t("contact.form.submitSuccessMsg") ||
            "Your message has been sent successfully.",
          type: "success",
          date: new Date(),
          read: false,
        }; // Add translations
        setNotifications((prev) =>
          [newNotification, ...prev].sort(
            (a, b) => b.date.getTime() - a.date.getTime()
          )
        );
        console.log("Mock form submission SUCCESS");
        return true;
      } else {
        // Error state is handled within the ContactSection component based on return value
        console.log("Mock form submission FAILED");
        const newNotification: Notification = {
          id: `notif-${Date.now()}`,
          title: t("contact.form.submitErrorTitle") || "Submission Failed",
          message:
            t("contact.form.submitErrorMsg") ||
            "Could not send message. Please try again later.",
          type: "error",
          date: new Date(),
          read: false,
        }; // Add translations
        setNotifications((prev) =>
          [newNotification, ...prev].sort(
            (a, b) => b.date.getTime() - a.date.getTime()
          )
        );
        return false;
      }
      // --- END MOCK SUBMISSION ---

      // --- REAL IMPLEMENTATION EXAMPLE (replace mock) ---
      /*
     try {
        const response = await fetch('/api/contact', { // Your API endpoint
           method: 'POST',
           headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify(formData),
        });
        if (response.ok) {
             // Show success notification (as above)
             return true;
        } else {
            // Show error notification (as above)
            return false;
        }
     } catch (error) {
        console.error("API contact submission error:", error);
         // Show error notification (as above)
        return false;
     }
     */
      // --- END REAL IMPLEMENTATION EXAMPLE ---
    },
    [t]
  ); // Add t to dependencies

  const handleExport = useCallback(
    (format: ExportFormat) => {
      setIsExporting(true);
      console.log(`Initiating export as ${format}...`);
      // Mock export process
      setTimeout(() => {
        setIsExporting(false);
        const success = Math.random() > 0.1; // Simulate success
        const newNotification: Notification = {
          id: `notif-${Date.now()}`,
          title: success
            ? t("settings.export.successTitle") || "Export Successful"
            : t("settings.export.errorTitle") || "Export Failed",
          message: success
            ? t("settings.export.successMsg", {
                format: format.toUpperCase(),
              }) || `Portfolio exported as ${format.toUpperCase()}.`
            : t("settings.export.errorMsg") || "Could not export portfolio.",
          type: success ? "success" : "error",
          date: new Date(),
          read: false,
        };
        setNotifications((prev) =>
          [newNotification, ...prev].sort(
            (a, b) => b.date.getTime() - a.date.getTime()
          )
        );
        if (success) {
          // Trigger actual download or file generation here
          console.log(`Mock export ${format} completed.`);
        } else {
          console.log(`Mock export ${format} failed.`);
        }
        setIsSettingsOpen(false); // Close settings modal on export attempt
      }, 2000);
    },
    [t]
  );

  const handleNotificationDismiss = useCallback((id: string) => {
    setNotifications((prev) => prev.filter((n) => n.id !== id));
  }, []);

  // Dummy handler for CV download button
  const handleDownloadCV = useCallback(() => {
    console.log("Download CV clicked");
    // Implement actual CV download logic here (e.g., link to a PDF)
    const cvNotification: Notification = {
      id: `notif-${Date.now()}`,
      title: "CV Download",
      message: "CV download started (placeholder).",
      type: "info",
      date: new Date(),
      read: false,
    };
    setNotifications((prev) =>
      [cvNotification, ...prev].sort(
        (a, b) => b.date.getTime() - a.date.getTime()
      )
    );
    // Example: window.open('/path/to/your_cv.pdf', '_blank');
  }, []);

  // --- Render Logic ---

  // Function to render the currently active tab's content
  const renderActiveSection = () => {
    switch (activeTab) {
      case "overview":
        return (
          <OverviewSection
            data={data}
            onNavigate={handleTabChange}
            onProjectClick={handleProjectClick}
          />
        );
      case "projects":
        return (
          <ProjectsSection
            projects={data.projects}
            onProjectClick={handleProjectClick}
          />
        );
      case "skills":
        return (
          <SkillsSection skills={data.skills} techStack={data.techStack} />
        );
      case "experience":
        return <ExperienceSection experience={data.workExperience} />;
      case "education":
        return <EducationSection education={data.education} />;
      case "achievements":
        return (
          <AchievementsSection
            achievements={data.achievements}
            certifications={data.certifications}
          />
        );
      case "activity":
        return (
          <ActivitySection
            contributions={data.contributions}
            devStats={data.devStats}
          />
        );
      case "blog":
        return <BlogSection posts={data.blogPosts} />;
      case "testimonials":
        return <TestimonialsSection testimonials={data.testimonials} />;
      case "contact":
        return (
          <ContactSection
            contacts={data.contacts}
            socialMedia={data.socialMedia}
            onSubmitForm={handleContactFormSubmit}
          />
        );
      default:
        return (
          <OverviewSection
            data={data}
            onNavigate={handleTabChange}
            onProjectClick={handleProjectClick}
          />
        ); // Fallback to overview
    }
  };

  // Initial Page Loading Shimmer
  if (isInitialLoading) {
    return (
      <div className="min-h-screen bg-background dark:bg-background-dark p-4">
        {/* Shimmer Header */}
        <div className="bg-card rounded-lg shadow-xl overflow-hidden mb-6">
          <Skeleton
            height="h-64 md:h-80"
            shape="rect"
            className="!rounded-b-none"
          />
          <div className="relative px-6 pb-6">
            <div className="absolute -top-16 left-6 md:left-8">
              <Skeleton height="w-32 h-32" shape="circle" />
            </div>
            <div className="pt-20 md:pt-4 flex flex-col md:flex-row justify-between">
              <div>
                <Skeleton height="h-8" width="w-48" className="mb-2" />
                <Skeleton height="h-6" width="w-32" className="mb-3" />
                <div className="flex gap-4">
                  <Skeleton height="h-5" width="w-20" />
                  <Skeleton height="h-5" width="w-24" />
                  <Skeleton height="h-5" width="w-16" />
                </div>
              </div>
              <div className="flex gap-3 mt-4 md:mt-0">
                <Skeleton height="h-10" width="w-32" />
                <Skeleton height="h-10" width="w-32" />
              </div>
            </div>
          </div>
        </div>
        {/* Shimmer Tabs Placeholder */}
        <div className="flex space-x-8 border-b border-border mb-8 px-6">
          <Skeleton height="h-6" width="w-24" className="mb-2" />
          <Skeleton height="h-6" width="w-20" className="mb-2" />
          <Skeleton height="h-6" width="w-16" className="mb-2" />
          <Skeleton height="h-6" width="w-28" className="mb-2" />
        </div>
        {/* Shimmer Content Area */}
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="space-y-6">
            <Skeleton height="h-24" />
            <Skeleton height="h-48" />
            <Skeleton height="h-32" />
          </div>
          <div className="md:col-span-2 space-y-6">
            <Skeleton height="h-64" />
            <Skeleton height="h-80" />
          </div>
        </div>
        <p className="text-center text-gray-500 dark:text-gray-400 mt-8 animate-pulse">
          {t("loading.page")}
        </p>
      </div>
    );
  }

  // Main Page Render
  return (
    // Apply dynamic classes for accessibility settings
    <div
      className={`bg-background dark:bg-background-dark text-text min-h-screen transition-colors duration-300 font-size-${fontSize} ${
        reduceMotion ? "reduce-motion" : ""
      }`}
    >
      <SkipLink mainContentId="main-content" />

      <Navbar
        activeTab={activeTab}
        onTabChange={handleTabChange}
        onToggleNotifications={() => setShowNotifications(!showNotifications)} // Consider using dropdown/modal
        notificationCount={notifications.filter((n) => !n.read).length} // Count only unread
        onOpenSettings={() => setIsSettingsOpen(true)}
      />

      <main
        id="main-content"
        className="container mx-auto px-4 sm:px-6 lg:px-8 py-6 md:py-8"
      >
        {/* Profile Header is now separate */}
        <ProfileHeader
          data={{ ...data.basicInfo, socialMedia: data.socialMedia }}
          onContactClick={() => {
            handleTabChange("contact");
            // Optionally focus the contact form or relevant element
            setTimeout(
              () => document.getElementById("contact-name")?.focus(),
              100
            );
          }}
          onDownloadCVClick={handleDownloadCV}
        />

        {/* Tab Navigation Buttons (Alternative to Navbar tabs if needed, hidden for now) */}
        {/* <div className="border-b border-border mb-8">
             {renderTabs()}
        </div> */}

        {/* Content Area for Active Tab */}
        <AnimatePresence mode="wait">
          {" "}
          {/* wait ensures exit animation completes before enter */}
          <motion.div
            key={activeTab} // Re-render based on activeTab change
            initial={{ opacity: 0, y: 15 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -15 }}
            transition={{ duration: 0.3, ease: "easeInOut" }}
          >
            {renderActiveSection()}
          </motion.div>
        </AnimatePresence>
      </main>

      <Footer />

      {/* Global Modals & Notifications */}
      <ProjectDetailModal
        project={selectedProject}
        isOpen={projectDialogOpen}
        onClose={handleCloseProjectDialog}
      />

      <SettingsModal
        isOpen={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
        currentTheme={theme}
        onThemeChange={setTheme}
        currentLanguage={i18n.language}
        onLanguageChange={(lang) => i18n.changeLanguage(lang)}
        currentFontSize={fontSize}
        onFontSizeChange={setFontSize}
        currentReduceMotion={reduceMotion}
        onReduceMotionChange={setReduceMotion}
        onExport={handleExport}
        isExporting={isExporting}
      />

      {/* Notification Area */}
      <NotificationContainer
        notifications={notifications}
        onDismiss={handleNotificationDismiss}
      />
    </div>
  );
};

//=============================================================================
// 11. DEFAULT EXPORT & PROVIDER WRAPPER
//=============================================================================

/**
 * Wrapper component that includes the necessary global providers.
 */
const HomePageWithProviders = () => (
  <AppProvider>
    <HomePage />
  </AppProvider>
);

export default HomePageWithProviders;
