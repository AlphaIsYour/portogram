// app/page.tsx
"use client";
import { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { Chart, registerables, ChartConfiguration } from "chart.js";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { library } from "@fortawesome/fontawesome-svg-core";
import { fas } from "@fortawesome/free-solid-svg-icons";
import { fab } from "@fortawesome/free-brands-svg-icons";

library.add(fas, fab);
import {
  faShareAlt,
  faBookmark,
  faEllipsisH,
  faCheckCircle,
  faCodeBranch,
  faStar,
  faEye,
  faUserCircle,
  faHome,
  faCode,
  faBriefcase,
  faAward,
  faChartLine,
  faRss,
  faCommentDots,
  faEnvelope,
  faMapMarkerAlt,
  faCalendarAlt,
  faUsers,
  faGlobe,
  faPaperPlane,
  faDownload,
  faPrint,
  faChevronLeft,
  faChevronRight,
  faSearch,
  faFilter,
  faSort,
  faListUl,
  faTable,
  faPlus,
  faMinus,
  faCheck,
  faTimes,
  faInfoCircle,
  faExclamationCircle,
  faQuestionCircle,
  faLayerGroup,
  faServer,
  faDatabase,
  faLock,
  faShieldAlt,
  faChartPie,
  faChartBar,
  faCloudUploadAlt,
  faCloudDownloadAlt,
  faCog,
  faSync,
  faPlay,
  faPause,
  faStop,
  faForward,
  faBackward,
  faBell,
  faExclamationTriangle,
  faLightbulb,
  faBolt,
  faMagic,
  faGraduationCap,
  faToolbox,
  faNetworkWired,
  faTerminal,
  faMicrochip,
  faClock,
  faCalendarCheck,
  faFileCode,
  faFileAlt,
  faFilePdf,
  faFileExcel,
  faLink,
  faRocket,
  faTrophy,
  faMedal,
  faCertificate,
  faHandshake,
  faProjectDiagram,
  faHistory,
  faBookOpen,
  faLaptopCode,
  faWindowMaximize,
  faMobileAlt,
  faTabletAlt,
  faWrench,
  faTools
} from "@fortawesome/free-solid-svg-icons";
import {
  faGithub,
  faTwitter,
  faLinkedin,
  faLaravel,
  faAws,
  faReact,
  faNode,
  faPython,
  faVuejs,
  faAngular,
  faDocker,
  faStripe,
  faJsSquare,
  faCss3,
  faHtml5,
  faBootstrap,
  faFigma,
  faWordpress,
  faNpm,
  faYarn,
  faGitAlt,
  faGithubAlt,
  faApple,
  faAndroid,
  faSlack,
  faDiscord,
  faTelegram,
  faWhatsapp,
  faStackOverflow,
  faMedium,
  faDev,
  faCodepen,
  faDigitalOcean,
  faAmazon,
  faGoogle,
  faMicrosoft,
  faFacebook,
  faInstagram
} from "@fortawesome/free-brands-svg-icons";

Chart.register(...registerables);

// Interfaces
interface Skill {
  name: string;
  percentage: number;
  color: string;
  icon?: any;
  category: string;
  description: string;
}

interface Certification {
  name: string;
  issuer: string;
  date: string;
  icon: string;
  credentialId: string;
  expiry?: string;
  skills: string[];
  description: string;
  verificationUrl?: string;
}

interface Education {
  institution: string;
  degree: string;
  field: string;
  period: string;
  description: string;
  logo?: string;
  achievements?: string[];
  gpa?: string;
}

interface WorkExperience {
  company: string;
  position: string;
  period: string;
  description: string;
  technologies: string[];
  achievements: string[];
  logo?: string;
  location: string;
  type: "full-time" | "part-time" | "freelance" | "contract" | "internship";
  responsibilities: string[];
}

interface Project {
  title: string;
  description: string;
  category: string;
  techStack: string[];
  stats: {
    branches: number;
    stars: number;
    views: number;
    forks?: number;
    issues?: number;
  };
  image?: string;
  demoUrl?: string;
  githubUrl?: string;
  features: string[];
  status: "completed" | "in-progress" | "planned";
  startDate: string;
  endDate?: string;
  collaborators?: string[];
  testimonials?: Testimonial[];
}

interface Achievement {
  title: string;
  date: string;
  description: string;
  icon: any;
  category: string;
  issuer?: string;
}

interface BlogPost {
  title: string;
  excerpt: string;
  date: string;
  tags: string[];
  readTime: string;
  image?: string;
  likes: number;
  comments: number;
  shares: number;
  category: string;
  slug: string;
}

interface Contribution {
  month: string;
  count: number;
}

interface Testimonial {
  name: string;
  position: string;
  company: string;
  text: string;
  avatar?: string;
  rating: number;
  date: string;
  relation: string;
}

interface Contact {
  type: string;
  value: string;
  icon: any;
  isPublic: boolean;
}

interface SocialMedia {
  platform: string;
  url: string;
  icon: any;
  username: string;
}

interface DevStats {
  repos: number;
  stars: number;
  contributions: number;
  rating: string;
  followers: number;
  following: number;
  streak: number;
  commits: number;
}

interface TechStackItem {
  name: string;
  icon: any;
  proficiency: number;
  category: string;
  yearsOfExperience: number;
}

interface Filter {
  category: string;
  value: string;
}

interface SortOption {
  field: string;
  order: 'asc' | 'desc';
}

interface Notification {
  id: string;
  title: string;
  message: string;
  type: 'info' | 'success' | 'warning' | 'error';
  date: Date;
  read: boolean;
}

// Main component
const HomePage = () => {
  // State management
  const [activeTab, setActiveTab] = useState("overview");
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [projectDialogOpen, setProjectDialogOpen] = useState(false);
  const [currentTheme, setCurrentTheme] = useState<'dark' | 'light' | 'system'>('dark');
  const [isNavbarFixed, setIsNavbarFixed] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [filterOptions, setFilterOptions] = useState<Filter[]>([]);
  const [sortOption, setSortOption] = useState<SortOption>({ field: 'title', order: 'asc' });
  const [loading, setLoading] = useState(true);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [showNotifications, setShowNotifications] = useState(false);
  const [activeSkillCategory, setActiveSkillCategory] = useState("all");
  const [chartInstances, setChartInstances] = useState<{[key: string]: Chart}>({});
  const [currentProjectPage, setCurrentProjectPage] = useState(1);
  const [projectsPerPage] = useState(4);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [expandedExperience, setExpandedExperience] = useState<string | null>(null);
  const [showContactForm, setShowContactForm] = useState(false);
  const [contactFormData, setContactFormData] = useState({
    name: "",
    email: "",
    subject: "",
    message: ""
  });
  const [darkModeEnabled, setDarkModeEnabled] = useState(true);
  const [isExporting, setIsExporting] = useState(false);
  const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');
  const [contributions] = useState<Contribution[]>(() =>
    Array.from({ length: 12 }, (_, i) => ({
      month: new Date(2024, i).toLocaleString("default", { month: "short" }),
      count: Math.floor(Math.random() * 100),
    }))
  );

  // Setup refs
  const navbarRef = useRef<HTMLDivElement>(null);
  const activityChartRef = useRef<HTMLCanvasElement>(null);
  const skillRadarChartRef = useRef<HTMLCanvasElement>(null);
  const techDistributionPieRef = useRef<HTMLCanvasElement>(null);
  const projectCategoryDonutRef = useRef<HTMLCanvasElement>(null);

  // Data
  const skillsData: Skill[] = [
    { 
      name: "PHP", 
      percentage: 92, 
      color: "from-blue-600 to-indigo-500", 
      icon: faLaravel,
      category: "backend",
      description: "Expert in building scalable applications with PHP 8, Laravel, and Symfony frameworks."
    },
    {
      name: "JavaScript",
      percentage: 85,
      color: "from-yellow-500 to-amber-500",
      icon: faJsSquare,
      category: "frontend",
      description: "Proficient in modern JavaScript, ES6+, TypeScript, and various JS frameworks."
    },
    {
      name: "React",
      percentage: 88,
      color: "from-blue-400 to-cyan-300",
      icon: faReact,
      category: "frontend",
      description: "Advanced knowledge of React.js, Redux, Context API, and React Hooks."
    },
    {
      name: "Node.js",
      percentage: 82,
      color: "from-green-500 to-emerald-400",
      icon: faNode,
      category: "backend",
      description: "Strong experience with Node.js, Express, and serverless architectures."
    },
    {
      name: "Python",
      percentage: 75,
      color: "from-blue-500 to-purple-500",
      icon: faPython,
      category: "backend",
      description: "Proficient in Python for web development, data analysis, and automation."
    },
    {
      name: "Docker",
      percentage: 79,
      color: "from-blue-500 to-cyan-400",
      icon: faDocker,
      category: "devops",
      description: "Expert in containerization, Docker Compose, and container orchestration."
    },
    {
      name: "AWS",
      percentage: 72,
      color: "from-orange-500 to-amber-400",
      icon: faAws,
      category: "devops",
      description: "Certified AWS Developer with experience in EC2, S3, Lambda, and CloudFormation."
    },
    {
      name: "HTML/CSS",
      percentage: 90,
      color: "from-red-500 to-orange-400",
      icon: faHtml5,
      category: "frontend",
      description: "Expert in semantic HTML5, CSS3, SASS/SCSS, and responsive web design."
    },
    {
      name: "SQL",
      percentage: 83,
      color: "from-blue-600 to-blue-400",
      icon: faDatabase,
      category: "database",
      description: "Proficient in SQL query optimization, database design, and management."
    },
    {
      name: "MongoDB",
      percentage: 77,
      color: "from-green-600 to-green-400",
      icon: faDatabase,
      category: "database",
      description: "Experienced in MongoDB schema design, aggregation, and performance optimization."
    },
    {
      name: "CI/CD",
      percentage: 81,
      color: "from-purple-600 to-indigo-400",
      icon: faCodeBranch,
      category: "devops",
      description: "Expert in setting up CI/CD pipelines with GitHub Actions, Jenkins, and GitLab CI."
    },
    {
      name: "Git",
      percentage: 95,
      color: "from-orange-600 to-red-500",
      icon: faGitAlt,
      category: "tools",
      description: "Advanced Git workflow management, branching strategies, and version control."
    }
  ];

  const certifications: Certification[] = [
    {
      name: "AWS Certified Developer - Associate",
      issuer: "Amazon Web Services",
      date: "2024-01",
      icon: "aws",
      credentialId: "AWS-DEV-12345",
      expiry: "2027-01",
      skills: ["EC2", "S3", "Lambda", "DynamoDB", "CloudFormation"],
      description: "Validates technical expertise in developing and maintaining AWS-based applications."
    },
    {
      name: "Laravel Certified Developer",
      issuer: "Laravel",
      date: "2023-05",
      icon: "laravel",
      credentialId: "LCD-67890",
      skills: ["PHP", "Laravel", "MVC", "Eloquent ORM", "Blade"],
      description: "Certifies proficiency in developing applications using the Laravel framework."
    },
    {
      name: "React Professional Developer",
      issuer: "React Certification Board",
      date: "2023-11",
      icon: "react",
      credentialId: "RPD-24680",
      skills: ["React", "Redux", "React Hooks", "Context API", "NextJS"],
      description: "Demonstrates advanced knowledge of React.js and related technologies."
    },
    {
      name: "Certified Kubernetes Administrator",
      issuer: "Cloud Native Computing Foundation",
      date: "2023-08",
      icon: "aws",  // Placeholder for kubernetes icon
      credentialId: "CKA-13579",
      expiry: "2026-08",
      skills: ["Kubernetes", "Container Orchestration", "Docker", "Microservices"],
      description: "Validates skills, knowledge and competency to perform the responsibilities of a Kubernetes Administrator."
    },
    {
      name: "MongoDB Professional Developer",
      issuer: "MongoDB, Inc.",
      date: "2022-12",
      icon: "aws",  // Placeholder for MongoDB icon
      credentialId: "MDB-97531",
      skills: ["MongoDB", "NoSQL", "Database Design", "Aggregation", "Indexing"],
      description: "Certifies advanced knowledge of MongoDB database development and optimization."
    }
  ];

  const educationData: Education[] = [
    {
      institution: "Stanford University",
      degree: "Master of Science",
      field: "Computer Science",
      period: "2020 - 2022",
      description: "Specialized in Artificial Intelligence and Machine Learning with focus on Natural Language Processing.",
      gpa: "3.92/4.0",
      achievements: [
        "Graduated with Distinction",
        "Published research paper on NLP techniques",
        "Teaching Assistant for Advanced Algorithms course"
      ]
    },
    {
      institution: "University of California, Berkeley",
      degree: "Bachelor of Science",
      field: "Computer Engineering",
      period: "2016 - 2020",
      description: "Focus on software engineering principles and distributed systems.",
      gpa: "3.85/4.0",
      achievements: [
        "Dean's List all semesters",
        "Capstone project: Distributed file system with Byzantine fault tolerance",
        "Member of ACM and IEEE student chapters"
      ]
    }
  ];

  const workExperience: WorkExperience[] = [
    {
      company: "Tech Innovators Inc.",
      position: "Senior Full Stack Developer",
      period: "Jan 2023 - Present",
      description: "Leading development of enterprise applications using modern web technologies.",
      technologies: ["React", "Node.js", "TypeScript", "AWS", "GraphQL"],
      achievements: [
        "Reduced application load time by 60% through code optimization",
        "Implemented CI/CD pipeline that decreased deployment time by 75%",
        "Led migration from monolith to microservices architecture"
      ],
      location: "San Francisco, CA",
      type: "full-time",
      responsibilities: [
        "Architect and develop scalable web applications",
        "Lead a team of 5 developers and mentor junior engineers",
        "Design and implement database schemas and APIs",
        "Collaborate with product managers and UX designers on feature planning",
        "Perform code reviews and ensure code quality standards"
      ]
    },
    {
      company: "GlobalSoft Solutions",
      position: "Full Stack Developer",
      period: "Apr 2021 - Dec 2022",
      description: "Developed and maintained e-commerce applications for enterprise clients.",
      technologies: ["Laravel", "Vue.js", "MySQL", "Docker", "Redis"],
      achievements: [
        "Built a real-time inventory management system that increased efficiency by 40%",
        "Implemented payment gateway integrations for 5 major providers",
        "Optimized database queries resulting in 30% faster checkout process"
      ],
      location: "Boston, MA",
      type: "full-time",
      responsibilities: [
        "Developed custom e-commerce solutions for B2B clients",
        "Created RESTful APIs for mobile applications",
        "Implemented caching strategies to improve application performance",
        "Participated in Agile development cycles and sprint planning",
        "Troubleshooted and resolved production issues"
      ]
    },
    {
      company: "Startech Innovations",
      position: "Backend Developer",
      period: "Jun 2020 - Mar 2021",
      description: "Worked on cloud-based SaaS platform for financial analytics.",
      technologies: ["Python", "Django", "PostgreSQL", "AWS Lambda", "Kubernetes"],
      achievements: [
        "Developed data processing pipeline that handled 1M+ transactions daily",
        "Implemented secure API authentication system using OAuth 2.0",
        "Reduced server costs by 35% through infrastructure optimization"
      ],
      location: "New York, NY",
      type: "full-time",
      responsibilities: [
        "Designed and implemented backend services and APIs",
        "Optimized database performance for large datasets",
        "Integrated with external financial data providers",
        "Developed automated testing frameworks",
        "Created technical documentation for APIs and services"
      ]
    }
  ];

  const projects: Project[] = [
    {
      title: "Tokoeno E-Commerce",
      description: "A comprehensive e-commerce solution with advanced inventory management, payment processing, and customer analytics.",
      category: "Full Stack",
      techStack: ["Next.js", "Prisma", "PostgreSQL", "Stripe", "AWS"],
      stats: { branches: 25, stars: 145, views: 320, forks: 42, issues: 12 },
      features: [
        "Real-time inventory tracking",
        "Multi-payment gateway integration",
        "Advanced analytics dashboard",
        "Responsive mobile-first design",
        "Multi-vendor marketplace support"
      ],
      status: "completed",
      startDate: "2023-02",
      endDate: "2023-11",
      demoUrl: "https://tokoeno-demo.vercel.app",
      githubUrl: "https://github.com/youralpha/tokoeno"
    },
    {
      title: "DevTracker",
      description: "Developer productivity and project management tool with GitHub integration, time tracking, and performance analytics.",
      category: "Web Application",
      techStack: ["React", "Node.js", "MongoDB", "GitHub API", "Docker"],
      stats: { branches: 18, stars: 92, views: 240, forks: 28, issues: 7 },
      features: [
        "GitHub repository integration",
        "Time tracking and productivity metrics",
        "Sprint planning and management",
        "Code quality metrics visualization",
        "Team collaboration tools"
      ],
      status: "in-progress",
      startDate: "2023-06",
      collaborators: ["@techdev", "@codemaster", "@devguru"]
    },
    {
      title: "AIAcademy",
      description: "Interactive platform for learning AI and machine learning concepts with hands-on coding exercises and real-time feedback.",
      category: "Education",
      techStack: ["Vue.js", "Flask", "TensorFlow.js", "Python", "Firebase"],
      stats: { branches: 15, stars: 210, views: 560, forks: 65, issues: 22 },
      features: [
        "Interactive coding challenges",
        "Real-time AI model visualization",
        "Personalized learning paths",
        "Code execution environment",
        "Community forums and discussion"
      ],
      status: "completed",
      startDate: "2022-09",
      endDate: "2023-05",
      demoUrl: "https://aiacademy.dev",
      githubUrl: "https://github.com/youralpha/aiacademy"
    },
    {
      title: "CloudStack",
      description: "Open-source infrastructure management tool for deploying and scaling cloud applications across multiple providers.",
      category: "DevOps",
      techStack: ["Golang", "Kubernetes", "Terraform", "React", "GraphQL"],
      stats: { branches: 32, stars: 178, views: 290, forks: 48, issues: 15 },
      features: [
        "Multi-cloud deployment support",
        "Infrastructure as code templates",
        "Cost optimization recommendations",
        "Real-time monitoring dashboard",
        "Automated scaling policies"
      ],
      status: "completed",
      startDate: "2022-11",
      endDate: "2023-08",
      demoUrl: "https://cloudstack.dev",
      githubUrl: "https://github.com/youralpha/cloudstack"
    },
    {
      title: "DataVizPro",
      description: "Advanced data visualization library with customizable charts, graphs, and interactive dashboards for complex data sets.",
      category: "Library",
      techStack: ["TypeScript", "D3.js", "WebGL", "Canvas API", "React"],
      stats: { branches: 14, stars: 122, views: 310, forks: 26, issues: 9 },
      features: [
        "Interactive data visualizations",
        "Custom chart components",
        "Real-time data streaming support",
        "Export to various formats",
        "Responsive design for all devices"
      ],
      status: "in-progress",
      startDate: "2023-03",
      collaborators: ["@datascientist", "@vizexpert"]
    },
    {
      title: "SecureAuth",
      description: "Authentication and authorization system with multi-factor authentication, passwordless login, and advanced security features.",
      category: "Security",
      techStack: ["Node.js", "Express", "JWT", "WebAuthn", "MongoDB"],
      stats: { branches: 20, stars: 135, views: 280, forks: 35, issues: 11 },
      features: [
        "Multi-factor authentication",
        "Passwordless login options",
        "OAuth 2.0 and OpenID Connect",
        "Role-based access control",
        "Audit logging and security alerts"
      ],
      status: "completed",
      startDate: "2022-08",
      endDate: "2023-02",
      demoUrl: "https://secureauth.demo.app",
      githubUrl: "https://github.com/youralpha/secureauth"
    }
  ];

  const achievements: Achievement[] = [
    {
      title: "Open Source Contributor of the Year",
      date: "2023-12",
      description: "Recognized for significant contributions to open source projects in the web development community.",
      icon: faTrophy,
      category: "Community",
      issuer: "GitHub"
    },
    {
      title: "Hackathon Winner",
      date: "2023-10",
      description: "First place at TechCrunch Disrupt Hackathon for developing an AI-powered accessibility tool.",
      icon: faMedal,
      category: "Competition",
      issuer: "TechCrunch"
    },
    {
      title: "1M+ Downloads",
      date: "2023-08",
      description: "Personal open source library reached 1 million downloads milestone on npm.",
      icon: faDownload,
      category: "Open Source",
      issuer: "npm"
    },
    {
      title: "Tech Speaker",
      date: "2023-06",
      description: "Featured speaker at ReactConf on advanced state management techniques.",
      icon: faUsers,
      category: "Speaking",
      issuer: "ReactConf"
    },
    {
      title: "Published Author",
      date: "2023-04",
      description: "Published technical book on modern web architecture and best practices.",
      icon: faBookOpen,
      category: "Publication",
      issuer: "O'Reilly Media"
    }
  ];

  const blogPosts: BlogPost[] = [
    {
      title: "Optimizing React Applications for Performance",
      excerpt: "Learn advanced techniques to improve the performance of your React applications with code splitting, memoization, and more.",
      date: "2024-03-15",
      tags: ["React", "Performance", "JavaScript", "Web Development"],
      readTime: "8 min",
      likes: 243,
      comments: 57,
      shares: 124,
      category: "Frontend",
      slug: "optimizing-react-performance"
    },
    {
      title: "Building Scalable Backend Systems with Node.js",
      excerpt: "A comprehensive guide to architecting Node.js applications that can handle millions of requests while maintaining performance.",
      date: "2024-02-28",
      tags: ["Node.js", "Backend", "Scalability", "Architecture"],
      readTime: "12 min",
      likes: 198,
      comments: 42,
      shares: 86,
      category: "Backend",
      slug: "scalable-nodejs-systems"
    },
    {
      title: "The Future of Web Development: What's Coming in 2025",
      excerpt: "Exploring upcoming trends, technologies, and paradigm shifts that will shape web development in the coming year.",
      date: "2024-01-10",
      tags: ["Future", "Trends", "Web Development", "Technology"],
      readTime: "10 min",
      likes: 312,
      comments: 94,
      shares: 178,
      category: "Industry",
      slug: "future-web-development-2025"
    },
    {
      title: "Mastering TypeScript: Advanced Patterns and Best Practices",
      excerpt: "Take your TypeScript skills to the next level with advanced types, patterns, and techniques used by industry experts.",
      date: "2023-12-05",
      tags: ["TypeScript", "JavaScript", "Programming", "Development"],
      readTime: "15 min",
      likes: 276,
      comments: 63,
      shares: 112,
      category: "Programming",
      slug: "mastering-typescript"
    }
  ];

  const testimonials: Testimonial[] = [
    {
      name: "Sarah Johnson",
      position: "CTO",
      company: "TechForward Inc.",
      text: "Working with Youralpha was a game-changer for our company. Their technical expertise and problem-solving skills helped us completely transform our digital infrastructure. What impressed me most was their ability to explain complex technical concepts in a way our entire team could understand.",
      rating: 5,
      date: "2024-02-10",
      relation: "Client"
    },
    {
      name: "Michael Chen",
      position: "Lead Developer",
      company: "InnovateX",
      text: "I've had the pleasure of collaborating with Youralpha on several projects, and their code quality and attention to detail are outstanding. They consistently deliver solutions that are not only technically excellent but also maintainable and well-documented. A true professional in every sense.",
      rating: 5,
      date: "2023-11-15",
      relation: "Colleague"
    },
    {
      name: "Elena Rodriguez",
      position: "Product Manager",
      company: "GlobalTech Solutions",
      text: "Youralpha brought incredible value to our product development process. They not only implemented all the features we requested but also suggested improvements that we hadn't considered. Their proactive approach and technical insight significantly elevated the final product.",
      rating: 4,
      date: "2023-09-22",
      relation: "Client"
    },
    {
      name: "David Kim",
      position: "Startup Founder",
      company: "NextGenApps",
      text: "As a non-technical founder, finding a developer who could understand our vision and translate it into reality was crucial. Youralpha exceeded all expectations, delivering a product that was not only technically robust but also user-friendly and scalable. Their work was instrumental in securing our seed funding.",
      rating: 5,
      date: "2024-01-05",
      relation: "Client"
    }
  ];

  const contacts: Contact[] = [
    {
      type: "Email",
      value: "youralpha@example.com",
      icon: faEnvelope,
      isPublic: true
    },
    {
      type: "Location",
      value: "San Francisco, CA",
      icon: faMapMarkerAlt,
      isPublic: true
    },
    {
      type: "Website",
      value: "https://youralpha.dev",
      icon: faGlobe,
      isPublic: true
    },
    {
      type: "Phone",
      value: "+1 (555) 123-4567",
      icon: faMobileAlt,
      isPublic: false
    }
  ];

  const socialMedia: SocialMedia[] = [
    {
      platform: "GitHub",
      url: "https://github.com/AlphaIsYour",
      icon: faGithub,
      username: "@AlphaIsYour"
    },
    {
      platform: "LinkedIn",
      url: "https://linkedin.com/in/youralpha",
      icon: faLinkedin,
      username: "youralpha"
    },
    {
      platform: "Twitter",
      url: "https://twitter.com/eno4lph_",
      icon: faTwitter,
      username: "@eno4lph_"
    },
    {
      platform: "Medium",
      url: "https://medium.com/@youralpha",
      icon: faMedium,
      username: "@youralpha"
    },
    {
      platform: "Dev.to",
      url: "https://dev.to/youralpha",
      icon: faDev,
      username: "youralpha"
    }
  ];

const devStats: DevStats = {
    repos: 20,
    stars: 199,
    contributions: 498,
    rating: "4.9/5",
    followers: 358,
    following: 125,
    streak: 87,
    commits: 1245
  };

  const techStack: TechStackItem[] = [
    {
      name: "React",
      icon: faReact,
      proficiency: 4.5,
      category: "Frontend",
      yearsOfExperience: 4
    },
    {
      name: "Node.js",
      icon: faNode,
      proficiency: 4.3,
      category: "Backend",
      yearsOfExperience: 3.5
    },
    {
      name: "Laravel",
      icon: faLaravel,
      proficiency: 4.8,
      category: "Backend",
      yearsOfExperience: 5
    },
    {
      name: "AWS",
      icon: faAws,
      proficiency: 4.0,
      category: "DevOps",
      yearsOfExperience: 3
    },
    {
      name: "Docker",
      icon: faDocker,
      proficiency: 4.2,
      category: "DevOps",
      yearsOfExperience: 3.5
    },
    {
      name: "MongoDB",
      icon: faDatabase,
      proficiency: 4.1,
      category: "Database",
      yearsOfExperience: 3
    },
    {
      name: "PostgreSQL",
      icon: faDatabase,
      proficiency: 4.4,
      category: "Database",
      yearsOfExperience: 4
    },
    {
      name: "TypeScript",
      icon: faCode,
      proficiency: 4.6,
      category: "Language",
      yearsOfExperience: 3.5
    }
  ];

  // Memoized values & computed properties
  const filteredProjects = useMemo(() => {
    if (!searchQuery && filterOptions.length === 0) {
      return projects;
    }

    return projects.filter(project => {
      // Filter by search query
      const matchesSearch = !searchQuery || 
        project.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        project.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        project.techStack.some(tech => tech.toLowerCase().includes(searchQuery.toLowerCase()));

      // Filter by options
      const matchesFilters = filterOptions.length === 0 || filterOptions.every(filter => {
        if (filter.category === 'status') {
          return project.status === filter.value;
        }
        if (filter.category === 'tech') {
          return project.techStack.includes(filter.value);
        }
        if (filter.category === 'category') {
          return project.category === filter.value;
        }
        return true;
      });

      return matchesSearch && matchesFilters;
    });
  }, [projects, searchQuery, filterOptions]);

  const sortedProjects = useMemo(() => {
    return [...filteredProjects].sort((a, b) => {
      if (sortOption.field === 'title') {
        return sortOption.order === 'asc' 
          ? a.title.localeCompare(b.title)
          : b.title.localeCompare(a.title);
      }
      if (sortOption.field === 'stars') {
        return sortOption.order === 'asc'
          ? a.stats.stars - b.stats.stars
          : b.stats.stars - a.stats.stars;
      }
      if (sortOption.field === 'date') {
        const dateA = new Date(a.startDate).getTime();
        const dateB = new Date(b.startDate).getTime();
        return sortOption.order === 'asc' ? dateA - dateB : dateB - dateA;
      }
      return 0;
    });
  }, [filteredProjects, sortOption]);

  const paginatedProjects = useMemo(() => {
    const startIndex = (currentProjectPage - 1) * projectsPerPage;
    return sortedProjects.slice(startIndex, startIndex + projectsPerPage);
  }, [sortedProjects, currentProjectPage, projectsPerPage]);

  const totalProjectPages = useMemo(() => 
    Math.ceil(sortedProjects.length / projectsPerPage),
  [sortedProjects, projectsPerPage]);

  const filteredSkills = useMemo(() => 
    activeSkillCategory === 'all' 
      ? skillsData
      : skillsData.filter(skill => skill.category === activeSkillCategory),
  [skillsData, activeSkillCategory]);

  // Effects
  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  // Scroll effect for navbar
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 300) {
        setIsNavbarFixed(true);
      } else {
        setIsNavbarFixed(false);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Generate mock notifications
  useEffect(() => {
    const mockNotifications: Notification[] = [
      {
        id: '1',
        title: 'Project Collaboration',
        message: 'Sarah Johnson wants to collaborate on DevTracker project',
        type: 'info',
        date: new Date(2024, 3, 20),
        read: false
      },
      {
        id: '2',
        title: 'Repository Star',
        message: 'Your Tokoeno E-Commerce repository reached 150 stars!',
        type: 'success',
        date: new Date(2024, 3, 18),
        read: true
      },
      {
        id: '3',
        title: 'Certification Expiring',
        message: 'Your AWS certification will expire in 30 days',
        type: 'warning',
        date: new Date(2024, 3, 15),
        read: false
      }
    ];
    
    setNotifications(mockNotifications);
  }, []);

  // Chart initialization
  useEffect(() => {
    const initCharts = () => {
      // Clean up existing chart instances
      Object.values(chartInstances).forEach(chart => chart.destroy());
      const newChartInstances: {[key: string]: Chart} = {};

      // Activity chart
      if (activityChartRef.current) {
        newChartInstances.activity = new Chart(activityChartRef.current, {
          type: "line",
          data: {
            labels: contributions.map((c) => c.month),
            datasets: [
              {
                label: "Contributions",
                data: contributions.map((c) => c.count),
                borderColor: "#3b82f6",
                backgroundColor: "rgba(59, 130, 246, 0.1)",
                tension: 0.4,
                fill: true,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              legend: { display: false },
              tooltip: {
                backgroundColor: '#1f2937',
                titleColor: '#e5e7eb',
                bodyColor: '#e5e7eb',
                borderColor: '#374151',
                borderWidth: 1,
                padding: 10,
                displayColors: false,
                callbacks: {
                  title: (items) => `${items[0].label} 2024`,
                  label: (item) => `${item.formattedValue} contributions`
                }
              }
            },
            scales: {
              x: {
                grid: {
                  display: false,
                  drawBorder: false,
                },
                ticks: {
                  color: '#9ca3af'
                }
              },
              y: {
                grid: {
                  color: 'rgba(75, 85, 99, 0.2)',
                },
                ticks: {
                  color: '#9ca3af',
                  padding: 10
                },
                beginAtZero: true
              }
            }
          },
        });
      }

      // Skills radar chart
      if (skillRadarChartRef.current) {
        const categories = ['Frontend', 'Backend', 'DevOps', 'Database', 'Tools'];
        
        newChartInstances.skillRadar = new Chart(skillRadarChartRef.current, {
          type: 'radar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Skill Level',
              data: categories.map(category => {
                const categorySkills = skillsData.filter(skill => 
                  skill.category.toLowerCase() === category.toLowerCase()
                );
                const average = categorySkills.length 
                  ? categorySkills.reduce((sum, skill) => sum + skill.percentage, 0) / categorySkills.length
                  : 0;
                return average;
              }),
              backgroundColor: 'rgba(59, 130, 246, 0.2)',
              borderColor: '#3b82f6',
              pointBackgroundColor: '#3b82f6',
              pointBorderColor: '#fff',
              pointHoverBackgroundColor: '#fff',
              pointHoverBorderColor: '#3b82f6'
            }]
          },
          options: {
            responsive: true,
            scales: {
              r: {
                min: 0,
                max: 100,
                ticks: {
                  display: false,
                  stepSize: 20
                },
                grid: {
                  color: 'rgba(75, 85, 99, 0.2)'
                },
                pointLabels: {
                  color: '#e5e7eb',
                  font: {
                    size: 12
                  }
                }
              }
            },
            plugins: {
              legend: {
                display: false
              }
            }
          }
        });
      }

      // Tech distribution pie chart
      if (techDistributionPieRef.current) {
        const techCategories = ['Frontend', 'Backend', 'DevOps', 'Database', 'Language'];
        const techCategoryCounts = techCategories.map(category => 
          techStack.filter(tech => tech.category === category).length
        );
        
        newChartInstances.techDistribution = new Chart(techDistributionPieRef.current, {
          type: 'doughnut',
          data: {
            labels: techCategories,
            datasets: [{
              data: techCategoryCounts,
              backgroundColor: [
                '#3b82f6', // blue
                '#10b981', // green
                '#f59e0b', // yellow
                '#6366f1', // indigo
                '#ec4899'  // pink
              ],
              borderColor: '#1f2937',
              borderWidth: 2
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'right',
                labels: {
                  color: '#e5e7eb',
                  font: {
                    size: 12
                  },
                  padding: 20
                }
              },
              tooltip: {
                backgroundColor: '#1f2937',
                titleColor: '#e5e7eb',
                bodyColor: '#e5e7eb',
                callbacks: {
                  label: (context) => {
                    const label = context.label || '';
                    const value = context.raw as number;
                    const total = techStack.length;
                    const percentage = Math.round((value / total) * 100);
                    return `${label}: ${value} (${percentage}%)`;
                  }
                }
              }
            },
            cutout: '70%'
          }
        });
      }

      // Project category donut chart
      if (projectCategoryDonutRef.current) {
        const categories = [...new Set(projects.map(project => project.category))];
        const categoryCounts = categories.map(category => 
          projects.filter(project => project.category === category).length
        );
        
        newChartInstances.projectCategory = new Chart(projectCategoryDonutRef.current, {
          type: 'pie',
          data: {
            labels: categories,
            datasets: [{
              data: categoryCounts,
              backgroundColor: [
                '#3b82f6', // blue
                '#ef4444', // red
                '#10b981', // green
                '#f59e0b', // yellow
                '#6366f1', // indigo
                '#8b5cf6'  // violet
              ],
              borderColor: '#1f2937',
              borderWidth: 2
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  color: '#e5e7eb',
                  font: {
                    size: 12
                  },
                  padding: 20
                }
              }
            }
          }
        });
      }

      setChartInstances(newChartInstances);
    };

    // Initialize charts after a short delay to ensure DOM elements are ready
    if (!loading) {
      const timer = setTimeout(() => {
        initCharts();
      }, 500);
      return () => clearTimeout(timer);
    }
  }, [loading, contributions, skillsData, techStack, projects]);

  // Event handlers
  const handleProjectClick = (project: Project) => {
    setSelectedProject(project);
    setProjectDialogOpen(true);
  };

  const handleCloseProjectDialog = () => {
    setProjectDialogOpen(false);
    setSelectedProject(null);
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentProjectPage(1); // Reset pagination when search changes
  };

  const handleFilterChange = (filter: Filter) => {
    setFilterOptions(prev => {
      // Remove filter if it already exists with same category and value
      const exists = prev.some(f => 
        f.category === filter.category && f.value === filter.value
      );

      if (exists) {
        return prev.filter(f => 
          !(f.category === filter.category && f.value === filter.value)
        );
      }
      
      // Otherwise add it
      return [...prev, filter];
    });
    setCurrentProjectPage(1); // Reset pagination when filters change
  };

  const handleSortChange = (field: string, order: 'asc' | 'desc') => {
    setSortOption({ field, order });
  };

  const handleThemeToggle = () => {
    setDarkModeEnabled(prev => !prev);
    // In a real implementation, this would also update the HTML document theme
  };

  const handleContactFormChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setContactFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleContactFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // In a real implementation, this would submit the form data
    
    // Show mock success notification
    const newNotification: Notification = {
      id: `${Date.now()}`,
      title: 'Message Sent',
      message: 'Your message has been sent successfully',
      type: 'success',
      date: new Date(),
      read: false
    };
    
    setNotifications(prev => [newNotification, ...prev]);
    setShowContactForm(false);
    setContactFormData({
      name: "",
      email: "",
      subject: "",
      message: ""
    });
  };

  const handleExport = (format: 'pdf' | 'docx' | 'json') => {
    setIsExporting(true);
    
    // Mock export process
    setTimeout(() => {
      setIsExporting(false);
      
      // Show success notification
      const newNotification: Notification = {
        id: `${Date.now()}`,
        title: 'Export Successful',
        message: `Portfolio has been exported as ${format.toUpperCase()}`,
        type: 'success',
        date: new Date(),
        read: false
      };
      
      setNotifications(prev => [newNotification, ...prev]);
    }, 2000);
  };

  const handleNotificationMarkAsRead = (id: string) => {
    setNotifications(prev =>
      prev.map(notification =>
        notification.id === id ? { ...notification, read: true } : notification
      )
    );
  };

  const handleClearAllNotifications = () => {
    setNotifications([]);
  };

  // Render helper functions
  const renderTabs = useCallback(() => {
    const tabs = [
      { id: "overview", icon: faHome, label: "Overview" },
      { id: "projects", icon: faCodeBranch, label: "Projects" },
      { id: "skills", icon: faCode, label: "Skills" },
      { id: "experience", icon: faBriefcase, label: "Experience" },
      { id: "education", icon: faGraduationCap, label: "Education" },
      { id: "achievements", icon: faAward, label: "Achievements" },
      { id: "activity", icon: faChartLine, label: "Activity" },
      { id: "blog", icon: faRss, label: "Blog" },
      { id: "testimonials", icon: faCommentDots, label: "Testimonials" },
      { id: "contact", icon: faEnvelope, label: "Contact" }
    ];

    return (
      <div className="flex overflow-x-auto py-3 gap-8">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`flex items-center px-1 py-3 font-medium transition-colors ${
              activeTab === tab.id
                ? "text-white border-b-2 border-blue-500"
                : "text-gray-400 hover:text-gray-200"
            }`}
          >
            <FontAwesomeIcon icon={tab.icon} className="mr-2" />
            {tab.label}
          </button>
        ))}
      </div>
    );
  }, [activeTab]);

  const renderStatCards = useCallback(() => {
    const stats = [
      { value: devStats.repos, label: "Repositories", icon: faCodeBranch },
      { value: devStats.stars, label: "Stars Received", icon: faStar },
      { value: devStats.contributions, label: "Contributions", icon: faCode },
      { value: devStats.rating, label: "Average Rating", icon: faCheckCircle }
    ];

    return (
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
        {stats.map((stat, i) => (
          <div
            key={i}
            className="bg-gray-800 p-4 rounded-lg text-center hover:bg-gray-750 transition transform hover:-translate-y-1"
          >
            <FontAwesomeIcon icon={stat.icon} className="text-blue-400 text-xl mb-2" />
            <div className="text-3xl font-bold text-white">{stat.value}</div>
            <div className="text-gray-400 text-sm">{stat.label}</div>
          </div>
        ))}
      </div>
    );
  }, [devStats]);

  const renderProfileHeader = () => (
    <div className="bg-gray-800 rounded-lg shadow-xl overflow-hidden">
      <div className="h-64 md:h-80 bg-gradient-to-r from-blue-900 to-gray-900 relative">
        <img
          src="/image/r6.jpg"
          alt="Cover"
          className="w-full h-full object-cover transform scale-110"
        />

        <div className="absolute top-4 right-4 flex items-center px-3 py-1 rounded-full bg-gray-800 bg-opacity-70">
          <span className="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse" />
          <span className="text-green-400 text-sm font-medium">Online</span>
        </div>

        <div className="absolute top-4 left-4 flex space-x-2">
          <button className="bg-gray-800 bg-opacity-70 p-2 rounded-full text-gray-300 hover:text-white transition">
            <FontAwesomeIcon icon={faShareAlt} />
          </button>
          <button className="bg-gray-800 bg-opacity-70 p-2 rounded-full text-gray-300 hover:text-white transition">
            <FontAwesomeIcon icon={faBookmark} />
          </button>
          <button className="bg-gray-800 bg-opacity-70 p-2 rounded-full text-gray-300 hover:text-white transition">
            <FontAwesomeIcon icon={faEllipsisH} />
          </button>
        </div>
      </div>

      {/* Info Profil */}
      <div className="relative px-6 pb-6">
        <div className="absolute -top-16 left-6 md:left-8">
          <div className="rounded-full border-4 border-gray-800 bg-gray-800 shadow-xl">
            <img
              src="/image/r10.jpg"
              alt="Profile"
              className="w-32 h-32 rounded-full object-cover"
            />
            <div className="absolute bottom-1 right-1 bg-red-600 text-white text-xs font-bold rounded-full w-8 h-8 flex items-center justify-center border-2 border-gray-800">
              99
            </div>
          </div>
        </div>

        <div className="flex flex-col md:flex-row md:justify-between md:items-end pt-20 md:pt-4">
          <div>
            <h1 className="text-3xl font-bold text-white">Youralpha</h1>
            <p className="text-blue-400 text-lg mb-2">@eno4lph_</p>

            <div className="flex flex-wrap gap-4 mt-2">
              {socialMedia.map((social, idx) => (
                <a
                  key={idx}
                  href={social.url}
                  className="flex items-center text-gray-300 hover:text-blue-400 transition"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <FontAwesomeIcon icon={social.icon} className="mr-2" />
                  {social.platform}
                </a>
              ))}
            </div>
          </div>

          <div className="flex flex-wrap gap-3 mt-4 md:mt-0">
            <button
              onClick={() => setShowContactForm(true)}
              className="flex items-center bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition"
            >
              <FontAwesomeIcon icon={faEnvelope} className="mr-2" />
              Contact Me
            </button>
            <button className="flex items-center bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition">
              <FontAwesomeIcon icon={faDownload} className="mr-2" />
              Download CV
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderOverviewTab = () => (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {/* Left Column */}
      <div className="space-y-6">
        <div className="bg-gray-800 p-6 rounded-lg">
          <div className="flex justify-between items-center mb-3">
            <h3 className="text-lg font-semibold text-white">
              Developer Level
            </h3>
            <span className="bg-blue-900 text-blue-200 rounded-full px-3 py-1 text-xs font-medium">
              Level 99
            </span>
          </div>
          <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
            <div
              className="h-full bg-gradient-to-r from-blue-600 to-indigo-500 animate-progress"
              style={{ width: "80%" }}
            />
          </div>
        </div>

        {/* Tech Stack */}
        <div className="bg-gray-800 p-6 rounded-lg">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-white">
              Core Tech Stack
            </h3>
            <button 
              className="text-blue-400 text-sm"
              onClick={() => setActiveTab("skills")}
            >
              View all
            </button>
          </div>
          <div className="space-y-4">
            {techStack.slice(0, 5).map((tech, idx) => (
              <div key={idx} className="flex items-center">
                <div className="w-10 h-10 flex items-center justify-center bg-gray-750 rounded-lg mr-3">
                  <FontAwesomeIcon icon={tech.icon} className="text-blue-400 text-xl" />
                </div>
                <div className="flex-1">
                  <div className="flex justify-between mb-1">
                    <span className="text-white">{tech.name}</span>
                    <span className="text-gray-400">{tech.yearsOfExperience} years</span>
                  </div>
                  <div className="h-1.5 bg-gray-700 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-gradient-to-r from-blue-500 to-indigo-600"
                      style={{ width: `${tech.proficiency * 20}%` }}
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Achievements */}
        <div className="bg-gray-800 p-6 rounded-lg">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-white">
              Achievements
            </h3>
            <button 
              className="text-blue-400 text-sm"
              onClick={() => setActiveTab("achievements")}
            >
              View all
            </button>
          </div>
          <div className="grid grid-cols-2 gap-4">
            {achievements.slice(0, 4).map((achievement, idx) => (
              <div
                key={idx}
                className="bg-gray-750 p-3 rounded-lg flex flex-col items-center text-center hover:bg-gray-700 transition cursor-pointer"
              >
                <div className="w-12 h-12 bg-blue-900 bg-opacity-50 rounded-full mb-2 flex items-center justify-center">
                  <FontAwesomeIcon icon={achievement.icon} className="text-blue-400 text-xl" />
                </div>
                <span className="text-white text-sm">{achievement.title}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Center/Right Columns */}
      <div className="md:col-span-2 space-y-6">
        <div className="bg-gray-800 p-6 rounded-lg">
          <h2 className="text-xl font-semibold text-white mb-4">
            <FontAwesomeIcon
              icon={faUserCircle}
              className="mr-2 text-blue-400"
            />
            About Me
          </h2>
          <p className="text-gray-300 mb-4">
            Passionate full-stack developer with 5+ years experience in building scalable web applications. Specialized in React, Node.js, and Laravel ecosystems with a strong focus on delivering high-performance, user-friendly solutions. Devoted to clean code, accessibility, and staying updated with the latest tech trends.
          </p>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
            <div>
              <h3 className="text-lg font-semibold text-white mb-3">Contact Information</h3>
              <ul className="space-y-3">
                {contacts.filter(contact => contact.isPublic).map((contact, idx) => (
                  <li key={idx} className="flex items-center text-gray-300">
                    <div className="w-8 h-8 bg-gray-750 rounded-lg flex items-center justify-center mr-3">
                      <FontAwesomeIcon icon={contact.icon} className="text-blue-400" />
                    </div>
                    <span>{contact.value}</span>
                  </li>
                ))}
              </ul>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-white mb-3">Personal Info</h3>
              <ul className="space-y-3">
                <li className="flex items-center text-gray-300">
                  <div className="w-8 h-8 bg-gray-750 rounded-lg flex items-center justify-center mr-3">
                    <FontAwesomeIcon icon={faMapMarkerAlt} className="text-blue-400" />
                  </div>
                  <span>San Francisco, CA</span>
                </li>
                <li className="flex items-center text-gray-300">
                  <div className="w-8 h-8 bg-gray-750 rounded-lg flex items-center justify-center mr-3">
                    <FontAwesomeIcon icon={faCalendarAlt} className="text-blue-400" />
                  </div>
                  <span>Full-time Available</span>
                </li>
              </ul>
            </div>
          </div>
        </div>

        {/* Featured Projects */}
        <div className="bg-gray-800 p-6 rounded-lg">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold text-white">
              Featured Projects
            </h2>
            <button 
              className="text-blue-400 text-sm"
              onClick={() => setActiveTab("projects")}
            >
              View all
            </button>
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {projects.slice(0, 2).map((project, idx) => (
              <div
                key={idx}
                className="bg-gray-750 rounded-lg overflow-hidden hover:shadow-xl transition transform hover:-translate-y-1 cursor-pointer"
                onClick={() => handleProjectClick(project)}
              >
                <div className="h-48 bg-gradient-to-r from-blue-800 to-indigo-900 relative">
                  <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-gray-900