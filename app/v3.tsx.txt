"use client";

import { useState, useEffect, useRef } from "react";
import { motion, useAnimation, AnimatePresence } from "framer-motion";
import {
  Code,
  Briefcase,
  Mail,
  ChevronDown,
  ExternalLink,
  Github,
  Linkedin,
  Twitter,
  Menu,
  X,
  Moon,
  Sun,
  ArrowRight,
  Download,
  Send,
} from "lucide-react";
import Image from "next/image";

// TYPES
type Project = {
  id: number;
  title: string;
  description: string;
  technologies: string[];
  imageUrl: string;
  projectUrl?: string;
  githubUrl?: string;
};

// type Skill = {
//   name: string;
//   icon: JSX.Element;
//   level: number;
// };

type Experience = {
  id: number;
  company: string;
  position: string;
  duration: string;
  description: string[];
};

type Education = {
  id: number;
  institution: string;
  degree: string;
  duration: string;
};

type ContactFormData = {
  name: string;
  email: string;
  message: string;
};

// COMPONENTS
const Navbar = ({
  darkMode,
  toggleDarkMode,
}: {
  darkMode: boolean;
  toggleDarkMode: () => void;
}) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 50) {
        setScrolled(true);
      } else {
        setScrolled(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const navLinks = [
    { name: "Home", href: "#home" },
    { name: "About", href: "#about" },
    { name: "Skills", href: "#skills" },
    { name: "Projects", href: "#projects" },
    { name: "Experience", href: "#experience" },
    { name: "Contact", href: "#contact" },
  ];

  return (
    <motion.header
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
        scrolled
          ? "bg-white/80 dark:bg-gray-900/80 backdrop-blur-md shadow-lg"
          : "bg-transparent"
      }`}
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="container mx-auto px-4 py-4 flex justify-between items-center">
        <motion.div
          className="text-2xl font-bold bg-gradient-to-r from-purple-500 to-blue-500 bg-clip-text text-transparent"
          whileHover={{ scale: 1.05 }}
        >
          Youralpha
        </motion.div>

        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center space-x-8">
          {navLinks.map((link, index) => (
            <motion.a
              key={index}
              href={link.href}
              className="text-gray-700 dark:text-gray-300 hover:text-purple-500 dark:hover:text-purple-400 transition-colors"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
            >
              {link.name}
            </motion.a>
          ))}
          <motion.button
            onClick={toggleDarkMode}
            className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            whileHover={{ rotate: 180 }}
            transition={{ duration: 0.3 }}
          >
            {darkMode ? <Sun size={20} /> : <Moon size={20} />}
          </motion.button>
        </div>

        {/* Mobile Menu Button */}
        <div className="flex items-center md:hidden">
          <motion.button
            onClick={toggleDarkMode}
            className="p-2 mr-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            whileHover={{ scale: 1.1 }}
          >
            {darkMode ? <Sun size={20} /> : <Moon size={20} />}
          </motion.button>
          <motion.button
            onClick={toggleMenu}
            className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            whileHover={{ scale: 1.1 }}
          >
            {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
          </motion.button>
        </div>
      </div>

      {/* Mobile Menu */}
      <AnimatePresence>
        {isMenuOpen && (
          <motion.div
            className="md:hidden bg-white dark:bg-gray-900 shadow-lg"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="container mx-auto px-4 py-4 flex flex-col space-y-4">
              {navLinks.map((link, index) => (
                <motion.a
                  key={index}
                  href={link.href}
                  className="text-gray-700 dark:text-gray-300 hover:text-purple-500 dark:hover:text-purple-400 transition-colors py-2"
                  onClick={() => setIsMenuOpen(false)}
                  initial={{ x: -20, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ delay: index * 0.1 }}
                >
                  {link.name}
                </motion.a>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.header>
  );
};

const HeroSection = () => {
  return (
    <section
      id="home"
      className="min-h-screen flex items-center justify-center pt-16 relative overflow-hidden"
    >
      {/* Animated Background */}
      <div className="absolute inset-0 z-0">
        <div className="absolute inset-0 bg-gradient-to-b from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800"></div>
        <div className="particle-container absolute inset-0">
          {[...Array(20)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute w-4 h-4 rounded-full bg-purple-400 dark:bg-purple-600 opacity-20"
              initial={{
                x: Math.random() * window.innerWidth,
                y: Math.random() * window.innerHeight,
              }}
              animate={{
                x: [
                  Math.random() * window.innerWidth,
                  Math.random() * window.innerWidth,
                  Math.random() * window.innerWidth,
                ],
                y: [
                  Math.random() * window.innerHeight,
                  Math.random() * window.innerHeight,
                  Math.random() * window.innerHeight,
                ],
              }}
              transition={{
                duration: 10 + Math.random() * 20,
                repeat: Infinity,
                ease: "linear",
              }}
              style={{
                width: `${Math.random() * 30 + 5}px`,
                height: `${Math.random() * 30 + 5}px`,
              }}
            />
          ))}
        </div>
      </div>

      <div className="container mx-auto px-4 z-10 flex flex-col-reverse md:flex-row items-center justify-between">
        <motion.div
          className="md:w-1/2 text-center md:text-left mt-12 md:mt-0"
          initial={{ opacity: 0, x: -50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8 }}
        >
          <motion.p
            className="text-purple-600 dark:text-purple-400 font-semibold mb-2"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
          >
            Hello, I&apos;m
          </motion.p>
          <motion.h1
            className="text-4xl md:text-6xl font-bold mb-4 bg-gradient-to-r from-purple-600 to-blue-500 bg-clip-text text-transparent"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.4 }}
          >
            John Doe
          </motion.h1>
          <motion.div
            className="text-xl md:text-2xl text-gray-700 dark:text-gray-300 mb-6 font-light"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.6 }}
          >
            <TypewriterEffect
              texts={[
                "Frontend Developer",
                "UI/UX Designer",
                "React Specialist",
                "NextJS Enthusiast",
              ]}
            />
          </motion.div>
          <motion.p
            className="text-gray-600 dark:text-gray-400 mb-8 max-w-lg"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.8 }}
          >
            Creating beautiful, responsive, and user-friendly web applications
            with modern technologies and best practices.
          </motion.p>
          <motion.div
            className="flex flex-wrap gap-4 justify-center md:justify-start"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 1 }}
          >
            <motion.a
              href="#contact"
              className="px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-500 text-white rounded-full flex items-center gap-2 hover:opacity-90 transition"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              Contact Me <ArrowRight size={16} />
            </motion.a>
            <motion.a
              href="#projects"
              className="px-6 py-3 border border-purple-500 text-purple-600 dark:text-purple-400 dark:border-purple-400 rounded-full flex items-center gap-2 hover:bg-purple-50 dark:hover:bg-gray-800 transition"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              View Projects <ExternalLink size={16} />
            </motion.a>
          </motion.div>
          <motion.div
            className="flex gap-6 mt-8 justify-center md:justify-start"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 1.2 }}
          >
            {[
              {
                icon: <Github className="w-5 h-5" />,
                url: "https://github.com",
              },
              {
                icon: <Linkedin className="w-5 h-5" />,
                url: "https://linkedin.com",
              },
              {
                icon: <Twitter className="w-5 h-5" />,
                url: "https://twitter.com",
              },
            ].map((social, index) => (
              <motion.a
                key={index}
                href={social.url}
                target="_blank"
                rel="noopener noreferrer"
                className="w-10 h-10 rounded-full flex items-center justify-center border border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:border-purple-500 hover:text-purple-500 dark:hover:border-purple-400 dark:hover:text-purple-400 transition"
                whileHover={{ y: -3, scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                {social.icon}
              </motion.a>
            ))}
          </motion.div>
        </motion.div>
        <motion.div
          className="md:w-1/2 flex justify-center"
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8 }}
        >
          <div className="relative">
            <motion.div
              className="w-64 h-64 md:w-80 md:h-80 rounded-full bg-gradient-to-r from-purple-600 to-blue-500 overflow-hidden border-4 border-white dark:border-gray-800 shadow-xl"
              whileHover={{ scale: 1.05 }}
              transition={{ duration: 0.3 }}
            >
              <Image
                src="/images/c10.png"
                width={320}
                height={320}
                alt="Profile"
                className="w-full h-full object-cover"
              />
            </motion.div>
            <motion.div
              className="absolute -top-4 -right-4 bg-white dark:bg-gray-800 rounded-full p-3 shadow-lg"
              initial={{ scale: 0, rotate: -45 }}
              animate={{ scale: 1, rotate: 0 }}
              transition={{ delay: 1, duration: 0.5 }}
            >
              <Code className="w-6 h-6 text-purple-500" />
            </motion.div>
            <motion.div
              className="absolute -bottom-4 -left-4 bg-white dark:bg-gray-800 rounded-full p-3 shadow-lg"
              initial={{ scale: 0, rotate: 45 }}
              animate={{ scale: 1, rotate: 0 }}
              transition={{ delay: 1.2, duration: 0.5 }}
            >
              <Briefcase className="w-6 h-6 text-blue-500" />
            </motion.div>
          </div>
        </motion.div>
      </div>

      <motion.div
        className="absolute bottom-12 left-1/2 transform -translate-x-1/2"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 1.5, duration: 0.5 }}
      >
        <motion.a
          href="#about"
          className="flex flex-col items-center text-gray-500 dark:text-gray-400 hover:text-purple-500 dark:hover:text-purple-400 transition"
          animate={{ y: [0, 10, 0] }}
          transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
        >
          <span className="text-sm mb-2">Scroll Down</span>
          <ChevronDown className="w-5 h-5" />
        </motion.a>
      </motion.div>
    </section>
  );
};

const TypewriterEffect = ({ texts }: { texts: string[] }) => {
  const [displayText, setDisplayText] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);
  const [charIndex, setCharIndex] = useState(0);
  const [isDeleting, setIsDeleting] = useState(false);

  useEffect(() => {
    const typingSpeed = isDeleting ? 50 : 150;
    const timer = setTimeout(() => {
      const currentText = texts[currentIndex];

      if (!isDeleting) {
        // Typing
        if (charIndex < currentText.length) {
          setDisplayText(currentText.substring(0, charIndex + 1));
          setCharIndex(charIndex + 1);
        } else {
          // Start deleting after a pause
          setTimeout(() => {
            setIsDeleting(true);
          }, 1500);
        }
      } else {
        // Deleting
        if (charIndex > 0) {
          setDisplayText(currentText.substring(0, charIndex - 1));
          setCharIndex(charIndex - 1);
        } else {
          setIsDeleting(false);
          setCurrentIndex((currentIndex + 1) % texts.length);
        }
      }
    }, typingSpeed);

    return () => clearTimeout(timer);
  }, [charIndex, currentIndex, isDeleting, texts]);

  return (
    <div className="flex items-center">
      <span>{displayText}</span>
      <span className="w-0.5 h-6 bg-purple-500 dark:bg-purple-400 ml-1 animate-blink"></span>
    </div>
  );
};

const AboutSection = () => {
  const controls = useAnimation();
  const ref = useRef(null);

  useEffect(() => {
    const currentRef = ref.current;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          controls.start("visible");
        }
      },
      { threshold: 0.1 }
    );

    if (currentRef) {
      observer.observe(currentRef);
    }

    return () => {
      if (currentRef) {
        observer.unobserve(currentRef);
      }
    };
  }, [controls]);

  const variants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        staggerChildren: 0.2,
      },
    },
  };

  const childVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  };

  return (
    <section id="about" className="py-20 bg-gray-50 dark:bg-gray-900">
      <motion.div
        ref={ref}
        className="container mx-auto px-4"
        initial="hidden"
        animate={controls}
        variants={variants}
      >
        <motion.div variants={childVariants} className="text-center mb-12">
          <motion.p
            className="text-purple-600 dark:text-purple-400 font-medium mb-2"
            whileHover={{ scale: 1.05 }}
          >
            Get To Know
          </motion.p>
          <motion.h2 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white">
            About Me
          </motion.h2>
          <motion.div
            className="h-1 w-20 bg-gradient-to-r from-purple-600 to-blue-500 mx-auto mt-4"
            whileHover={{ width: "100px", transition: { duration: 0.3 } }}
          />
        </motion.div>

        <div className="flex flex-col md:flex-row items-center gap-12">
          <motion.div className="md:w-1/2" variants={childVariants}>
            <motion.div
              className="relative max-w-md mx-auto"
              whileHover={{ scale: 1.02 }}
              transition={{ duration: 0.3 }}
            >
              <div className="absolute inset-0 bg-gradient-to-r from-purple-600 to-blue-500 rounded-lg transform rotate-3"></div>
              <Image
                src="/images/k10.jpg"
                alt="About Me"
                width={500}
                height={500}
                className="relative z-10 rounded-lg shadow-lg object-cover w-full h-full transform -rotate-3 transition-transform hover:rotate-0 duration-300"
              />
            </motion.div>
          </motion.div>

          <motion.div className="md:w-1/2" variants={childVariants}>
            <div className="space-y-6">
              <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                Hello! Im John Doe, a passionate frontend developer with 5+
                years of experience creating modern and user-friendly web
                applications. My journey in web development started when I was
                in college, and since then, Ive been constantly improving my
                skills and keeping up with the latest technologies.
              </p>
              <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                I specialize in React ecosystem, particularly Next.js, and Im
                enthusiastic about creating performant, accessible, and visually
                appealing user interfaces. I believe in writing clean,
                maintainable code and creating experiences that users love.
              </p>
              <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                When Im not coding, you can find me hiking, reading tech blogs,
                or experimenting with new web technologies. Im always open to
                new challenges and opportunities to grow as a developer.
              </p>

              <motion.div
                className="flex flex-wrap gap-4 pt-4"
                variants={childVariants}
              >
                <motion.a
                  href="#contact"
                  className="px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-500 text-white rounded-full flex items-center gap-2 hover:opacity-90 transition"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Lets Talk <Mail size={16} />
                </motion.a>
                <motion.a
                  href="#"
                  className="px-6 py-3 border border-purple-500 text-purple-600 dark:text-purple-400 dark:border-purple-400 rounded-full flex items-center gap-2 hover:bg-purple-50 dark:hover:bg-gray-800 transition"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Download CV <Download size={16} />
                </motion.a>
              </motion.div>
            </div>
          </motion.div>
        </div>
      </motion.div>
    </section>
  );
};

const SkillsSection = () => {
  const controls = useAnimation();
  const ref = useRef(null);

  useEffect(() => {
    const currentRef = ref.current;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          controls.start("visible");
        }
      },
      { threshold: 0.1 }
    );

    if (currentRef) {
      observer.observe(currentRef);
    }

    return () => {
      if (currentRef) {
        observer.unobserve(currentRef);
      }
    };
  }, [controls]);

  const variants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        staggerChildren: 0.1,
      },
    },
  };

  const childVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  };

  // Categories of skills
  const skillCategories = [
    {
      title: "Frontend Development",
      skills: [
        { name: "HTML5", level: 95 },
        { name: "CSS3", level: 90 },
        { name: "JavaScript", level: 92 },
        { name: "TypeScript", level: 85 },
        { name: "React", level: 90 },
        { name: "Next.js", level: 88 },
        { name: "Vue.js", level: 75 },
        { name: "Tailwind CSS", level: 92 },
      ],
    },
    {
      title: "Tools & Others",
      skills: [
        { name: "Git & GitHub", level: 85 },
        { name: "Figma", level: 80 },
        { name: "Webpack", level: 70 },
        { name: "Jest", level: 75 },
        { name: "Node.js", level: 65 },
        { name: "GraphQL", level: 70 },
        { name: "RESTful APIs", level: 85 },
        { name: "Performance Optimization", level: 80 },
      ],
    },
  ];

  return (
    <section id="skills" className="py-20 bg-white dark:bg-gray-800">
      <motion.div
        ref={ref}
        className="container mx-auto px-4"
        initial="hidden"
        animate={controls}
        variants={variants}
      >
        <motion.div variants={childVariants} className="text-center mb-16">
          <motion.p
            className="text-purple-600 dark:text-purple-400 font-medium mb-2"
            whileHover={{ scale: 1.05 }}
          >
            What I Can Do
          </motion.p>
          <motion.h2 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white">
            My Skills & Expertise
          </motion.h2>
          <motion.div
            className="h-1 w-20 bg-gradient-to-r from-purple-600 to-blue-500 mx-auto mt-4"
            whileHover={{ width: "100px", transition: { duration: 0.3 } }}
          />
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-12">
          {skillCategories.map((category, categoryIndex) => (
            <motion.div
              key={categoryIndex}
              variants={childVariants}
              className="bg-gray-50 dark:bg-gray-900 rounded-lg shadow-lg p-8"
            >
              <h3 className="text-xl font-bold mb-6 text-center text-gray-800 dark:text-white">
                {category.title}
              </h3>
              <div className="space-y-6">
                {category.skills.map((skill, skillIndex) => (
                  <motion.div
                    key={skillIndex}
                    className="space-y-2"
                    variants={childVariants}
                    whileHover={{ scale: 1.02 }}
                  >
                    <div className="flex justify-between">
                      <span className="font-medium text-gray-700 dark:text-gray-300">
                        {skill.name}
                      </span>
                      <span className="text-sm text-gray-500 dark:text-gray-400">
                        {skill.level}%
                      </span>
                    </div>
                    <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                      <motion.div
                        className="h-full bg-gradient-to-r from-purple-600 to-blue-500 rounded-full"
                        initial={{ width: 0 }}
                        animate={{ width: `${skill.level}%` }}
                        transition={{
                          duration: 1,
                          delay: 0.2 + skillIndex * 0.1,
                        }}
                      />
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>
    </section>
  );
};

const ProjectsSection = () => {
  const controls = useAnimation();
  const ref = useRef(null);
  const [activeFilter, setActiveFilter] = useState("all");

  useEffect(() => {
    const currentRef = ref.current;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          controls.start("visible");
        }
      },
      { threshold: 0.1 }
    );

    if (currentRef) {
      observer.observe(currentRef);
    }

    return () => {
      if (currentRef) {
        observer.unobserve(currentRef);
      }
    };
  }, [controls]);

  const variants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        staggerChildren: 0.2,
      },
    },
  };

  const childVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  };

  // Sample projects data
  const projects: Project[] = [
    {
      id: 1,
      title: "E-Commerce Dashboard",
      description:
        "A responsive admin dashboard with dark mode, charts, and data tables for e-commerce management.",
      technologies: ["React", "Next.js", "Tailwind CSS", "Chart.js"],
      imageUrl: "/images/c10.png",
      projectUrl: "https://example.com/project1",
      githubUrl: "https://github.com/username/project1",
    },
    {
      id: 2,
      title: "Travel Blog Platform",
      description:
        "A blog platform for travel enthusiasts with interactive maps and image galleries.",
      technologies: ["Vue.js", "Node.js", "MongoDB", "Mapbox"],
      imageUrl: "/images/c9.png",
      projectUrl: "https://example.com/project2",
      githubUrl: "https://github.com/username/project2",
    },
    {
      id: 3,
      title: "Task Management App",
      description:
        "A Kanban-style task management application with drag-and-drop functionality and team collaboration.",
      technologies: ["React", "TypeScript", "Firebase", "Styled Components"],
      imageUrl: "/images/c9.png",
      projectUrl: "https://example.com/project3",
      githubUrl: "https://github.com/username/project3",
    },
    {
      id: 4,
      title: "Fitness Tracker",
      description:
        "A mobile-first fitness tracking application with workout plans and progress visualization.",
      technologies: ["React Native", "Redux", "GraphQL", "D3.js"],
      imageUrl: "/images/k12.jpg",
      projectUrl: "https://example.com/project4",
      githubUrl: "https://github.com/username/project4",
    },
    {
      id: 5,
      title: "Weather Forecast App",
      description:
        "A weather forecast application with hourly and daily predictions, location-based services, and animated weather icons.",
      technologies: [
        "React",
        "OpenWeather API",
        "Geolocation API",
        "Framer Motion",
      ],
      imageUrl: "/images/k15.jpg",
      projectUrl: "https://example.com/project5",
      githubUrl: "https://github.com/username/project5",
    },
    {
      id: 6,
      title: "Recipe Sharing Platform",
      description:
        "A community-driven recipe sharing platform with search functionality and user collections.",
      technologies: ["Next.js", "MongoDB", "AWS S3", "Tailwind CSS"],
      imageUrl: "/images/k15.jpg",
      projectUrl: "https://example.com/project6",
      githubUrl: "https://github.com/username/project6",
    },
  ];

  // Filter categories based on technologies
  const filters = [
    "all",
    "React",
    "Next.js",
    "TypeScript",
    "Tailwind CSS",
    "Vue.js",
  ];

  // Filter projects based on active filter
  const filteredProjects =
    activeFilter === "all"
      ? projects
      : projects.filter((project) =>
          project.technologies.includes(activeFilter)
        );

  return (
    <section id="projects" className="py-20 bg-gray-50 dark:bg-gray-900">
      <motion.div
        ref={ref}
        className="container mx-auto px-4"
        initial="hidden"
        animate={controls}
        variants={variants}
      >
        <motion.div variants={childVariants} className="text-center mb-12">
          <motion.p
            className="text-purple-600 dark:text-purple-400 font-medium mb-2"
            whileHover={{ scale: 1.05 }}
          >
            My Recent Work
          </motion.p>
          <motion.h2 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white">
            Featured Projects
          </motion.h2>
          <motion.div
            className="h-1 w-20 bg-gradient-to-r from-purple-600 to-blue-500 mx-auto mt-4"
            whileHover={{ width: "100px", transition: { duration: 0.3 } }}
          />
        </motion.div>

        <motion.div
          className="flex flex-wrap justify-center gap-4 mb-12"
          variants={childVariants}
        >
          {filters.map((filter, index) => (
            <motion.button
              key={index}
              className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                activeFilter === filter
                  ? "bg-gradient-to-r from-purple-600 to-blue-500 text-white"
                  : "bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
              }`}
              onClick={() => setActiveFilter(filter)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {filter.charAt(0).toUpperCase() + filter.slice(1)}
            </motion.button>
          ))}
        </motion.div>

        <motion.div
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
          variants={variants}
        >
          <AnimatePresence>
            {filteredProjects.map((project) => (
              <motion.div
                key={project.id}
                layout
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                transition={{ duration: 0.5 }}
                className="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow"
              >
                <div className="relative overflow-hidden group">
                  <Image
                    src={project.imageUrl}
                    alt={project.title}
                    width={500}
                    height={192}
                    className="w-full h-48 object-cover transition-transform duration-500 group-hover:scale-110"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end">
                    <div className="p-4 w-full">
                      <div className="flex gap-2 justify-end">
                        {project.githubUrl && (
                          <motion.a
                            href={project.githubUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white hover:bg-white hover:text-gray-900 transition-colors"
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                          >
                            <Github size={18} />
                          </motion.a>
                        )}
                        {project.projectUrl && (
                          <motion.a
                            href={project.projectUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white hover:bg-white hover:text-gray-900 transition-colors"
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                          >
                            <ExternalLink size={18} />
                          </motion.a>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                <div className="p-6">
                  <h3 className="text-xl font-bold mb-2 text-gray-800 dark:text-white">
                    {project.title}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 mb-4 text-sm">
                    {project.description}
                  </p>
                  <div className="flex flex-wrap gap-2">
                    {project.technologies.map((tech, techIndex) => (
                      <span
                        key={techIndex}
                        className="px-3 py-1 text-xs font-medium bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400 rounded-full"
                      >
                        {tech}
                      </span>
                    ))}
                  </div>
                </div>
              </motion.div>
            ))}
          </AnimatePresence>
        </motion.div>

        {filteredProjects.length === 0 && (
          <motion.div
            className="text-center py-12 text-gray-500 dark:text-gray-400"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            No projects found with the selected filter.
          </motion.div>
        )}

        <motion.div className="text-center mt-12" variants={childVariants}>
          <motion.a
            href="https://github.com/username"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center gap-2 px-6 py-3 bg-gray-800 dark:bg-gray-700 text-white rounded-full hover:bg-gray-700 dark:hover:bg-gray-600 transition"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            View All Projects on GitHub <Github size={16} />
          </motion.a>
        </motion.div>
      </motion.div>
    </section>
  );
};

const ExperienceSection = () => {
  const controls = useAnimation();
  const ref = useRef(null);
  const [activeTab, setActiveTab] = useState("experience");

  useEffect(() => {
    const currentRef = ref.current;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          controls.start("visible");
        }
      },
      { threshold: 0.1 }
    );

    if (currentRef) {
      observer.observe(currentRef);
    }

    return () => {
      if (currentRef) {
        observer.unobserve(currentRef);
      }
    };
  }, [controls]);

  const variants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        staggerChildren: 0.2,
      },
    },
  };

  const childVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  };

  // Experience data
  const experiences: Experience[] = [
    {
      id: 1,
      company: "TechCorp Inc.",
      position: "Senior Frontend Developer",
      duration: "Jan 2023 - Present",
      description: [
        "Led the development of a complex e-commerce dashboard using Next.js and TypeScript.",
        "Improved website performance by 40% through code optimization and implementing lazy loading techniques.",
        "Mentored junior developers and conducted code reviews to maintain code quality standards.",
        "Collaborated with UI/UX designers to implement pixel-perfect, responsive designs.",
      ],
    },
    {
      id: 2,
      company: "WebSolutions Ltd.",
      position: "Frontend Developer",
      duration: "Mar 2020 - Dec 2022",
      description: [
        "Developed and maintained multiple client websites using React and Vue.js.",
        "Implemented responsive designs and ensured cross-browser compatibility.",
        "Integrated RESTful APIs and GraphQL endpoints with frontend applications.",
        "Participated in daily stand-ups and sprint planning meetings following Agile methodologies.",
      ],
    },
    {
      id: 3,
      company: "DigitalCraft Agency",
      position: "Web Developer Intern",
      duration: "Jun 2019 - Feb 2020",
      description: [
        "Assisted in the development of client websites using HTML, CSS, and JavaScript.",
        "Learned modern frontend frameworks like React and improved coding skills.",
        "Participated in team projects and contributed to the company's internal tools.",
        "Gained experience in version control with Git and project management tools.",
      ],
    },
  ];

  // Education data
  const education: Education[] = [
    {
      id: 1,
      institution: "University of Technology",
      degree: "Master of Computer Science",
      duration: "2017 - 2019",
    },
    {
      id: 2,
      institution: "State College",
      degree: "Bachelor of Science in Web Development",
      duration: "2013 - 2017",
    },
    {
      id: 3,
      institution: "Online Platforms",
      degree: "Various Certifications in Frontend Development",
      duration: "2018 - Present",
    },
  ];

  return (
    <section id="experience" className="py-20 bg-white dark:bg-gray-800">
      <motion.div
        ref={ref}
        className="container mx-auto px-4"
        initial="hidden"
        animate={controls}
        variants={variants}
      >
        <motion.div variants={childVariants} className="text-center mb-12">
          <motion.p
            className="text-purple-600 dark:text-purple-400 font-medium mb-2"
            whileHover={{ scale: 1.05 }}
          >
            My Background
          </motion.p>
          <motion.h2 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white">
            Experience & Education
          </motion.h2>
          <motion.div
            className="h-1 w-20 bg-gradient-to-r from-purple-600 to-blue-500 mx-auto mt-4"
            whileHover={{ width: "100px", transition: { duration: 0.3 } }}
          />
        </motion.div>

        <motion.div variants={childVariants} className="mb-12">
          <div className="flex justify-center space-x-4">
            <motion.button
              className={`px-6 py-3 rounded-full text-sm font-medium transition-all ${
                activeTab === "experience"
                  ? "bg-gradient-to-r from-purple-600 to-blue-500 text-white"
                  : "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
              }`}
              onClick={() => setActiveTab("experience")}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              Work Experience
            </motion.button>
            <motion.button
              className={`px-6 py-3 rounded-full text-sm font-medium transition-all ${
                activeTab === "education"
                  ? "bg-gradient-to-r from-purple-600 to-blue-500 text-white"
                  : "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
              }`}
              onClick={() => setActiveTab("education")}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              Education
            </motion.button>
          </div>
        </motion.div>

        <AnimatePresence mode="wait">
          {activeTab === "experience" ? (
            <motion.div
              key="experience"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.5 }}
              className="max-w-3xl mx-auto"
            >
              <div className="relative border-l-2 border-purple-500 dark:border-purple-400 pl-8 ml-4">
                {experiences.map((exp, index) => (
                  <motion.div
                    key={exp.id}
                    className="mb-12 last:mb-0"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.2 }}
                  >
                    <div className="absolute w-4 h-4 bg-purple-500 dark:bg-purple-400 rounded-full -left-[9px] mt-1 transform -translate-x-1/2"></div>
                    <div className="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
                      <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-1">
                        {exp.position}
                      </h3>
                      <div className="flex items-center mb-4">
                        <span className="text-purple-600 dark:text-purple-400 font-medium">
                          {exp.company}
                        </span>
                        <span className="mx-2 text-gray-400">•</span>
                        <span className="text-gray-500 dark:text-gray-400 text-sm">
                          {exp.duration}
                        </span>
                      </div>
                      <ul className="list-disc list-inside text-gray-600 dark:text-gray-300 space-y-2">
                        {exp.description.map((item, itemIndex) => (
                          <li key={itemIndex}>{item}</li>
                        ))}
                      </ul>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          ) : (
            <motion.div
              key="education"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.5 }}
              className="max-w-3xl mx-auto"
            >
              <div className="relative border-l-2 border-blue-500 dark:border-blue-400 pl-8 ml-4">
                {education.map((edu, index) => (
                  <motion.div
                    key={edu.id}
                    className="mb-12 last:mb-0"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.2 }}
                  >
                    <div className="absolute w-4 h-4 bg-blue-500 dark:bg-blue-400 rounded-full -left-[9px] mt-1 transform -translate-x-1/2"></div>
                    <div className="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
                      <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-1">
                        {edu.degree}
                      </h3>
                      <div className="flex items-center mb-4">
                        <span className="text-blue-600 dark:text-blue-400 font-medium">
                          {edu.institution}
                        </span>
                        <span className="mx-2 text-gray-400">•</span>
                        <span className="text-gray-500 dark:text-gray-400 text-sm">
                          {edu.duration}
                        </span>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </section>
  );
};

const ContactSection = () => {
  const controls = useAnimation();
  const ref = useRef(null);
  const [formData, setFormData] = useState<ContactFormData>({
    name: "",
    email: "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [formErrors, setFormErrors] = useState<Partial<ContactFormData>>({});

  useEffect(() => {
    const currentRef = ref.current;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          controls.start("visible");
        }
      },
      { threshold: 0.1 }
    );

    if (currentRef) {
      observer.observe(currentRef);
    }

    return () => {
      if (currentRef) {
        observer.unobserve(currentRef);
      }
    };
  }, [controls]);

  const variants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        staggerChildren: 0.2,
      },
    },
  };

  const childVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });

    // Clear error for this field when user types
    if (formErrors[name as keyof ContactFormData]) {
      setFormErrors({
        ...formErrors,
        [name]: undefined,
      });
    }
  };

  const validateForm = () => {
    const errors: Partial<ContactFormData> = {};
    if (!formData.name.trim()) {
      errors.name = "Name is required";
    }
    if (!formData.email.trim()) {
      errors.email = "Email is required";
    } else if (!/^\S+@\S+\.\S+$/.test(formData.email)) {
      errors.email = "Email is invalid";
    }
    if (!formData.message.trim()) {
      errors.message = "Message is required";
    }
    return errors;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    setIsSubmitting(true);

    // Simulate form submission
    setTimeout(() => {
      setIsSubmitting(false);
      setIsSubmitted(true);
      // Reset form after submission
      setFormData({ name: "", email: "", message: "" });

      // Reset submission status after 5 seconds
      setTimeout(() => {
        setIsSubmitted(false);
      }, 5000);
    }, 2000);
  };

  return (
    <section id="contact" className="py-20 bg-gray-50 dark:bg-gray-900">
      <motion.div
        ref={ref}
        className="container mx-auto px-4"
        initial="hidden"
        animate={controls}
        variants={variants}
      >
        <motion.div variants={childVariants} className="text-center mb-12">
          <motion.p
            className="text-purple-600 dark:text-purple-400 font-medium mb-2"
            whileHover={{ scale: 1.05 }}
          >
            Get In Touch
          </motion.p>
          <motion.h2 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white">
            Contact Me
          </motion.h2>
          <motion.div
            className="h-1 w-20 bg-gradient-to-r from-purple-600 to-blue-500 mx-auto mt-4"
            whileHover={{ width: "100px", transition: { duration: 0.3 } }}
          />
        </motion.div>

        <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12">
          <motion.div variants={childVariants}>
            <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg">
              <h3 className="text-2xl font-bold mb-6 text-gray-800 dark:text-white">
                Lets Start a Conversation
              </h3>
              <p className="text-gray-600 dark:text-gray-300 mb-8">
                Im interested in freelance opportunities – especially ambitious
                or large projects. However, if you have other requests or
                questions, dont hesitate to contact me.
              </p>

              <div className="space-y-6">
                <div className="flex items-start">
                  <div className="w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center text-purple-600 dark:text-purple-400 mr-4">
                    <Mail size={24} />
                  </div>
                  <div>
                    <h4 className="text-lg font-medium text-gray-800 dark:text-white mb-1">
                      Email
                    </h4>
                    <a
                      href="mailto:hello@example.com"
                      className="text-gray-600 dark:text-gray-300 hover:text-purple-600 dark:hover:text-purple-400 transition-colors"
                    >
                      hello@example.com
                    </a>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center text-blue-600 dark:text-blue-400 mr-4">
                    <Linkedin size={24} />
                  </div>
                  <div>
                    <h4 className="text-lg font-medium text-gray-800 dark:text-white mb-1">
                      LinkedIn
                    </h4>
                    <a
                      href="https://linkedin.com/in/username"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                    >
                      linkedin.com/in/username
                    </a>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="w-12 h-12 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center text-gray-600 dark:text-gray-300 mr-4">
                    <Github size={24} />
                  </div>
                  <div>
                    <h4 className="text-lg font-medium text-gray-800 dark:text-white mb-1">
                      GitHub
                    </h4>
                    <a
                      href="https://github.com/username"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white transition-colors"
                    >
                      github.com/username
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>

          <motion.div variants={childVariants}>
            <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg">
              <h3 className="text-2xl font-bold mb-6 text-gray-800 dark:text-white">
                Send Me a Message
              </h3>

              {isSubmitted ? (
                <motion.div
                  className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-900 rounded-lg p-6 text-center"
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="w-16 h-16 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="w-8 h-8 text-green-500 dark:text-green-400"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M5 13l4 4L19 7"
                      />
                    </svg>
                  </div>
                  <h4 className="text-xl font-medium text-gray-800 dark:text-white mb-2">
                    Message Sent!
                  </h4>
                  <p className="text-gray-600 dark:text-gray-300">
                    Thank you for your message. Ill get back to you as soon as
                    possible.
                  </p>
                </motion.div>
              ) : (
                <form onSubmit={handleSubmit}>
                  <div className="space-y-6">
                    <div>
                      <label
                        htmlFor="name"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                      >
                        Name
                      </label>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        className={`w-full px-4 py-3 rounded-lg border ${
                          formErrors.name
                            ? "border-red-500 dark:border-red-500"
                            : "border-gray-300 dark:border-gray-700"
                        } bg-white dark:bg-gray-900 text-gray-800 dark:text-white focus:outline-none focus:ring-2 focus:ring-purple-500 dark:focus:ring-purple-400 transition-colors`}
                        placeholder="Your Name"
                      />
                      {formErrors.name && (
                        <p className="mt-1 text-sm text-red-500">
                          {formErrors.name}
                        </p>
                      )}
                    </div>

                    <div>
                      <label
                        htmlFor="email"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                      >
                        Email
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        className={`w-full px-4 py-3 rounded-lg border ${
                          formErrors.email
                            ? "border-red-500 dark:border-red-500"
                            : "border-gray-300 dark:border-gray-700"
                        } bg-white dark:bg-gray-900 text-gray-800 dark:text-white focus:outline-none focus:ring-2 focus:ring-purple-500 dark:focus:ring-purple-400 transition-colors`}
                        placeholder="Your Email"
                      />
                      {formErrors.email && (
                        <p className="mt-1 text-sm text-red-500">
                          {formErrors.email}
                        </p>
                      )}
                    </div>

                    <div>
                      <label
                        htmlFor="message"
                        className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                      >
                        Message
                      </label>
                      <textarea
                        id="message"
                        name="message"
                        value={formData.message}
                        onChange={handleChange}
                        rows={5}
                        className={`w-full px-4 py-3 rounded-lg border ${
                          formErrors.message
                            ? "border-red-500 dark:border-red-500"
                            : "border-gray-300 dark:border-gray-700"
                        } bg-white dark:bg-gray-900 text-gray-800 dark:text-white focus:outline-none focus:ring-2 focus:ring-purple-500 dark:focus:ring-purple-400 transition-colors`}
                        placeholder="Your Message"
                      />
                      {formErrors.message && (
                        <p className="mt-1 text-sm text-red-500">
                          {formErrors.message}
                        </p>
                      )}
                    </div>

                    <motion.button
                      type="submit"
                      disabled={isSubmitting}
                      className={`w-full px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-500 text-white rounded-lg font-medium flex items-center justify-center gap-2 ${
                        isSubmitting
                          ? "opacity-70 cursor-not-allowed"
                          : "hover:opacity-90"
                      } transition`}
                      whileHover={!isSubmitting ? { scale: 1.02 } : undefined}
                      whileTap={!isSubmitting ? { scale: 0.98 } : undefined}
                    >
                      {isSubmitting ? (
                        <>
                          <svg
                            className="animate-spin -ml-1 mr-2 h-5 w-5 text-white"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                          >
                            <circle
                              className="opacity-25"
                              cx="12"
                              cy="12"
                              r="10"
                              stroke="currentColor"
                              strokeWidth="4"
                            ></circle>
                            <path
                              className="opacity-75"
                              fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            ></path>
                          </svg>
                          Sending...
                        </>
                      ) : (
                        <>
                          Send Message <Send size={16} />
                        </>
                      )}
                    </motion.button>
                  </div>
                </form>
              )}
            </div>
          </motion.div>
        </div>
      </motion.div>
    </section>
  );
};

const Footer = () => {
  return (
    <footer className="bg-gray-900 text-white py-12">
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row justify-between items-center gap-6">
          <div>
            <motion.div
              className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent"
              whileHover={{ scale: 1.05 }}
            >
              Youralpha
            </motion.div>
            <p className="text-gray-400 mt-2">
              Creating digital experiences that inspire.
            </p>
          </div>

          <div className="flex flex-col items-center md:items-end">
            <div className="flex gap-4 mb-4">
              {[
                {
                  icon: <Github className="w-5 h-5" />,
                  url: "https://github.com",
                },
                {
                  icon: <Linkedin className="w-5 h-5" />,
                  url: "https://linkedin.com",
                },
                {
                  icon: <Twitter className="w-5 h-5" />,
                  url: "https://twitter.com",
                },
              ].map((social, index) => (
                <motion.a
                  key={index}
                  href={social.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="w-10 h-10 rounded-full flex items-center justify-center border border-gray-700 text-gray-400 hover:border-purple-500 hover:text-purple-400 transition"
                  whileHover={{ y: -3, scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  {social.icon}
                </motion.a>
              ))}
            </div>
            <p className="text-gray-500 text-sm">
              © {new Date().getFullYear()} John Doe. All rights reserved.
            </p>
          </div>
        </div>

        <motion.div
          className="mt-8 pt-6 border-t border-gray-800 text-center"
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ delay: 0.5 }}
        >
          <motion.a
            href="#home"
            className="w-10 h-10 bg-gray-800 rounded-full flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700 transition mx-auto"
            whileHover={{ y: -5 }}
            whileTap={{ scale: 0.9 }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-5 h-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M5 15l7-7 7 7"
              />
            </svg>
          </motion.a>
        </motion.div>
      </div>
    </footer>
  );
};

// MAIN COMPONENT
const HomePage = () => {
  const [darkMode, setDarkMode] = useState(false);

  // Theme toggle
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  // Apply dark mode class to body
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, [darkMode]);

  // Check user's preferred color scheme
  useEffect(() => {
    if (typeof window !== "undefined") {
      const isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      setDarkMode(isDark);
    }
  }, []);

  // Scroll to section when hash changes
  useEffect(() => {
    const handleHashChange = () => {
      const hash = window.location.hash;
      if (hash) {
        const element = document.querySelector(hash);
        if (element) {
          // Add offset for fixed header
          const offsetTop =
            element.getBoundingClientRect().top + window.pageYOffset - 80;
          window.scrollTo({
            top: offsetTop,
            behavior: "smooth",
          });
        }
      }
    };

    // Handle initial hash
    handleHashChange();

    // Listen for hash changes
    window.addEventListener("hashchange", handleHashChange);
    return () => window.removeEventListener("hashchange", handleHashChange);
  }, []);

  // Smooth scroll for all anchor links
  useEffect(() => {
    const handleClick = (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      const anchor = target.closest('a[href^="#"]');

      if (anchor) {
        const href = anchor.getAttribute("href");
        if (href) {
          e.preventDefault();
          const element = document.querySelector(href);
          if (element) {
            const offsetTop =
              element.getBoundingClientRect().top + window.pageYOffset - 80;
            window.scrollTo({
              top: offsetTop,
              behavior: "smooth",
            });
            // Update URL without page reload
            history.pushState(null, "", href);
          }
        }
      }
    };

    document.addEventListener("click", handleClick);
    return () => document.removeEventListener("click", handleClick);
  }, []);

  return (
    <div className="min-h-screen font-sans bg-white dark:bg-gray-900 text-gray-800 dark:text-white transition-colors duration-300">
      <Navbar darkMode={darkMode} toggleDarkMode={toggleDarkMode} />
      <HeroSection />
      <AboutSection />
      <SkillsSection />
      <ProjectsSection />
      <ExperienceSection />
      <ContactSection />
      <Footer />

      {/* Back to top button - fixed */}
      <motion.button
        className="fixed bottom-8 right-8 w-12 h-12 rounded-full bg-gradient-to-r from-purple-600 to-blue-500 text-white shadow-lg flex items-center justify-center z-30 hover:opacity-90 transition"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 1.5 }}
        onClick={() => {
          window.scrollTo({ top: 0, behavior: "smooth" });
        }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="w-6 h-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M5 15l7-7 7 7"
          />
        </svg>
      </motion.button>
    </div>
  );
};

export default HomePage;
