"use client";

// ============================================================================
// IMPORTS & SETUP
// ============================================================================
import React, {
  useState,
  useEffect,
  useCallback,
  useMemo,
  useRef,
  createContext,
  useContext,
} from "react";
import { Chart, registerables, ChartConfiguration, TooltipItem } from "chart.js";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { library, IconDefinition } from "@fortawesome/fontawesome-svg-core";
import { fas } from "@fortawesome/free-solid-svg-icons";
import { fab } from "@fortawesome/free-brands-svg-icons";

// Add all icons explicitly to library (as done in original code)
// Consider code splitting or dynamic imports in a real large app
library.add(
  fas, // Add all solid icons
  fab // Add all brand icons
);

// Register Chart.js components
Chart.register(...registerables);

// ============================================================================
// TYPE DEFINITIONS / INTERFACES
// ============================================================================

interface Skill {
  id: string; // Added ID for key prop
  name: string;
  percentage: number;
  color: string; // Keep Tailwind gradient classes or switch to hex/rgba for chart consistency
  icon?: IconDefinition;
  category: string;
  description: string;
}

interface Certification {
  id: string; // Added ID
  name: string;
  issuer: string;
  date: string;
  icon: IconDefinition; // Use IconDefinition
  credentialId: string;
  expiry?: string;
  skills: string[];
  description: string;
  verificationUrl?: string;
}

interface Education {
  id: string; // Added ID
  institution: string;
  degree: string;
  field: string;
  period: string;
  description: string;
  logo?: string;
  achievements?: string[];
  gpa?: string;
}

interface WorkExperience {
  id: string; // Added ID
  company: string;
  position: string;
  period: string;
  description: string;
  technologies: string[];
  achievements: string[];
  logo?: string;
  location: string;
  type: "full-time" | "part-time" | "freelance" | "contract" | "internship";
  responsibilities: string[];
}

interface Project {
  id: string; // Added ID
  title: string;
  description: string;
  category: string;
  techStack: string[];
  stats: {
    branches: number;
    stars: number;
    views: number;
    forks?: number;
    issues?: number;
  };
  image?: string;
  demoUrl?: string;
  githubUrl?: string;
  features: string[];
  status: "completed" | "in-progress" | "planned";
  startDate: string;
  endDate?: string;
  collaborators?: string[];
  testimonials?: Testimonial[]; // Nested Testimonial type needed
}

interface Achievement {
  id: string; // Added ID
  title: string;
  date: string;
  description: string;
  icon: IconDefinition; // Use IconDefinition
  category: string;
  issuer?: string;
}

interface BlogPost {
  id: string; // Added ID
  title: string;
  excerpt: string;
  date: string;
  tags: string[];
  readTime: string;
  image?: string;
  likes: number;
  comments: number;
  shares: number;
  category: string;
  slug: string;
}

interface Contribution {
  month: string;
  count: number;
}

interface Testimonial {
  id: string; // Added ID
  name: string;
  position: string;
  company: string;
  text: string;
  avatar?: string;
  rating: number; // 1-5 stars
  date: string;
  relation: string;
}

interface Contact {
  id: string; // Added ID
  type: string;
  value: string;
  icon: IconDefinition; // Use IconDefinition
  isPublic: boolean;
}

interface SocialMedia {
  id: string; // Added ID
  platform: string;
  url: string;
  icon: IconDefinition; // Use IconDefinition
  username: string;
}

interface DevStats {
  repos: number;
  stars: number;
  contributions: number;
  rating: string;
  followers: number;
  following: number;
  streak: number;
  commits: number;
}

interface TechStackItem {
  id: string; // Added ID
  name: string;
  icon: IconDefinition; // Use IconDefinition
  proficiency: number; // Scale 1-5 or 0-100? Let's assume 1-5 for simplicity
  category: string;
  yearsOfExperience: number;
}

interface FilterOption {
  category: string; // e.g., 'status', 'tech', 'category'
  value: string;
}

interface SortOption {
  field: keyof Project | `stats.${keyof Project['stats']}` | 'date'; // More specific typing
  order: 'asc' | 'desc';
}

interface Notification {
  id: string;
  title: string;
  message: string;
  type: 'info' | 'success' | 'warning' | 'error';
  date: Date;
  read: boolean;
  actionUrl?: string; // Optional action link
}

type Theme = 'light' | 'dark';
type Language = 'en' | 'id'; // English and Indonesian

interface AccessibilitySettings {
  fontSizeMultiplier: number; // e.g., 1, 1.1, 1.2
  highContrast: boolean;
  reduceMotion: boolean;
}

// ============================================================================
// I18N (Internationalization) Setup (Basic Simulation within this file)
// ============================================================================

interface Translations {
  [key: string]: string | Translations;
}

const translations: Record<Language, Translations> = {
  en: {
    navbar: {
      overview: "Overview",
      projects: "Projects",
      skills: "Skills",
      experience: "Experience",
      education: "Education",
      achievements: "Achievements",
      activity: "Activity",
      blog: "Blog",
      testimonials: "Testimonials",
      contact: "Contact",
    },
    profileHeader: {
      online: "Online",
      contactMe: "Contact Me",
      downloadCV: "Download CV",
    },
    overview: {
      title: "Overview",
      aboutMe: "About Me",
      aboutMeText: "Passionate full-stack developer with 5+ years experience...", // Keep it short here, full text in data
      developerLevel: "Developer Level",
      coreTechStack: "Core Tech Stack",
      viewAll: "View all",
      years: "years",
      achievements: "Achievements",
      contactInfo: "Contact Information",
      personalInfo: "Personal Info",
      location: "Location",
      availability: "Availability",
      availabilityValue: "Full-time Available",
      featuredProjects: "Featured Projects",
    },
    projects: {
        title: "Projects",
        searchPlaceholder: "Search projects...",
        filterByCategory: "Filter by Category",
        filterByTech: "Filter by Tech Stack",
        filterByStatus: "Filter by Status",
        sortBy: "Sort by",
        sort: {
            titleAsc: "Title (A-Z)",
            titleDesc: "Title (Z-A)",
            starsAsc: "Stars (Low-High)",
            starsDesc: "Stars (High-Low)",
            dateAsc: "Date (Old-New)",
            dateDesc: "Date (New-Old)",
        },
        grid: "Grid View",
        list: "List View",
        noProjects: "No projects match your criteria.",
        prev: "Previous",
        next: "Next",
        page: "Page",
        of: "of",
        demo: "Demo",
        repo: "Repo",
        features: "Features",
        techStack: "Tech Stack",
        status: "Status",
        collaborators: "Collaborators",
        close: "Close",
    },
    blog: {
      title: "Blog",
      latestPosts: "Latest Posts",
      readMore: "Read More",
      tags: "Tags",
      loading: "Loading posts...", // For skeleton
      minutesRead: "min read",
      likes: "Likes",
      comments: "Comments",
      shares: "Shares",
    },
    // Add more sections (skills, experience, etc.) and keys as needed
    contactForm: {
        title: "Get In Touch",
        name: "Name",
        email: "Email",
        subject: "Subject",
        message: "Message",
        send: "Send Message",
        sending: "Sending...",
        successTitle: "Message Sent",
        successMessage: "Your message has been sent successfully. I'll get back to you soon!",
        errorTitle: "Error Sending",
        errorMessage: "Something went wrong. Please try again later.",
    },
     accessibility: {
        menuTitle: "Accessibility Options",
        fontSize: "Font Size",
        increase: "Increase",
        decrease: "Decrease",
        reset: "Reset",
        highContrast: "High Contrast",
        reduceMotion: "Reduce Motion",
        on: "On",
        off: "Off",
    },
  },
  id: {
    navbar: {
      overview: "Ringkasan",
      projects: "Proyek",
      skills: "Keahlian",
      experience: "Pengalaman",
      education: "Pendidikan",
      achievements: "Pencapaian",
      activity: "Aktivitas",
      blog: "Blog",
      testimonials: "Testimoni",
      contact: "Kontak",
    },
    profileHeader: {
      online: "Online",
      contactMe: "Hubungi Saya",
      downloadCV: "Unduh CV",
    },
    overview: {
      title: "Ringkasan",
      aboutMe: "Tentang Saya",
      aboutMeText: "Pengembang full-stack yang bersemangat dengan pengalaman 5+ tahun...", // Terjemahkan
      developerLevel: "Level Pengembang",
      coreTechStack: "Teknologi Inti",
      viewAll: "Lihat semua",
      years: "tahun",
      achievements: "Pencapaian",
      contactInfo: "Informasi Kontak",
      personalInfo: "Info Pribadi",
      location: "Lokasi",
      availability: "Ketersediaan",
      availabilityValue: "Tersedia Purna Waktu",
      featuredProjects: "Proyek Unggulan",
    },
    projects: {
        title: "Proyek",
        searchPlaceholder: "Cari proyek...",
        filterByCategory: "Filter berdasarkan Kategori",
        filterByTech: "Filter berdasarkan Teknologi",
        filterByStatus: "Filter berdasarkan Status",
        sortBy: "Urutkan berdasarkan",
        sort: {
            titleAsc: "Judul (A-Z)",
            titleDesc: "Judul (Z-A)",
            starsAsc: "Bintang (Rendah-Tinggi)",
            starsDesc: "Bintang (Tinggi-Rendah)",
            dateAsc: "Tanggal (Lama-Baru)",
            dateDesc: "Tanggal (Baru-Lama)",
        },
        grid: "Tampilan Grid",
        list: "Tampilan Daftar",
        noProjects: "Tidak ada proyek yang sesuai kriteria Anda.",
        prev: "Sebelumnya",
        next: "Berikutnya",
        page: "Halaman",
        of: "dari",
        demo: "Demo",
        repo: "Repo",
        features: "Fitur",
        techStack: "Teknologi",
        status: "Status",
        collaborators: "Kolaborator",
        close: "Tutup",
    },
    blog: {
      title: "Blog",
      latestPosts: "Postingan Terbaru",
      readMore: "Baca Selengkapnya",
      tags: "Tag",
      loading: "Memuat postingan...", // For skeleton
      minutesRead: "menit baca",
      likes: "Suka",
      comments: "Komentar",
      shares: "Bagikan",
    },
     contactForm: {
        title: "Hubungi Saya",
        name: "Nama",
        email: "Email",
        subject: "Subjek",
        message: "Pesan",
        send: "Kirim Pesan",
        sending: "Mengirim...",
        successTitle: "Pesan Terkirim",
        successMessage: "Pesan Anda telah berhasil dikirim. Saya akan segera menghubungi Anda!",
        errorTitle: "Gagal Mengirim",
        errorMessage: "Terjadi kesalahan. Silakan coba lagi nanti.",
    },
    accessibility: {
        menuTitle: "Opsi Aksesibilitas",
        fontSize: "Ukuran Font",
        increase: "Perbesar",
        decrease: "Perkecil",
        reset: "Reset",
        highContrast: "Kontras Tinggi",
        reduceMotion: "Kurangi Gerakan",
        on: "Aktif",
        off: "Nonaktif",
    },
    // ... Terjemahkan sisanya
  },
};

// Simple t function simulator
const useTranslation = (lang: Language) => {
  const t = useCallback(
    (key: string, options?: { [key: string]: string | number }): string => {
      const keys = key.split(".");
      let result: string | Translations | undefined = translations[lang];
      for (const k of keys) {
        if (result && typeof result === "object" && k in result) {
          result = result[k];
        } else {
          return key; // Return key if not found
        }
      }
      if (typeof result === "string") {
          // Basic interpolation
          if (options) {
              Object.entries(options).forEach(([k, v]) => {
                result = (result as string).replace(`{{${k}}}`, String(v));
              });
          }
        return result;
      }
      return key; // Return key if path leads to object
    },
    [lang]
  );
  return { t, currentLanguage: lang };
};

// ============================================================================
// CONTEXT DEFINITIONS (Theme, Language, Accessibility)
// ============================================================================

// --- Theme Context ---
interface ThemeContextProps {
  theme: Theme;
  setTheme: (theme: Theme) => void;
}
const ThemeContext = createContext<ThemeContextProps | undefined>(undefined);

const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};

const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [theme, setThemeState] = useState<Theme>('dark'); // Default to dark

  useEffect(() => {
    // Load theme from local storage on mount
    const savedTheme = localStorage.getItem('portfolio-theme') as Theme | null;
    if (savedTheme && ['light', 'dark'].includes(savedTheme)) {
      setThemeState(savedTheme);
    } else {
        // Optional: check system preference
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        setThemeState(prefersDark ? 'dark' : 'light');
    }
  }, []);

  useEffect(() => {
    // Apply theme class to HTML element and save to local storage
    const root = window.document.documentElement;
    root.classList.remove(theme === 'light' ? 'dark' : 'light');
    root.classList.add(theme);
    localStorage.setItem('portfolio-theme', theme);
  }, [theme]);

  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
  };

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// --- Language Context ---
interface LanguageContextProps {
  language: Language;
  setLanguage: (language: Language) => void;
  t: (key: string, options?: { [key: string]: string | number }) => string;
}
const LanguageContext = createContext<LanguageContextProps | undefined>(undefined);

const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
};

const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguageState] = useState<Language>('en'); // Default to English
  const { t } = useTranslation(language); // Get the t function based on current language

  useEffect(() => {
    // Load language from local storage on mount
    const savedLang = localStorage.getItem('portfolio-language') as Language | null;
    if (savedLang && ['en', 'id'].includes(savedLang)) {
      setLanguageState(savedLang);
    }
    // Could add browser language detection as fallback
  }, []);

  const setLanguage = (newLanguage: Language) => {
    setLanguageState(newLanguage);
    localStorage.setItem('portfolio-language', newLanguage);
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

// --- Accessibility Context ---
interface AccessibilityContextProps {
  settings: AccessibilitySettings;
  updateSetting: <K extends keyof AccessibilitySettings>(
    key: K,
    value: AccessibilitySettings[K]
  ) => void;
  increaseFontSize: () => void;
  decreaseFontSize: () => void;
  resetFontSize: () => void;
  toggleHighContrast: () => void;
  toggleReduceMotion: () => void;
}
const AccessibilityContext = createContext<AccessibilityContextProps | undefined>(
  undefined
);

const useAccessibility = () => {
  const context = useContext(AccessibilityContext);
  if (!context) {
    throw new Error("useAccessibility must be used within an AccessibilityProvider");
  }
  return context;
};

const AccessibilityProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [settings, setSettings] = useState<AccessibilitySettings>({
    fontSizeMultiplier: 1,
    highContrast: false,
    reduceMotion: false,
  });

  useEffect(() => {
     // Load settings from local storage
     const savedSettings = localStorage.getItem('portfolio-accessibility');
     if (savedSettings) {
         try {
             const parsed = JSON.parse(savedSettings);
             // Basic validation
             if (typeof parsed.fontSizeMultiplier === 'number' &&
                 typeof parsed.highContrast === 'boolean' &&
                 typeof parsed.reduceMotion === 'boolean') {
                 setSettings(parsed);
             }
         } catch (e) {
             console.error("Failed to parse accessibility settings:", e);
         }
     }
  }, []);

  useEffect(() => {
      // Apply settings to the document body or root element
      const body = document.body;
      body.style.fontSize = `${settings.fontSizeMultiplier * 100}%`; // Apply base font size multiplier

      if (settings.highContrast) {
          body.classList.add('high-contrast'); // Add class for CSS overrides
      } else {
          body.classList.remove('high-contrast');
      }

      if (settings.reduceMotion) {
          body.classList.add('reduce-motion'); // Add class for CSS overrides
      } else {
          body.classList.remove('reduce-motion');
      }

      // Save settings to local storage
      localStorage.setItem('portfolio-accessibility', JSON.stringify(settings));

  }, [settings]);

  const updateSetting = <K extends keyof AccessibilitySettings>(
    key: K,
    value: AccessibilitySettings[K]
  ) => {
    setSettings((prev) => ({ ...prev, [key]: value }));
  };

   const increaseFontSize = () => {
       updateSetting('fontSizeMultiplier', Math.min(settings.fontSizeMultiplier + 0.1, 1.5)); // Cap at 150%
   };

   const decreaseFontSize = () => {
       updateSetting('fontSizeMultiplier', Math.max(settings.fontSizeMultiplier - 0.1, 0.8)); // Floor at 80%
   };

   const resetFontSize = () => {
       updateSetting('fontSizeMultiplier', 1);
   };

    const toggleHighContrast = () => {
        updateSetting('highContrast', !settings.highContrast);
    };

    const toggleReduceMotion = () => {
        updateSetting('reduceMotion', !settings.reduceMotion);
    };

  return (
    <AccessibilityContext.Provider value={{ settings, updateSetting, increaseFontSize, decreaseFontSize, resetFontSize, toggleHighContrast, toggleReduceMotion }}>
      {children}
    </AccessibilityContext.Provider>
  );
};


// ============================================================================
// DATA (Hardcoded, move to API or separate file in real app)
// ============================================================================

const PROFILE_DATA = {
  username: "Youralpha",
  handle: "@eno4lph_",
  level: 99,
  title: "Senior Full Stack Developer",
  location: "San Francisco, CA",
  availability: "Full-time Available",
  profileImageUrl: "/image/r10.jpg",
  coverImageUrl: "/image/r6.jpg",
  aboutMe: "Passionate full-stack developer with 5+ years experience in building scalable web applications. Specialized in React, Node.js, and Laravel ecosystems with a strong focus on delivering high-performance, user-friendly solutions. Devoted to clean code, accessibility, and staying updated with the latest tech trends. Always eager to tackle challenging problems and contribute to innovative projects.",
  devStats: {
      repos: 20,
      stars: 199,
      contributions: 498,
      rating: "4.9/5", // Maybe calculate this based on testimonials or project feedback?
      followers: 358,
      following: 125,
      streak: 87, // GitHub contribution streak
      commits: 1245,
  } as DevStats,

  skillsData: [
    { id: "s1", name: "PHP", percentage: 92, color: "from-blue-600 to-indigo-500", icon: fab.faLaravel, category: "backend", description: "Expert in building scalable applications with PHP 8, Laravel, and Symfony frameworks." },
    { id: "s2", name: "JavaScript", percentage: 85, color: "from-yellow-500 to-amber-500", icon: fab.faJsSquare, category: "frontend", description: "Proficient in modern JavaScript, ES6+, TypeScript, and various JS frameworks." },
    { id: "s3", name: "React", percentage: 88, color: "from-blue-400 to-cyan-300", icon: fab.faReact, category: "frontend", description: "Advanced knowledge of React.js, Redux, Context API, and React Hooks." },
    { id: "s4", name: "Node.js", percentage: 82, color: "from-green-500 to-emerald-400", icon: fab.faNode, category: "backend", description: "Strong experience with Node.js, Express, and serverless architectures." },
    { id: "s5", name: "Python", percentage: 75, color: "from-blue-500 to-purple-500", icon: fab.faPython, category: "backend", description: "Proficient in Python for web development, data analysis, and automation." },
    { id: "s6", name: "Docker", percentage: 79, color: "from-blue-500 to-cyan-400", icon: fab.faDocker, category: "devops", description: "Expert in containerization, Docker Compose, and container orchestration." },
    { id: "s7", name: "AWS", percentage: 72, color: "from-orange-500 to-amber-400", icon: fab.faAws, category: "devops", description: "Certified AWS Developer with experience in EC2, S3, Lambda, and CloudFormation." },
    { id: "s8", name: "HTML/CSS", percentage: 90, color: "from-red-500 to-orange-400", icon: fab.faHtml5, category: "frontend", description: "Expert in semantic HTML5, CSS3, SASS/SCSS, and responsive web design." },
    { id: "s9", name: "SQL", percentage: 83, color: "from-blue-600 to-blue-400", icon: fas.faDatabase, category: "database", description: "Proficient in SQL query optimization, database design, and management." },
    { id: "s10", name: "MongoDB", percentage: 77, color: "from-green-600 to-green-400", icon: fas.faDatabase, category: "database", description: "Experienced in MongoDB schema design, aggregation, and performance optimization." },
    { id: "s11", name: "CI/CD", percentage: 81, color: "from-purple-600 to-indigo-400", icon: fas.faCodeBranch, category: "devops", description: "Expert in setting up CI/CD pipelines with GitHub Actions, Jenkins, and GitLab CI." },
    { id: "s12", name: "Git", percentage: 95, color: "from-orange-600 to-red-500", icon: fab.faGitAlt, category: "tools", description: "Advanced Git workflow management, branching strategies, and version control." }
  ] as Skill[],

  certifications: [
    { id: "c1", name: "AWS Certified Developer - Associate", issuer: "Amazon Web Services", date: "2024-01", icon: fab.faAws, credentialId: "AWS-DEV-12345", expiry: "2027-01", skills: ["EC2", "S3", "Lambda", "DynamoDB", "CloudFormation"], description: "Validates technical expertise in developing and maintaining AWS-based applications." },
    { id: "c2", name: "Laravel Certified Developer", issuer: "Laravel", date: "2023-05", icon: fab.faLaravel, credentialId: "LCD-67890", skills: ["PHP", "Laravel", "MVC", "Eloquent ORM", "Blade"], description: "Certifies proficiency in developing applications using the Laravel framework." },
    { id: "c3", name: "React Professional Developer", issuer: "React Certification Board", date: "2023-11", icon: fab.faReact, credentialId: "RPD-24680", skills: ["React", "Redux", "React Hooks", "Context API", "NextJS"], description: "Demonstrates advanced knowledge of React.js and related technologies." },
    { id: "c4", name: "Certified Kubernetes Administrator", issuer: "Cloud Native Computing Foundation", date: "2023-08", icon: fas.faServer, credentialId: "CKA-13579", expiry: "2026-08", skills: ["Kubernetes", "Container Orchestration", "Docker", "Microservices"], description: "Validates skills, knowledge and competency to perform the responsibilities of a Kubernetes Administrator." },
    { id: "c5", name: "MongoDB Professional Developer", issuer: "MongoDB, Inc.", date: "2022-12", icon: fas.faDatabase, credentialId: "MDB-97531", skills: ["MongoDB", "NoSQL", "Database Design", "Aggregation", "Indexing"], description: "Certifies advanced knowledge of MongoDB database development and optimization." }
  ] as Certification[],

  educationData: [
    { id: "e1", institution: "Stanford University", degree: "Master of Science", field: "Computer Science", period: "2020 - 2022", description: "Specialized in Artificial Intelligence and Machine Learning with focus on Natural Language Processing.", gpa: "3.92/4.0", achievements: ["Graduated with Distinction", "Published research paper on NLP techniques", "Teaching Assistant for Advanced Algorithms course"] },
    { id: "e2", institution: "University of California, Berkeley", degree: "Bachelor of Science", field: "Computer Engineering", period: "2016 - 2020", description: "Focus on software engineering principles and distributed systems.", gpa: "3.85/4.0", achievements: ["Dean's List all semesters", "Capstone project: Distributed file system with Byzantine fault tolerance", "Member of ACM and IEEE student chapters"] }
  ] as Education[],

  workExperience: [
    { id: "w1", company: "Tech Innovators Inc.", position: "Senior Full Stack Developer", period: "Jan 2023 - Present", description: "Leading development of enterprise applications using modern web technologies.", technologies: ["React", "Node.js", "TypeScript", "AWS", "GraphQL"], achievements: ["Reduced application load time by 60% through code optimization", "Implemented CI/CD pipeline that decreased deployment time by 75%", "Led migration from monolith to microservices architecture"], location: "San Francisco, CA", type: "full-time", responsibilities: ["Architect and develop scalable web applications", "Lead a team of 5 developers and mentor junior engineers", "Design and implement database schemas and APIs", "Collaborate with product managers and UX designers", "Perform code reviews and ensure code quality"] },
    { id: "w2", company: "GlobalSoft Solutions", position: "Full Stack Developer", period: "Apr 2021 - Dec 2022", description: "Developed and maintained e-commerce applications for enterprise clients.", technologies: ["Laravel", "Vue.js", "MySQL", "Docker", "Redis"], achievements: ["Built a real-time inventory management system", "Implemented payment gateway integrations", "Optimized database queries"], location: "Boston, MA", type: "full-time", responsibilities: ["Developed custom e-commerce solutions", "Created RESTful APIs", "Implemented caching strategies", "Participated in Agile development", "Troubleshooted production issues"] },
    { id: "w3", company: "Startech Innovations", position: "Backend Developer", period: "Jun 2020 - Mar 2021", description: "Worked on cloud-based SaaS platform for financial analytics.", technologies: ["Python", "Django", "PostgreSQL", "AWS Lambda", "Kubernetes"], achievements: ["Developed data processing pipeline", "Implemented secure API authentication", "Reduced server costs"], location: "New York, NY", type: "full-time", responsibilities: ["Designed backend services", "Optimized database performance", "Integrated external APIs", "Developed automated tests", "Created technical documentation"] }
  ] as WorkExperience[],

  projects: [
    { id: "p1", title: "Tokoeno E-Commerce", description: "A comprehensive e-commerce solution...", category: "Full Stack", techStack: ["Next.js", "Prisma", "PostgreSQL", "Stripe", "AWS"], stats: { branches: 25, stars: 145, views: 320, forks: 42, issues: 12 }, features: ["Real-time inventory", "Multi-payment gateway", "Analytics dashboard", "Responsive design", "Multi-vendor support"], status: "completed", startDate: "2023-02", endDate: "2023-11", demoUrl: "https://tokoeno-demo.vercel.app", githubUrl: "https://github.com/youralpha/tokoeno", image: "/image/projects/tokoeno.jpg" }, // Add image paths
    { id: "p2", title: "DevTracker", description: "Developer productivity and project management tool...", category: "Web Application", techStack: ["React", "Node.js", "MongoDB", "GitHub API", "Docker"], stats: { branches: 18, stars: 92, views: 240, forks: 28, issues: 7 }, features: ["GitHub integration", "Time tracking", "Sprint planning", "Code metrics", "Team collaboration"], status: "in-progress", startDate: "2023-06", collaborators: ["@techdev", "@codemaster"], image: "/image/projects/devtracker.jpg" },
    { id: "p3", title: "AIAcademy", description: "Interactive platform for learning AI...", category: "Education", techStack: ["Vue.js", "Flask", "TensorFlow.js", "Python", "Firebase"], stats: { branches: 15, stars: 210, views: 560, forks: 65, issues: 22 }, features: ["Interactive coding", "AI visualization", "Learning paths", "Code execution", "Community forums"], status: "completed", startDate: "2022-09", endDate: "2023-05", demoUrl: "https://aiacademy.dev", githubUrl: "https://github.com/youralpha/aiacademy", image: "/image/projects/aiacademy.jpg" },
    { id: "p4", title: "CloudStack", description: "Open-source infrastructure management tool...", category: "DevOps", techStack: ["Golang", "Kubernetes", "Terraform", "React", "GraphQL"], stats: { branches: 32, stars: 178, views: 290, forks: 48, issues: 15 }, features: ["Multi-cloud support", "IaC templates", "Cost optimization", "Monitoring dashboard", "Auto scaling"], status: "completed", startDate: "2022-11", endDate: "2023-08", demoUrl: "https://cloudstack.dev", githubUrl: "https://github.com/youralpha/cloudstack", image: "/image/projects/cloudstack.jpg" },
    { id: "p5", title: "DataVizPro", description: "Advanced data visualization library...", category: "Library", techStack: ["TypeScript", "D3.js", "WebGL", "Canvas API", "React"], stats: { branches: 14, stars: 122, views: 310, forks: 26, issues: 9 }, features: ["Interactive viz", "Custom charts", "Real-time data", "Export formats", "Responsive"], status: "in-progress", startDate: "2023-03", collaborators: ["@datascientist", "@vizexpert"], image: "/image/projects/dataviz.jpg" },
    { id: "p6", title: "SecureAuth", description: "Authentication and authorization system...", category: "Security", techStack: ["Node.js", "Express", "JWT", "WebAuthn", "MongoDB"], stats: { branches: 20, stars: 135, views: 280, forks: 35, issues: 11 }, features: ["MFA", "Passwordless login", "OAuth/OpenID", "RBAC", "Audit logging"], status: "completed", startDate: "2022-08", endDate: "2023-02", demoUrl: "https://secureauth.demo.app", githubUrl: "https://github.com/youralpha/secureauth", image: "/image/projects/secureauth.jpg" }
  ] as Project[],

  achievements: [
    { id: "a1", title: "Open Source Contributor of the Year", date: "2023-12", description: "Recognized for significant contributions...", icon: fas.faTrophy, category: "Community", issuer: "GitHub" },
    { id: "a2", title: "Hackathon Winner", date: "2023-10", description: "First place at TechCrunch Disrupt Hackathon...", icon: fas.faMedal, category: "Competition", issuer: "TechCrunch" },
    { id: "a3", title: "1M+ Downloads", date: "2023-08", description: "Personal open source library reached 1 million downloads...", icon: fas.faDownload, category: "Open Source", issuer: "npm" },
    { id: "a4", title: "Tech Speaker", date: "2023-06", description: "Featured speaker at ReactConf...", icon: fas.faUsers, category: "Speaking", issuer: "ReactConf" },
    { id: "a5", title: "Published Author", date: "2023-04", description: "Published technical book on modern web architecture...", icon: fas.faBookOpen, category: "Publication", issuer: "O'Reilly Media" }
  ] as Achievement[],

  blogPosts: [
    { id: "b1", title: "Optimizing React Applications for Performance", excerpt: "Learn advanced techniques...", date: "2024-03-15", tags: ["React", "Performance", "JavaScript"], readTime: "8", likes: 243, comments: 57, shares: 124, category: "Frontend", slug: "optimizing-react-performance", image: "/image/blog/react-perf.jpg" },
    { id: "b2", title: "Building Scalable Backend Systems with Node.js", excerpt: "A comprehensive guide...", date: "2024-02-28", tags: ["Node.js", "Backend", "Scalability"], readTime: "12", likes: 198, comments: 42, shares: 86, category: "Backend", slug: "scalable-nodejs-systems", image: "/image/blog/node-scale.jpg" },
    { id: "b3", title: "The Future of Web Development: What's Coming in 2025", excerpt: "Exploring upcoming trends...", date: "2024-01-10", tags: ["Future", "Trends", "WebDev"], readTime: "10", likes: 312, comments: 94, shares: 178, category: "Industry", slug: "future-web-development-2025", image: "/image/blog/web-future.jpg" },
    { id: "b4", title: "Mastering TypeScript: Advanced Patterns", excerpt: "Take your TypeScript skills...", date: "2023-12-05", tags: ["TypeScript", "Programming", "Best Practices"], readTime: "15", likes: 276, comments: 63, shares: 112, category: "Programming", slug: "mastering-typescript", image: "/image/blog/typescript.jpg" }
  ] as BlogPost[],

  testimonials: [
    { id: "t1", name: "Sarah Johnson", position: "CTO", company: "TechForward Inc.", text: "Working with Youralpha was a game-changer...", rating: 5, date: "2024-02-10", relation: "Client", avatar: "/image/avatars/sarah.jpg" },
    { id: "t2", name: "Michael Chen", position: "Lead Developer", company: "InnovateX", text: "Their code quality and attention to detail are outstanding...", rating: 5, date: "2023-11-15", relation: "Colleague", avatar: "/image/avatars/michael.jpg" },
    { id: "t3", name: "Elena Rodriguez", position: "Product Manager", company: "GlobalTech Solutions", text: "Youralpha brought incredible value...", rating: 4, date: "2023-09-22", relation: "Client", avatar: "/image/avatars/elena.jpg" },
    { id: "t4", name: "David Kim", position: "Startup Founder", company: "NextGenApps", text: "Exceeded all expectations, delivering a product...", rating: 5, date: "2024-01-05", relation: "Client", avatar: "/image/avatars/david.jpg" }
  ] as Testimonial[],

  contacts: [
    { id: "ct1", type: "Email", value: "youralpha@example.com", icon: fas.faEnvelope, isPublic: true },
    { id: "ct2", type: "Website", value: "https://youralpha.dev", icon: fas.faGlobe, isPublic: true },
    { id: "ct3", type: "Phone", value: "+1 (555) 123-4567", icon: fas.faMobileAlt, isPublic: false }, // Keep private
    { id: "ct4", type: "Location", value: "San Francisco, CA", icon: fas.faMapMarkerAlt, isPublic: true } // Added location here
  ] as Contact[],

  socialMedia: [
    { id: "sm1", platform: "GitHub", url: "https://github.com/AlphaIsYour", icon: fab.faGithub, username: "@AlphaIsYour" },
    { id: "sm2", platform: "LinkedIn", url: "https://linkedin.com/in/youralpha", icon: fab.faLinkedin, username: "youralpha" },
    { id: "sm3", platform: "Twitter", url: "https://twitter.com/eno4lph_", icon: fab.faTwitter, username: "@eno4lph_" },
    { id: "sm4", platform: "Medium", url: "https://medium.com/@youralpha", icon: fab.faMedium, username: "@youralpha" },
    { id: "sm5", platform: "Dev.to", url: "https://dev.to/youralpha", icon: fab.faDev, username: "youralpha" }
  ] as SocialMedia[],

  techStack: [
    { id: "ts1", name: "React", icon: fab.faReact, proficiency: 4.5, category: "Frontend", yearsOfExperience: 4 },
    { id: "ts2", name: "Node.js", icon: fab.faNode, proficiency: 4.3, category: "Backend", yearsOfExperience: 3.5 },
    { id: "ts3", name: "Laravel", icon: fab.faLaravel, proficiency: 4.8, category: "Backend", yearsOfExperience: 5 },
    { id: "ts4", name: "AWS", icon: fab.faAws, proficiency: 4.0, category: "DevOps", yearsOfExperience: 3 },
    { id: "ts5", name: "Docker", icon: fab.faDocker, proficiency: 4.2, category: "DevOps", yearsOfExperience: 3.5 },
    { id: "ts6", name: "MongoDB", icon: fas.faDatabase, proficiency: 4.1, category: "Database", yearsOfExperience: 3 },
    { id: "ts7", name: "PostgreSQL", icon: fas.faDatabase, proficiency: 4.4, category: "Database", yearsOfExperience: 4 },
    { id: "ts8", name: "TypeScript", icon: fas.faCode, proficiency: 4.6, category: "Language", yearsOfExperience: 3.5 }
    // Add more...
  ] as TechStackItem[],

   contributions: Array.from({ length: 12 }, (_, i) => ({
      month: new Date(2024, i).toLocaleString("default", { month: "short" }),
      count: Math.floor(Math.random() * 100 + 10), // Ensure some baseline contribution
    })) as Contribution[],
};

// ============================================================================
// HELPER UTILITIES & HOOKS
// ============================================================================

// Simple Debounce Hook (can be more robust)
function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
}

// Scroll Position Hook
function useScrollPosition(): number {
    const [scrollPosition, setScrollPosition] = useState(0);

    useEffect(() => {
        const handleScroll = () => {
            setScrollPosition(window.scrollY);
        };

        window.addEventListener('scroll', handleScroll, { passive: true });
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    return scrollPosition;
}

// Generate Unique ID (Simple)
const generateId = (prefix: string = 'id'): string => `${prefix}-${Math.random().toString(36).substr(2, 9)}`;

// ============================================================================
// REUSABLE UI COMPONENTS (Defined within the same file)
// ============================================================================

// --- Skeleton Loader Component ---
interface SkeletonProps {
  className?: string;
  type?: 'text' | 'title' | 'avatar' | 'thumbnail' | 'block';
  lines?: number; // For text type
}
const Skeleton: React.FC<SkeletonProps> = ({ className = '', type = 'block', lines = 1 }) => {
  const baseClasses = "animate-pulse bg-gray-300 dark:bg-gray-700 rounded";

  if (type === 'text') {
      return (
          <div className={`space-y-2 ${className}`}>
              {Array.from({ length: lines }).map((_, i) => (
                   <div key={i} className={`${baseClasses} h-4 ${i === lines -1 ? 'w-5/6' : 'w-full'}`}></div>
              ))}
          </div>
      );
  }
   if (type === 'title') {
        return <div className={`${baseClasses} h-6 w-3/4 ${className}`}></div>;
    }
    if (type === 'avatar') {
        return <div className={`${baseClasses} h-12 w-12 rounded-full ${className}`}></div>;
    }
    if (type === 'thumbnail') {
        return <div className={`${baseClasses} h-32 w-full ${className}`}></div>;
    }

  // Default block type
  return <div className={`${baseClasses} ${className}`}></div>;
};

// --- Button Component ---
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  icon?: IconDefinition;
  iconPosition?: 'left' | 'right';
  loading?: boolean;
}
const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  icon,
  iconPosition = 'left',
  loading = false,
  className = '',
  disabled,
  ...props
}) => {
    const baseStyles = "inline-flex items-center justify-center font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-900 transition duration-150 ease-in-out";
    const sizeStyles = {
        sm: "px-3 py-1.5 text-sm",
        md: "px-4 py-2 text-base",
        lg: "px-6 py-3 text-lg",
    };
    const variantStyles = {
        primary: "bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500 disabled:bg-blue-400 dark:disabled:bg-blue-800 disabled:cursor-not-allowed",
        secondary: "bg-gray-200 hover:bg-gray-300 text-gray-800 focus:ring-gray-400 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-100 dark:focus:ring-gray-500 disabled:bg-gray-100 dark:disabled:bg-gray-800 disabled:text-gray-400 dark:disabled:text-gray-500 disabled:cursor-not-allowed",
        ghost: "bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300 focus:ring-blue-500",
        danger: "bg-red-600 hover:bg-red-700 text-white focus:ring-red-500 disabled:bg-red-400 disabled:cursor-not-allowed",
    };

    const iconSize = size === 'sm' ? 'xs' : size === 'lg' ? 'lg' : 'sm';
    const iconMargin = children ? (iconPosition === 'left' ? 'mr-2' : 'ml-2') : '';

    const spinner = (
        <svg className={`animate-spin h-5 w-5 text-current ${iconMargin}`} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
    );

    return (
        <button
            className={`${baseStyles} ${sizeStyles[size]} ${variantStyles[variant]} ${className} ${loading ? 'cursor-wait' : ''}`}
            disabled={disabled || loading}
            {...props}
        >
            {loading && iconPosition === 'left' && spinner}
            {!loading && icon && iconPosition === 'left' && <FontAwesomeIcon icon={icon} size={iconSize} className={iconMargin} />}
            {children}
            {!loading && icon && iconPosition === 'right' && <FontAwesomeIcon icon={icon} size={iconSize} className={iconMargin} />}
             {loading && iconPosition === 'right' && spinner}
        </button>
    );
};


// --- Card Component ---
interface CardProps {
    children: React.ReactNode;
    className?: string;
    title?: string;
    titleIcon?: IconDefinition;
    actions?: React.ReactNode; // e.g., buttons or links in the header
}
const Card: React.FC<CardProps> = ({ children, className = '', title, titleIcon, actions }) => {
    return (
        <div className={`bg-white dark:bg-gray-800 shadow-lg rounded-lg overflow-hidden ${className}`}>
            {(title || actions) && (
                <div className="px-4 py-3 sm:px-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                    {title && (
                         <h3 className="text-lg leading-6 font-semibold text-gray-900 dark:text-white flex items-center">
                            {titleIcon && <FontAwesomeIcon icon={titleIcon} className="mr-2 text-blue-500 dark:text-blue-400"/>}
                            {title}
                        </h3>
                    )}
                    {actions && <div className="flex items-center gap-2">{actions}</div>}
                </div>
            )}
            <div className="p-4 sm:p-6">
                {children}
            </div>
        </div>
    );
};


// --- Modal Dialog Component ---
interface ModalProps {
    isOpen: boolean;
    onClose: () => void;
    children: React.ReactNode;
    title?: string;
    size?: 'sm' | 'md' | 'lg' | 'xl';
    className?: string;
}
const Modal: React.FC<ModalProps> = ({ isOpen, onClose, children, title, size = 'md', className = '' }) => {
    const sizeClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl',
    };

    useEffect(() => {
        const handleEsc = (event: KeyboardEvent) => {
           if (event.key === 'Escape') {
              onClose();
           }
        };
        if (isOpen) {
            document.body.style.overflow = 'hidden'; // Prevent background scroll
            window.addEventListener('keydown', handleEsc);
        } else {
            document.body.style.overflow = 'unset';
        }

        return () => {
            window.removeEventListener('keydown', handleEsc);
            document.body.style.overflow = 'unset';
        };
    }, [isOpen, onClose]);

    if (!isOpen) return null;

    return (
        <div
            className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-60 backdrop-blur-sm"
            onClick={onClose} // Close on backdrop click
            role="dialog"
            aria-modal="true"
            aria-labelledby={title ? 'modal-title' : undefined}
        >
            <div
                className={`bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-hidden w-full ${sizeClasses[size]} ${className}`}
                onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside modal
            >
                {/* Header */}
                 <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
                    {title && (
                        <h2 id="modal-title" className="text-lg font-semibold text-gray-900 dark:text-white">
                            {title}
                        </h2>
                    )}
                     <Button variant="ghost" size="sm" onClick={onClose} className="!p-1" aria-label="Close modal">
                        <FontAwesomeIcon icon={fas.faTimes} className="h-5 w-5"/>
                    </Button>
                </div>

                {/* Body */}
                <div className="p-4 max-h-[70vh] overflow-y-auto">
                    {children}
                </div>
            </div>
        </div>
    );
};

// --- Tab Component ---
interface TabItem {
    id: string;
    label: string;
    icon?: IconDefinition;
}
interface TabsProps {
    tabs: TabItem[];
    activeTab: string;
    onTabChange: (tabId: string) => void;
    className?: string;
}
const Tabs: React.FC<TabsProps> = ({ tabs, activeTab, onTabChange, className = '' }) => {
    const { t } = useLanguage(); // Use translation hook

    return (
        <div className={`border-b border-gray-300 dark:border-gray-700 overflow-x-auto scrollbar-hide ${className}`}>
            <nav className="-mb-px flex space-x-6" aria-label="Tabs">
                {tabs.map((tab) => (
                    <button
                        key={tab.id}
                        onClick={() => onTabChange(tab.id)}
                        className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm flex items-center transition-colors duration-150 ease-in-out ${
                            activeTab === tab.id
                                ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-200 dark:hover:border-gray-600'
                        }`}
                        aria-current={activeTab === tab.id ? 'page' : undefined}
                    >
                        {tab.icon && <FontAwesomeIcon icon={tab.icon} className="mr-2 h-4 w-4" />}
                        {/* Translate label - assumes key format 'navbar.tabId' */}
                        {t(`navbar.${tab.id}`)}
                    </button>
                ))}
            </nav>
        </div>
    );
};

// --- Notification Bell & Panel ---
interface NotificationBellProps {
    notifications: Notification[];
    onMarkAsRead: (id: string) => void;
    onClearAll: () => void;
}
const NotificationBell: React.FC<NotificationBellProps> = ({ notifications, onMarkAsRead, onClearAll }) => {
    const [isOpen, setIsOpen] = useState(false);
    const unreadCount = useMemo(() => notifications.filter(n => !n.read).length, [notifications]);
    const panelRef = useRef<HTMLDivElement>(null);

    // Close panel on click outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (panelRef.current && !panelRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    const getIconAndColor = (type: Notification['type']) => {
        switch(type) {
            case 'success': return { icon: fas.faCheckCircle, color: 'text-green-500 dark:text-green-400' };
            case 'warning': return { icon: fas.faExclamationTriangle, color: 'text-yellow-500 dark:text-yellow-400' };
            case 'error': return { icon: fas.faTimesCircle, color: 'text-red-500 dark:text-red-400' };
            case 'info':
            default: return { icon: fas.faInfoCircle, color: 'text-blue-500 dark:text-blue-400' };
        }
    };

    return (
        <div className="relative">
            <button
                onClick={() => setIsOpen(!isOpen)}
                className="relative p-2 rounded-full text-gray-400 hover:text-white dark:hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                aria-label={`View notifications (${unreadCount} unread)`}
            >
                <FontAwesomeIcon icon={fas.faBell} className="h-6 w-6" />
                {unreadCount > 0 && (
                    <span className="absolute top-0 right-0 block h-2.5 w-2.5 rounded-full bg-red-500 ring-2 ring-white dark:ring-gray-800 animate-pulse"></span>
                )}
            </button>

            {/* Notification Panel */}
            {isOpen && (
                <div
                    ref={panelRef}
                    className="absolute right-0 mt-2 w-80 max-w-sm bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-hidden z-40 border border-gray-200 dark:border-gray-700"
                    role="region"
                    aria-label="Notifications"
                >
                    <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                        <h3 className="text-sm font-medium text-gray-900 dark:text-white">Notifications</h3>
                        {notifications.length > 0 && (
                            <Button variant="ghost" size="sm" onClick={onClearAll} className="text-xs">
                                Clear All
                            </Button>
                        )}
                    </div>
                    <div className="max-h-80 overflow-y-auto">
                        {notifications.length === 0 ? (
                             <p className="text-center text-gray-500 dark:text-gray-400 py-6 text-sm">No new notifications</p>
                        ) : (
                             <ul className="divide-y divide-gray-200 dark:divide-gray-700">
                                {notifications.map(notification => {
                                    const { icon, color } = getIconAndColor(notification.type);
                                    return (
                                        <li key={notification.id} className={`p-3 hover:bg-gray-50 dark:hover:bg-gray-750 ${!notification.read ? 'bg-blue-50 dark:bg-blue-900/20' : ''}`}>
                                            <div className="flex items-start space-x-3">
                                                <FontAwesomeIcon icon={icon} className={`flex-shrink-0 h-5 w-5 mt-0.5 ${color}`} />
                                                <div className="flex-1 space-y-1">
                                                    <div className="flex items-center justify-between">
                                                         <h4 className="text-sm font-medium text-gray-900 dark:text-white">{notification.title}</h4>
                                                         <p className="text-xs text-gray-500 dark:text-gray-400">{notification.date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</p>
                                                    </div>
                                                    <p className="text-sm text-gray-600 dark:text-gray-300">{notification.message}</p>
                                                     {!notification.read && (
                                                         <button
                                                            onClick={() => onMarkAsRead(notification.id)}
                                                            className="text-xs text-blue-600 dark:text-blue-400 hover:underline mt-1"
                                                          >
                                                            Mark as read
                                                          </button>
                                                     )}
                                                     {notification.actionUrl && (
                                                         <a href={notification.actionUrl} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-600 dark:text-blue-400 hover:underline mt-1 ml-2">
                                                            View Details
                                                          </a>
                                                     )}
                                                </div>
                                            </div>
                                        </li>
                                    );
                                })}
                             </ul>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};

// --- Theme Toggle Button ---
const ThemeToggle: React.FC = () => {
    const { theme, setTheme } = useTheme();

    const toggleTheme = () => {
        setTheme(theme === 'light' ? 'dark' : 'light');
    };

    return (
        <button
            onClick={toggleTheme}
            className="p-2 rounded-full text-gray-400 hover:text-white dark:hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
            aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
        >
            <FontAwesomeIcon icon={theme === 'light' ? fas.faMoon : fas.faSun} className="h-6 w-6" />
        </button>
    );
};

// --- Language Switcher Dropdown ---
const LanguageSwitcher: React.FC = () => {
    const { language, setLanguage } = useLanguage();
    const [isOpen, setIsOpen] = useState(false);
    const dropdownRef = useRef<HTMLDivElement>(null);

    const languages: { code: Language; name: string, flag: string }[] = [
        { code: 'en', name: 'English', flag: '🇺🇸' },
        { code: 'id', name: 'Indonesia', flag: '🇮🇩' },
    ];

    // Close dropdown on click outside
     useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    const currentLang = languages.find(l => l.code === language);

    return (
        <div className="relative" ref={dropdownRef}>
            <button
                onClick={() => setIsOpen(!isOpen)}
                className="flex items-center p-2 rounded-md text-gray-400 hover:text-white dark:hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                aria-label={`Current language: ${currentLang?.name}. Change language.`}
                aria-haspopup="true"
                aria-expanded={isOpen}
            >
                <span className="mr-1 text-xl">{currentLang?.flag}</span>
                {/* <FontAwesomeIcon icon={fas.faChevronDown} className={`h-4 w-4 ml-1 transition-transform ${isOpen ? 'rotate-180' : ''}`} /> */}
            </button>

            {isOpen && (
                <div
                    className="absolute right-0 mt-2 w-40 bg-white dark:bg-gray-800 rounded-md shadow-lg overflow-hidden z-40 border border-gray-200 dark:border-gray-700"
                    role="menu"
                    aria-orientation="vertical"
                    aria-labelledby="language-menu-button" // Needs button to have id="language-menu-button"
                >
                    <ul className="py-1">
                        {languages.map((lang) => (
                             <li key={lang.code}>
                                <button
                                    onClick={() => {
                                        setLanguage(lang.code);
                                        setIsOpen(false);
                                    }}
                                    className={`w-full text-left px-4 py-2 text-sm flex items-center ${
                                        language === lang.code
                                            ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
                                            : 'text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700'
                                    }`}
                                    role="menuitem"
                                >
                                    <span className="mr-2 text-lg">{lang.flag}</span>
                                    {lang.name}
                                </button>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};

// --- Accessibility Menu ---
const AccessibilityMenu: React.FC = () => {
    const { settings, increaseFontSize, decreaseFontSize, resetFontSize, toggleHighContrast, toggleReduceMotion } = useAccessibility();
    const { t } = useLanguage();
    const [isOpen, setIsOpen] = useState(false);
    const menuRef = useRef<HTMLDivElement>(null);

     // Close menu on click outside
     useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    const renderSwitch = (labelKey: string, checked: boolean, onChange: () => void) => (
        <div className="flex items-center justify-between py-2 px-4">
            <span className="text-sm text-gray-700 dark:text-gray-300">{t(labelKey)}</span>
            <button
                onClick={onChange}
                className={`relative inline-flex items-center h-6 rounded-full w-11 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-900 transition-colors ${checked ? 'bg-blue-600' : 'bg-gray-300 dark:bg-gray-600'}`}
                role="switch"
                aria-checked={checked}
            >
                <span className={`inline-block w-4 h-4 transform bg-white rounded-full transition-transform ${checked ? 'translate-x-6' : 'translate-x-1'}`}/>
            </button>
        </div>
    );

    return (
        <div className="relative" ref={menuRef}>
            <button
                 onClick={() => setIsOpen(!isOpen)}
                 className="p-2 rounded-full text-gray-400 hover:text-white dark:hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                 aria-label={t('accessibility.menuTitle')}
                 aria-haspopup="true"
                 aria-expanded={isOpen}
            >
                {/* Use an accessibility icon */}
                 <FontAwesomeIcon icon={fas.faUniversalAccess} className="h-6 w-6" />
            </button>

            {isOpen && (
                <div className="absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-hidden z-40 border border-gray-200 dark:border-gray-700">
                     <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
                        <h3 className="text-sm font-medium text-gray-900 dark:text-white">{t('accessibility.menuTitle')}</h3>
                    </div>
                    <div className="py-2">
                        {/* Font Size Control */}
                        <div className="px-4 py-2">
                             <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t('accessibility.fontSize')}</label>
                             <div className="flex items-center justify-between space-x-2">
                                <Button onClick={decreaseFontSize} size="sm" variant="secondary" aria-label={t('accessibility.decrease')}>-</Button>
                                <span className="text-sm text-center w-12">{Math.round(settings.fontSizeMultiplier * 100)}%</span>
                                <Button onClick={increaseFontSize} size="sm" variant="secondary" aria-label={t('accessibility.increase')}>+</Button>
                                <Button onClick={resetFontSize} size="sm" variant="ghost" className="text-xs">{t('accessibility.reset')}</Button>
                             </div>
                        </div>
                         <hr className="border-gray-200 dark:border-gray-700 my-1"/>
                         {/* High Contrast Toggle */}
                         {renderSwitch('accessibility.highContrast', settings.highContrast, toggleHighContrast)}
                         <hr className="border-gray-200 dark:border-gray-700 my-1"/>
                         {/* Reduce Motion Toggle */}
                         {renderSwitch('accessibility.reduceMotion', settings.reduceMotion, toggleReduceMotion)}
                    </div>
                </div>
            )}
        </div>
    );
};


// ============================================================================
// SECTION COMPONENTS (Defined within the same file)
// ============================================================================

// --- Navbar Component ---
interface NavbarProps {
    activeTab: string;
    onTabChange: (tabId: string) => void;
    isFixed: boolean;
    notifications: Notification[];
    onMarkNotificationRead: (id: string) => void;
    onClearNotifications: () => void;
}
const Navbar: React.FC<NavbarProps> = ({
    activeTab,
    onTabChange,
    isFixed,
    notifications,
    onMarkNotificationRead,
    onClearNotifications
}) => {
    const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
    const { t } = useLanguage(); // Use translation hook

    const tabs: TabItem[] = [
      { id: "overview", icon: fas.faHome, label: t("navbar.overview") },
      { id: "projects", icon: fas.faCodeBranch, label: t("navbar.projects") },
      { id: "skills", icon: fas.faCode, label: t("navbar.skills") },
      { id: "experience", icon: fas.faBriefcase, label: t("navbar.experience") },
      { id: "education", icon: fas.faGraduationCap, label: t("navbar.education") },
      { id: "achievements", icon: fas.faAward, label: t("navbar.achievements") },
      { id: "activity", icon: fas.faChartLine, label: t("navbar.activity") },
      { id: "blog", icon: fas.faRss, label: t("navbar.blog") },
      { id: "testimonials", icon: fas.faCommentDots, label: t("navbar.testimonials") },
      { id: "contact", icon: fas.faEnvelope, label: t("navbar.contact") }
    ];

    // Enhanced Animation: Use scroll position for more effects
    const scrollPosition = useScrollPosition();
    // Example: Navbar shrinks slightly and background becomes less transparent on scroll
    const dynamicNavbarClasses = isFixed
        ? "bg-gray-800/95 dark:bg-gray-900/95 backdrop-blur-md shadow-lg py-2" // Fixed state styles
        : "bg-transparent py-4"; // Initial state styles
    const dynamicLogoClasses = isFixed ? "text-xl" : "text-2xl";
    const dynamicLinkClasses = isFixed ? "py-2" : "py-3";

    // NOTE: For *really* smooth animations (like sliding effects, complex transitions),
    // a library like Framer Motion (https://www.framer.com/motion/) would be ideal,
    // but that adds external dependencies. This uses simple CSS transitions.

    return (
        <header
            className={`fixed top-0 left-0 right-0 z-40 transition-all duration-300 ease-in-out ${dynamicNavbarClasses}`}
            // Add specific class for reduce-motion preferences
            data-reduce-motion={useContext(AccessibilityContext)?.settings.reduceMotion}
        >
            <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex justify-between items-center h-16">
                     {/* Logo / Name */}
                     <div className={`text-white font-bold transition-all duration-300 ${dynamicLogoClasses}`}>
                        <a href="#home" onClick={() => onTabChange('overview')}>{PROFILE_DATA.username}</a>
                     </div>

                    {/* Desktop Navigation */}
                    <nav className="hidden md:flex items-center space-x-1 lg:space-x-3">
                       {tabs.map((tab) => (
                          <button
                            key={tab.id}
                            onClick={() => onTabChange(tab.id)}
                            className={`px-3 lg:px-4 font-medium text-sm transition-colors duration-200 ${dynamicLinkClasses} ${
                              activeTab === tab.id
                                ? "text-white border-b-2 border-blue-500"
                                : "text-gray-300 hover:text-white"
                            }`}
                            aria-current={activeTab === tab.id ? 'page' : undefined}
                          >
                            {/* Optional: Show icons on desktop too */}
                            {/* <FontAwesomeIcon icon={tab.icon} className="mr-2" /> */}
                            {t(`navbar.${tab.id}`)}
                          </button>
                        ))}
                    </nav>

                    {/* Right side Actions */}
                     <div className="flex items-center space-x-2">
                        <NotificationBell
                            notifications={notifications}
                            onMarkAsRead={onMarkNotificationRead}
                            onClearAll={onClearNotifications}
                        />
                        <LanguageSwitcher />
                        <ThemeToggle />
                        <AccessibilityMenu />

                        {/* Mobile Menu Button */}
                        <div className="md:hidden">
                             <button
                                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                                className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
                                aria-controls="mobile-menu"
                                aria-expanded={mobileMenuOpen}
                             >
                                <span className="sr-only">Open main menu</span>
                                <FontAwesomeIcon icon={mobileMenuOpen ? fas.faTimes : fas.faBars} className="block h-6 w-6" aria-hidden="true" />
                            </button>
                        </div>
                    </div>
                </div>
            </div>

             {/* Mobile menu */}
             {mobileMenuOpen && (
                 <div className="md:hidden absolute top-full left-0 right-0 bg-gray-800 dark:bg-gray-900 shadow-lg pb-3" id="mobile-menu">
                     <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                         {tabs.map((tab) => (
                             <button
                                 key={tab.id}
                                 onClick={() => {
                                     onTabChange(tab.id);
                                     setMobileMenuOpen(false); // Close menu on click
                                 }}
                                 className={`w-full text-left block px-3 py-2 rounded-md text-base font-medium flex items-center ${
                                     activeTab === tab.id
                                         ? 'bg-gray-900 dark:bg-gray-700 text-white'
                                         : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                                 }`}
                                 aria-current={activeTab === tab.id ? 'page' : undefined}
                             >
                                <FontAwesomeIcon icon={tab.icon} className="mr-3 h-5 w-5" />
                                {t(`navbar.${tab.id}`)}
                            </button>
                         ))}
                     </div>
                 </div>
             )}
        </header>
    );
};


// --- Profile Header Component ---
interface ProfileHeaderProps {
    onContactClick: () => void;
    onDownloadCV: () => void; // Assuming this triggers a download
}
const ProfileHeader: React.FC<ProfileHeaderProps> = ({ onContactClick, onDownloadCV }) => {
    const { t } = useLanguage();

    return (
         <Card className="!p-0 -mt-16 md:-mt-20 z-10 relative mb-6"> {/* Overlap adjusted */}
            {/* Cover Image */}
            <div className="h-48 md:h-64 bg-gradient-to-r from-blue-700 to-indigo-800 dark:from-blue-900 dark:to-gray-900 relative">
                {PROFILE_DATA.coverImageUrl && (
                    <img
                        src={PROFILE_DATA.coverImageUrl}
                        alt="Profile cover"
                        className="w-full h-full object-cover opacity-80" // Added opacity
                    />
                )}
                 {/* Online Status Indicator */}
                 <div className="absolute top-4 right-4 flex items-center px-3 py-1 rounded-full bg-gray-900 bg-opacity-60 backdrop-blur-sm">
                    <span className="w-2.5 h-2.5 bg-green-400 rounded-full mr-2 ring-1 ring-green-300 animate-pulse" />
                    <span className="text-green-300 text-xs font-medium">{t('profileHeader.online')}</span>
                </div>
                {/* Action Buttons (Share, Bookmark, etc. - can be made functional) */}
                 <div className="absolute top-4 left-4 flex space-x-2">
                    <Button variant="ghost" size="sm" className="!p-2 text-gray-300 bg-gray-900 bg-opacity-60 backdrop-blur-sm hover:text-white" aria-label="Share profile">
                        <FontAwesomeIcon icon={fas.faShareAlt} />
                    </Button>
                     <Button variant="ghost" size="sm" className="!p-2 text-gray-300 bg-gray-900 bg-opacity-60 backdrop-blur-sm hover:text-white" aria-label="Bookmark profile">
                        <FontAwesomeIcon icon={fas.faBookmark} />
                    </Button>
                    {/* <Button variant="ghost" size="sm" className="!p-2 text-gray-300 bg-gray-900 bg-opacity-60 backdrop-blur-sm hover:text-white" aria-label="More options">
                        <FontAwesomeIcon icon={fas.faEllipsisH} />
                    </Button> */}
                </div>
            </div>

            {/* Profile Info Section */}
             <div className="relative px-4 sm:px-6 pb-6">
                 {/* Profile Picture */}
                <div className="absolute -top-12 left-6 md:left-8 transform -translate-y-1/4"> {/* Adjusted positioning */}
                    <div className="relative">
                        <img
                            src={PROFILE_DATA.profileImageUrl}
                            alt="Profile picture"
                            className="w-24 h-24 md:w-32 md:h-32 rounded-full object-cover border-4 border-white dark:border-gray-800 shadow-lg"
                        />
                         {/* Level Badge */}
                        <div className="absolute -bottom-1 -right-1 bg-gradient-to-tr from-red-500 to-orange-500 text-white text-xs font-bold rounded-full w-8 h-8 md:w-10 md:h-10 flex items-center justify-center border-2 border-white dark:border-gray-800 shadow-md">
                            {PROFILE_DATA.level}
                        </div>
                    </div>
                </div>

                {/* Name, Handle, Socials & Actions */}
                 <div className="flex flex-col md:flex-row md:justify-between md:items-end pt-16 md:pt-4"> {/* Adjusted top padding */}
                    {/* Left side: Name, Title, Socials */}
                    <div className="mt-4 md:mt-0 md:ml-40"> {/* Add margin to push content past avatar */}
                        <h1 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">{PROFILE_DATA.username}</h1>
                        <p className="text-blue-600 dark:text-blue-400 text-base md:text-lg mb-2">{PROFILE_DATA.handle}</p>
                         <p className="text-gray-600 dark:text-gray-400 text-sm md:text-base mb-3">{PROFILE_DATA.title}</p>

                        {/* Social Media Links */}
                        <div className="flex flex-wrap gap-3 mt-2">
                            {PROFILE_DATA.socialMedia.map((social) => (
                                <a
                                    key={social.id}
                                    href={social.url}
                                    className="text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition duration-150 ease-in-out"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    aria-label={`Visit ${PROFILE_DATA.username}'s ${social.platform} profile`}
                                >
                                    <FontAwesomeIcon icon={social.icon} size="lg" />
                                </a>
                            ))}
                        </div>
                    </div>

                    {/* Right side: Action Buttons */}
                     <div className="flex flex-wrap gap-3 mt-4 md:mt-0">
                        <Button onClick={onContactClick} variant="primary" icon={fas.faEnvelope}>
                            {t('profileHeader.contactMe')}
                        </Button>
                        <Button onClick={onDownloadCV} variant="secondary" icon={fas.faDownload}>
                            {t('profileHeader.downloadCV')}
                        </Button>
                    </div>
                </div>
            </div>
        </Card>
    );
};

// --- Stat Card Component ---
interface StatCardProps {
    icon: IconDefinition;
    value: string | number;
    label: string;
    colorClass?: string; // Optional: e.g., 'text-blue-400'
}
const StatCard: React.FC<StatCardProps> = ({ icon, value, label, colorClass = "text-blue-400 dark:text-blue-500" }) => {
    return (
        <Card className="text-center hover:shadow-xl transition-shadow duration-200">
            <FontAwesomeIcon icon={icon} className={`text-2xl mb-2 ${colorClass}`} />
            <div className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">{value}</div>
            <div className="text-gray-500 dark:text-gray-400 text-sm mt-1">{label}</div>
        </Card>
    );
};

// --- Overview Tab Component ---
const OverviewTab: React.FC<{ onNavigate: (tabId: string) => void }> = ({ onNavigate }) => {
    const { t } = useLanguage();

    const publicContacts = PROFILE_DATA.contacts.filter(c => c.isPublic);

    // Example stats for the overview cards
     const overviewStats = [
      { value: PROFILE_DATA.devStats.repos, label: "Repositories", icon: fas.faCodeBranch, colorClass: "text-purple-500 dark:text-purple-400" },
      { value: PROFILE_DATA.devStats.stars, label: "Stars Received", icon: fas.faStar, colorClass: "text-yellow-500 dark:text-yellow-400" },
      { value: PROFILE_DATA.devStats.commits, label: "Total Commits", icon: fas.faCodeCommit, colorClass: "text-green-500 dark:text-green-400" }, // Changed Contributions to Commits
      { value: PROFILE_DATA.devStats.followers, label: "Followers", icon: fas.faUsers, colorClass: "text-pink-500 dark:text-pink-400" }, // Changed Rating to Followers
    ];

    return (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Left Column (Stats, Tech Stack Preview, Achievements Preview) */}
            <div className="lg:col-span-1 space-y-6">
                {/* Stats Grid */}
                <div className="grid grid-cols-2 gap-4">
                     {overviewStats.map((stat, i) => (
                         <StatCard key={i} {...stat} />
                     ))}
                </div>

                {/* Developer Level / Experience Bar */}
                <Card title={t('overview.developerLevel')}>
                     <div className="flex justify-between items-center mb-1 text-sm">
                        <span className="font-medium text-gray-700 dark:text-gray-300">Experience</span>
                        <span className="font-bold text-blue-600 dark:text-blue-400">Level {PROFILE_DATA.level}</span>
                    </div>
                    <div className="h-2.5 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden relative">
                        {/* Animated progress bar */}
                         <div
                            className="h-full bg-gradient-to-r from-blue-500 to-indigo-600 transition-width duration-1000 ease-out"
                            style={{ width: `${(PROFILE_DATA.level / 100) * 100}%` }} // Assuming max level 100
                         />
                         {/* Shimmer effect - optional */}
                         {/* <div className="absolute inset-0 bg-white/20 animate-shimmer"></div> */}
                    </div>
                </Card>

                {/* Core Tech Stack Preview */}
                <Card
                    title={t('overview.coreTechStack')}
                    titleIcon={fas.faLayerGroup}
                    actions={
                        <Button variant="ghost" size="sm" onClick={() => onNavigate('skills')}>
                            {t('overview.viewAll')}
                        </Button>
                    }
                >
                    <div className="space-y-4">
                        {PROFILE_DATA.techStack.slice(0, 5).map((tech) => (
                            <div key={tech.id} className="flex items-center">
                                <div className="w-10 h-10 flex-shrink-0 flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-lg mr-3">
                                    <FontAwesomeIcon icon={tech.icon} className="text-blue-500 dark:text-blue-400 text-xl" />
                                </div>
                                <div className="flex-1">
                                    <div className="flex justify-between items-center mb-1">
                                        <span className="text-sm font-medium text-gray-900 dark:text-white">{tech.name}</span>
                                        <span className="text-xs text-gray-500 dark:text-gray-400">{tech.yearsOfExperience} {t('overview.years')}</span>
                                    </div>
                                    {/* Proficiency Bar */}
                                    <div className="h-1.5 bg-gray-200 dark:bg-gray-600 rounded-full">
                                         <div
                                            className="h-full bg-gradient-to-r from-green-400 to-blue-500 rounded-full"
                                            style={{ width: `${(tech.proficiency / 5) * 100}%` }} // Assuming proficiency is 1-5 scale
                                         />
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </Card>

                 {/* Achievements Preview */}
                 <Card
                    title={t('overview.achievements')}
                    titleIcon={fas.faTrophy}
                    actions={
                        <Button variant="ghost" size="sm" onClick={() => onNavigate('achievements')}>
                            {t('overview.viewAll')}
                        </Button>
                    }
                 >
                    <div className="grid grid-cols-2 gap-3">
                        {PROFILE_DATA.achievements.slice(0, 4).map((achievement) => (
                            <div
                                key={achievement.id}
                                className="bg-gray-100 dark:bg-gray-750 p-3 rounded-lg flex items-center space-x-2 text-center hover:bg-gray-200 dark:hover:bg-gray-700 transition cursor-pointer"
                                onClick={() => onNavigate('achievements')} // Navigate on click
                                title={`${achievement.title} (${achievement.date})`}
                            >
                                <div className="w-8 h-8 flex-shrink-0 bg-blue-100 dark:bg-blue-900/50 rounded-full flex items-center justify-center">
                                     <FontAwesomeIcon icon={achievement.icon} className="text-blue-600 dark:text-blue-400 text-sm" />
                                </div>
                                <span className="text-xs font-medium text-gray-700 dark:text-gray-200 leading-tight line-clamp-2">{achievement.title}</span>
                            </div>
                        ))}
                    </div>
                 </Card>

            </div>

            {/* Right Column (About Me, Contact Info, Featured Projects) */}
            <div className="lg:col-span-2 space-y-6">
                {/* About Me */}
                 <Card title={t('overview.aboutMe')} titleIcon={fas.faUserCircle}>
                    {/* Use line-clamp for potentially long text */}
                    <p className="text-gray-700 dark:text-gray-300 leading-relaxed prose prose-sm dark:prose-invert max-w-none">
                         {PROFILE_DATA.aboutMe}
                    </p>
                 </Card>

                 {/* Contact & Personal Info */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <Card title={t('overview.contactInfo')} titleIcon={fas.faAddressCard}>
                         <ul className="space-y-3">
                            {publicContacts.map((contact) => (
                              <li key={contact.id} className="flex items-center text-gray-700 dark:text-gray-300 text-sm">
                                <div className="w-8 h-8 flex-shrink-0 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center mr-3">
                                  <FontAwesomeIcon icon={contact.icon} className="text-blue-500 dark:text-blue-400" />
                                </div>
                                <span className="truncate">{contact.type === 'Email' || contact.type === 'Website' ? <a href={contact.type === 'Email' ? `mailto:${contact.value}` : contact.value} target="_blank" rel="noopener noreferrer" className="hover:underline">{contact.value}</a> : contact.value}</span>
                              </li>
                            ))}
                          </ul>
                    </Card>
                     <Card title={t('overview.personalInfo')} titleIcon={fas.faInfoCircle}>
                         <ul className="space-y-3">
                             <li className="flex items-center text-gray-700 dark:text-gray-300 text-sm">
                                <div className="w-8 h-8 flex-shrink-0 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center mr-3">
                                    <FontAwesomeIcon icon={fas.faMapMarkerAlt} className="text-red-500 dark:text-red-400" />
                                </div>
                                <span>{PROFILE_DATA.location}</span>
                            </li>
                            <li className="flex items-center text-gray-700 dark:text-gray-300 text-sm">
                                <div className="w-8 h-8 flex-shrink-0 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center mr-3">
                                    <FontAwesomeIcon icon={fas.faCalendarCheck} className="text-green-500 dark:text-green-400" />
                                </div>
                                <span>{t('overview.availabilityValue')}</span>
                            </li>
                             {/* Add more relevant personal info if needed */}
                         </ul>
                    </Card>
                </div>

                {/* Featured Projects Preview */}
                <Card
                    title={t('overview.featuredProjects')}
                    titleIcon={fas.faStar}
                     actions={
                        <Button variant="ghost" size="sm" onClick={() => onNavigate('projects')}>
                            {t('overview.viewAll')}
                        </Button>
                    }
                 >
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {PROFILE_DATA.projects.slice(0, 2).map((project) => (
                            <ProjectCard key={project.id} project={project} onClick={() => {/* TODO: Implement project dialog open from here */}}/>
                        ))}
                    </div>
                </Card>

            </div>
        </div>
    );
};


// --- Project Card Component ---
interface ProjectCardProps {
    project: Project;
    onClick: () => void;
    viewMode?: 'grid' | 'list';
}
const ProjectCard: React.FC<ProjectCardProps> = ({ project, onClick, viewMode = 'grid' }) => {
    const { t } = useLanguage();

    if (viewMode === 'list') {
        return (
             <Card className="mb-4 hover:shadow-lg transition-shadow duration-150 ease-in-out !p-0">
                <div className="flex flex-col sm:flex-row">
                    {project.image && (
                        <div className="sm:w-1/4 flex-shrink-0">
                             <img src={project.image} alt={`${project.title} screenshot`} className="h-full w-full object-cover rounded-l-lg sm:rounded-l-lg sm:rounded-tr-none"/>
                        </div>
                    )}
                    <div className="flex-1 p-4">
                        <div className="flex justify-between items-start mb-2">
                             <h3 className="text-lg font-semibold text-gray-900 dark:text-white cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" onClick={onClick}>
                                {project.title}
                             </h3>
                             <span className={`text-xs font-medium px-2.5 py-0.5 rounded-full ${project.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : project.status === 'in-progress' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300' : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'}`}>
                                {project.status}
                             </span>
                        </div>
                         <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2">{project.description}</p>
                         <div className="flex flex-wrap gap-1 mb-3">
                            {project.techStack.slice(0, 5).map(tech => (
                                <span key={tech} className="text-xs bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-0.5 rounded">
                                    {tech}
                                </span>
                            ))}
                            {project.techStack.length > 5 && <span className="text-xs text-gray-500">...</span>}
                        </div>
                        <div className="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                             <div className="flex items-center space-x-3">
                                <span title="Stars"><FontAwesomeIcon icon={fas.faStar} className="mr-1 text-yellow-500"/>{project.stats.stars}</span>
                                <span title="Forks"><FontAwesomeIcon icon={fas.faCodeBranch} className="mr-1"/>{project.stats.forks ?? 0}</span>
                                <span title="Views"><FontAwesomeIcon icon={fas.faEye} className="mr-1"/>{project.stats.views}</span>
                             </div>
                             <div className="flex space-x-2">
                                {project.demoUrl && <Button size="sm" variant="ghost" onClick={(e) => {e.stopPropagation(); window.open(project.demoUrl, '_blank');}}>{t('projects.demo')}</Button>}
                                {project.githubUrl && <Button size="sm" variant="ghost" onClick={(e) => {e.stopPropagation(); window.open(project.githubUrl, '_blank');}}>{t('projects.repo')}</Button>}
                                <Button size="sm" variant="secondary" onClick={onClick}>Details</Button>
                            </div>
                        </div>
                    </div>
                </div>
            </Card>
        );
    }

    // Default: Grid View
    return (
        <Card
            className="hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1 cursor-pointer group !p-0"
            onClick={onClick}
        >
            {/* Image */}
            <div className="h-40 sm:h-48 bg-gradient-to-br from-gray-300 to-gray-400 dark:from-gray-700 dark:to-gray-800 relative overflow-hidden">
                {project.image ? (
                     <img src={project.image} alt={`${project.title} screenshot`} className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out"/>
                ) : (
                    <div className="w-full h-full flex items-center justify-center">
                         <FontAwesomeIcon icon={fas.faCode} className="text-5xl text-gray-500 dark:text-gray-600 opacity-50"/>
                    </div>
                )}
                 {/* Status Badge */}
                 <span className={`absolute top-2 right-2 text-xs font-medium px-2.5 py-0.5 rounded-full shadow-sm ${project.status === 'completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : project.status === 'in-progress' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300' : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'}`}>
                    {project.status}
                 </span>
            </div>

            {/* Content */}
            <div className="p-4">
                 <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1 truncate group-hover:text-blue-600 dark:group-hover:text-blue-400">
                    {project.title}
                </h3>
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 h-10 line-clamp-2">{project.description}</p>

                {/* Tech Stack */}
                <div className="flex flex-wrap gap-1 mb-4">
                    {project.techStack.slice(0, 4).map(tech => (
                        <span key={tech} className="text-xs bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-0.5 rounded">
                            {tech}
                        </span>
                    ))}
                     {project.techStack.length > 4 && <span className="text-xs text-gray-500 dark:text-gray-400">+{project.techStack.length - 4} more</span>}
                </div>

                 {/* Stats and Actions */}
                 <div className="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                    <div className="flex items-center space-x-3">
                        <span title="Stars"><FontAwesomeIcon icon={fas.faStar} className="mr-1 text-yellow-500"/>{project.stats.stars}</span>
                        <span title="Forks"><FontAwesomeIcon icon={fas.faCodeBranch} className="mr-1"/>{project.stats.forks ?? 0}</span>
                        <span title="Views"><FontAwesomeIcon icon={fas.faEye} className="mr-1"/>{project.stats.views}</span>
                    </div>
                     <div className="flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                        {project.demoUrl && <Button size="sm" variant="ghost" className="!p-1" onClick={(e) => {e.stopPropagation(); window.open(project.demoUrl, '_blank');}} title="Demo"><FontAwesomeIcon icon={fas.faExternalLinkAlt}/></Button>}
                        {project.githubUrl && <Button size="sm" variant="ghost" className="!p-1" onClick={(e) => {e.stopPropagation(); window.open(project.githubUrl, '_blank');}} title="GitHub"><FontAwesomeIcon icon={fab.faGithub}/></Button>}
                    </div>
                </div>
            </div>
        </Card>
    );
};

// --- Project Dialog Component ---
interface ProjectDialogProps {
    project: Project | null;
    isOpen: boolean;
    onClose: () => void;
}
const ProjectDialog: React.FC<ProjectDialogProps> = ({ project, isOpen, onClose }) => {
    const { t } = useLanguage();

    if (!project) return null;

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={project.title} size="xl">
            <div className="space-y-6">
                {/* Optional Image */}
                {project.image && (
                     <img src={project.image} alt={`${project.title} screenshot`} className="w-full h-64 object-cover rounded-md mb-4 bg-gray-200 dark:bg-gray-700"/>
                )}

                {/* Description */}
                <div>
                    <h4 className="text-sm font-semibold text-gray-600 dark:text-gray-400 uppercase mb-1">Description</h4>
                    <p className="text-gray-800 dark:text-gray-200 prose prose-sm dark:prose-invert max-w-none">{project.description}</p>
                </div>

                 <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Features */}
                    <div>
                         <h4 className="text-sm font-semibold text-gray-600 dark:text-gray-400 uppercase mb-2">{t('projects.features')}</h4>
                         <ul className="list-disc list-inside space-y-1 text-sm text-gray-700 dark:text-gray-300">
                             {project.features.map((feature, index) => (
                                <li key={index}>{feature}</li>
                             ))}
                         </ul>
                    </div>

                    {/* Tech Stack */}
                    <div>
                        <h4 className="text-sm font-semibold text-gray-600 dark:text-gray-400 uppercase mb-2">{t('projects.techStack')}</h4>
                        <div className="flex flex-wrap gap-2">
                             {project.techStack.map(tech => (
                                <span key={tech} className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300 px-2.5 py-1 rounded-full font-medium">
                                    {tech}
                                </span>
                            ))}
                        </div>
                    </div>
                 </div>

                {/* Status & Dates */}
                 <div className="grid grid-cols-2 gap-6 text-sm">
                     <div>
                         <h4 className="text-sm font-semibold text-gray-600 dark:text-gray-400 uppercase mb-1">{t('projects.status')}</h4>
                         <span className={`font-medium capitalize ${project.status === 'completed' ? 'text-green-600 dark:text-green-400' : project.status === 'in-progress' ? 'text-yellow-600 dark:text-yellow-400' : 'text-gray-600 dark:text-gray-400'}`}>
                            {project.status}
                         </span>
                     </div>
                      <div>
                         <h4 className="text-sm font-semibold text-gray-600 dark:text-gray-400 uppercase mb-1">Timeline</h4>
                         <p className="text-gray-700 dark:text-gray-300">{project.startDate} {project.endDate ? `- ${project.endDate}` : '(Ongoing)'}</p>
                     </div>
                 </div>

                 {/* Collaborators */}
                 {project.collaborators && project.collaborators.length > 0 && (
                     <div>
                        <h4 className="text-sm font-semibold text-gray-600 dark:text-gray-400 uppercase mb-2">{t('projects.collaborators')}</h4>
                         <div className="flex flex-wrap gap-2">
                            {project.collaborators.map((collab, index) => (
                                <span key={index} className="text-xs bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-full flex items-center">
                                     <FontAwesomeIcon icon={fas.faUser} className="mr-1.5 text-gray-500 dark:text-gray-400"/> {collab}
                                </span>
                            ))}
                        </div>
                     </div>
                 )}

                 {/* Links */}
                 <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                    {project.demoUrl && (
                         <Button variant="secondary" icon={fas.faExternalLinkAlt} onClick={() => window.open(project.demoUrl, '_blank')}>
                             {t('projects.demo')}
                         </Button>
                     )}
                     {project.githubUrl && (
                        <Button variant="secondary" icon={fab.faGithub} onClick={() => window.open(project.githubUrl, '_blank')}>
                            {t('projects.repo')}
                        </Button>
                     )}
                     <Button variant="primary" onClick={onClose}>
                         {t('projects.close')}
                     </Button>
                 </div>
            </div>
        </Modal>
    );
};


// --- Projects Tab Component ---
const ProjectsTab: React.FC<{
    projects: Project[];
    onProjectClick: (project: Project) => void;
}> = ({ projects, onProjectClick }) => {
    const { t } = useLanguage();
    const [searchQuery, setSearchQuery] = useState("");
    const [filterOptions, setFilterOptions] = useState<FilterOption[]>([]);
    const [sortOption, setSortOption] = useState<SortOption>({ field: 'date', order: 'desc' }); // Default sort: Newest first
    const [currentProjectPage, setCurrentProjectPage] = useState(1);
    const [projectsPerPage] = useState(6); // Number of projects per page
    const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');

    const debouncedSearchQuery = useDebounce(searchQuery, 300); // Debounce search input

    // --- Filtering Logic ---
    const availableCategories = useMemo(() => [...new Set(projects.map(p => p.category))], [projects]);
    const availableTech = useMemo(() => [...new Set(projects.flatMap(p => p.techStack))].sort(), [projects]);
    const availableStatuses = useMemo(() => ['completed', 'in-progress', 'planned'] as Project['status'][], []);

    const handleFilterChange = (category: string, value: string) => {
        setFilterOptions(prev => {
            const existingIndex = prev.findIndex(f => f.category === category && f.value === value);
            if (existingIndex > -1) {
                // Remove filter if it exists
                return prev.filter((_, index) => index !== existingIndex);
            } else {
                // If single-select per category (e.g., status), remove others first
                const updated = category === 'status' ? prev.filter(f => f.category !== category) : [...prev];
                 // Add the new filter
                return [...updated, { category, value }];
            }
        });
        setCurrentProjectPage(1); // Reset page on filter change
    };

    // --- Sorting Logic ---
     const handleSortChange = (field: SortOption['field'], order: SortOption['order']) => {
        setSortOption({ field, order });
    };

     const sortOptionsList: { labelKey: string; field: SortOption['field']; order: SortOption['order'] }[] = [
        { labelKey: 'projects.sort.dateDesc', field: 'date', order: 'desc' },
        { labelKey: 'projects.sort.dateAsc', field: 'date', order: 'asc' },
        { labelKey: 'projects.sort.titleAsc', field: 'title', order: 'asc' },
        { labelKey: 'projects.sort.titleDesc', field: 'title', order: 'desc' },
        { labelKey: 'projects.sort.starsDesc', field: 'stats.stars', order: 'desc' },
        { labelKey: 'projects.sort.starsAsc', field: 'stats.stars', order: 'asc' },
    ];

    // --- Combined Filtering & Sorting ---
    const processedProjects = useMemo(() => {
        let filtered = projects.filter(project => {
            // Filter by search query (debounced)
            const searchLower = debouncedSearchQuery.toLowerCase();
            const matchesSearch = !searchLower ||
                project.title.toLowerCase().includes(searchLower) ||
                project.description.toLowerCase().includes(searchLower) ||
                project.category.toLowerCase().includes(searchLower) ||
                project.techStack.some(tech => tech.toLowerCase().includes(searchLower));

             // Filter by selected options
            const matchesFilters = filterOptions.length === 0 || filterOptions.every(filter => {
                if (filter.category === 'status') return project.status === filter.value;
                if (filter.category === 'tech') return project.techStack.includes(filter.value);
                if (filter.category === 'category') return project.category === filter.value;
                return true;
            });

            return matchesSearch && matchesFilters;
        });

        // Sort
        return filtered.sort((a, b) => {
            let valA: any;
            let valB: any;

            if (sortOption.field === 'title') {
                 valA = a.title; valB = b.title;
            } else if (sortOption.field === 'stats.stars') {
                valA = a.stats.stars; valB = b.stats.stars;
            } else if (sortOption.field === 'date') {
                // Use startDate for sorting by date
                 valA = new Date(a.startDate).getTime();
                 valB = new Date(b.startDate).getTime();
            } else {
                return 0; // No sorting if field unknown
            }

             if (typeof valA === 'string' && typeof valB === 'string') {
                return sortOption.order === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
            }
             if (typeof valA === 'number' && typeof valB === 'number') {
                return sortOption.order === 'asc' ? valA - valB : valB - valA;
            }
            return 0;
        });

    }, [projects, debouncedSearchQuery, filterOptions, sortOption]);

     // --- Pagination Logic ---
    const totalProjectPages = useMemo(() =>
        Math.ceil(processedProjects.length / projectsPerPage),
    [processedProjects, projectsPerPage]);

    const paginatedProjects = useMemo(() => {
        const startIndex = (currentProjectPage - 1) * projectsPerPage;
        return processedProjects.slice(startIndex, startIndex + projectsPerPage);
    }, [processedProjects, currentProjectPage, projectsPerPage]);

    const handlePageChange = (newPage: number) => {
        if (newPage >= 1 && newPage <= totalProjectPages) {
            setCurrentProjectPage(newPage);
             // Optionally scroll to top of projects section
            // document.getElementById('projects-section-top')?.scrollIntoView({ behavior: 'smooth' });
        }
    };

    // --- Render ---
    return (
        <div className="space-y-6" id="projects-section-top">
             {/* Filters and Controls */}
            <Card className="!p-4">
                <div className="flex flex-wrap gap-4 items-center justify-between">
                     {/* Search */}
                    <div className="relative flex-grow max-w-xs">
                         <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <FontAwesomeIcon icon={fas.faSearch} className="text-gray-400 dark:text-gray-500 h-4 w-4" />
                         </div>
                         <input
                            type="text"
                            placeholder={t('projects.searchPlaceholder')}
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            className="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        />
                    </div>

                     {/* Filter Dropdowns (Example: Category) */}
                     {/* TODO: Add more dropdowns for Tech and Status */}
                    <div className="relative">
                        <select
                            value={filterOptions.find(f => f.category === 'category')?.value || ''}
                            onChange={(e) => handleFilterChange('category', e.target.value)}
                            className="appearance-none block w-full pl-3 pr-8 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                        >
                             <option value="">{t('projects.filterByCategory')}</option>
                            {availableCategories.map(cat => (
                                <option key={cat} value={cat}>{cat}</option>
                            ))}
                        </select>
                        {/* Add dropdown indicator */}
                    </div>

                     {/* Sort Dropdown */}
                    <div className="relative">
                         <select
                            value={`${sortOption.field}|${sortOption.order}`}
                            onChange={(e) => {
                                const [field, order] = e.target.value.split('|');
                                handleSortChange(field as SortOption['field'], order as SortOption['order']);
                            }}
                            className="appearance-none block w-full pl-3 pr-8 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            aria-label={t('projects.sortBy')}
                         >
                             <option value="" disabled>{t('projects.sortBy')}</option>
                            {sortOptionsList.map(opt => (
                                <option key={opt.labelKey} value={`${opt.field}|${opt.order}`}>{t(opt.labelKey)}</option>
                            ))}
                        </select>
                         {/* Add dropdown indicator */}
                    </div>

                    {/* View Mode Toggle */}
                    <div className="flex items-center border border-gray-300 dark:border-gray-600 rounded-md">
                        <Button
                            variant={currentView === 'grid' ? 'secondary' : 'ghost'}
                            size="sm"
                            onClick={() => setCurrentView('grid')}
                            className={`!rounded-r-none !border-r ${currentView === 'grid' ? 'bg-gray-200 dark:bg-gray-600' : ''}`}
                            aria-label={t('projects.grid')}
                            title={t('projects.grid')}
                        >
                            <FontAwesomeIcon icon={fas.faThLarge} />
                        </Button>
                         <Button
                            variant={currentView === 'list' ? 'secondary' : 'ghost'}
                            size="sm"
                            onClick={() => setCurrentView('list')}
                            className={`!rounded-l-none ${currentView === 'list' ? 'bg-gray-200 dark:bg-gray-600' : ''}`}
                            aria-label={t('projects.list')}
                            title={t('projects.list')}
                         >
                             <FontAwesomeIcon icon={fas.faListUl} />
                        </Button>
                    </div>
                </div>

                 {/* Active Filters Display (Optional but helpful UX) */}
                {filterOptions.length > 0 && (
                    <div className="mt-3 flex flex-wrap gap-2 items-center text-xs">
                         <span className="text-gray-600 dark:text-gray-400">Active filters:</span>
                         {filterOptions.map(f => (
                             <span key={`${f.category}-${f.value}`} className="inline-flex items-center px-2 py-0.5 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300 font-medium">
                                 {f.value}
                                 <button
                                    onClick={() => handleFilterChange(f.category, f.value)}
                                    className="ml-1 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200"
                                    aria-label={`Remove filter: ${f.value}`}
                                >
                                     <FontAwesomeIcon icon={fas.faTimesCircle} size="sm"/>
                                 </button>
                             </span>
                         ))}
                        <Button variant="ghost" size="sm" onClick={() => setFilterOptions([])} className="text-xs">Clear all</Button>
                     </div>
                )}
            </Card>

            {/* Projects Grid/List */}
            {processedProjects.length > 0 ? (
                <div className={currentView === 'grid' ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" : "space-y-4"}>
                     {paginatedProjects.map(project => (
                        <ProjectCard
                            key={project.id}
                            project={project}
                            onClick={() => onProjectClick(project)}
                            viewMode={currentView}
                        />
                    ))}
                </div>
            ) : (
                 <div className="text-center py-10 text-gray-500 dark:text-gray-400">
                     <FontAwesomeIcon icon={fas.faFolderOpen} className="text-4xl mb-3"/>
                     <p>{t('projects.noProjects')}</p>
                 </div>
            )}


            {/* Pagination */}
             {totalProjectPages > 1 && (
                <div className="flex justify-center items-center space-x-2 mt-8">
                    <Button
                        onClick={() => handlePageChange(currentProjectPage - 1)}
                        disabled={currentProjectPage === 1}
                        variant="secondary"
                        size="sm"
                        icon={fas.faChevronLeft}
                    >
                        {t('projects.prev')}
                    </Button>
                     <span className="text-sm text-gray-700 dark:text-gray-300">
                         {t('projects.page')} {currentProjectPage} {t('projects.of')} {totalProjectPages}
                     </span>
                    <Button
                        onClick={() => handlePageChange(currentProjectPage + 1)}
                        disabled={currentProjectPage === totalProjectPages}
                        variant="secondary"
                        size="sm"
                        icon={fas.faChevronRight}
                        iconPosition="right"
                    >
                        {t('projects.next')}
                    </Button>
                </div>
            )}
        </div>
    );
};


// --- Blog Post Card Component (with Skeleton state) ---
interface BlogPostCardProps {
    post: BlogPost;
    isLoading: boolean;
}
const BlogPostCard: React.FC<BlogPostCardProps> = ({ post, isLoading }) => {
    const { t } = useLanguage();

    if (isLoading) {
        return (
            <Card className="!p-0 overflow-hidden">
                <Skeleton type="thumbnail" className="h-48" />
                <div className="p-4 space-y-3">
                    <Skeleton type="title" className="w-5/6"/>
                    <Skeleton type="text" lines={2} />
                    <div className="flex justify-between items-center pt-2">
                         <Skeleton type="text" className="h-4 w-1/4" />
                         <Skeleton type="text" className="h-4 w-1/4" />
                    </div>
                </div>
            </Card>
        );
    }

    // Shimmer effect definition (can be put in global CSS)
    // @keyframes shimmer { 0% { background-position: -1000px 0; } 100% { background-position: 1000px 0; } }
    // .animate-shimmer { animation: shimmer 2s infinite linear; background: linear-gradient(to right, transparent 0%, rgba(255,255,255,0.1) 50%, transparent 100%); background-size: 1000px 100%; }
    // dark mode shimmer: dark:background: linear-gradient(to right, transparent 0%, rgba(255,255,255,0.05) 50%, transparent 100%);

    return (
         <Card className="!p-0 overflow-hidden group hover:shadow-lg transition-shadow duration-150">
            {/* Image with Shimmer on hover/load */}
            <div className="relative h-48 bg-gray-200 dark:bg-gray-700 overflow-hidden">
                 {post.image ? (
                    <img src={post.image} alt={post.title} className="w-full h-full object-cover transition-transform duration-300 ease-in-out group-hover:scale-105" />
                 ) : (
                     <div className="w-full h-full flex items-center justify-center">
                        <FontAwesomeIcon icon={fas.faNewspaper} className="text-5xl text-gray-400 dark:text-gray-600 opacity-50"/>
                     </div>
                 )}
                 {/* Optional: Shimmer overlay */}
                 {/* <div className="absolute inset-0 animate-shimmer"></div> */}
                 <div className="absolute bottom-0 left-0 right-0 p-2 bg-gradient-to-t from-black/60 to-transparent">
                    <span className="text-xs text-white bg-black/40 px-2 py-0.5 rounded">{post.category}</span>
                 </div>
            </div>
            <div className="p-4 flex flex-col flex-grow">
                 <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400">
                     {/* Link to blog post page - adjust slug logic */}
                     <a href={`/blog/${post.slug}`} className="focus:outline-none focus:ring-2 focus:ring-blue-500 rounded">
                        {post.title}
                    </a>
                 </h3>
                 <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 flex-grow line-clamp-3">{post.excerpt}</p>

                 {/* Tags */}
                 <div className="flex flex-wrap gap-1 mb-3">
                    {post.tags.slice(0,3).map(tag => (
                        <span key={tag} className="text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-2 py-0.5 rounded-full">
                            #{tag}
                        </span>
                    ))}
                 </div>

                 {/* Meta Info */}
                 <div className="mt-auto pt-3 border-t border-gray-200 dark:border-gray-700 flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                    <span>{new Date(post.date).toLocaleDateString()}</span>
                     <span>{post.readTime} {t('blog.minutesRead')}</span>
                 </div>
                {/* Optional: Add like/comment/share counts here */}
                 {/* <div className="flex space-x-3 text-xs text-gray-500 dark:text-gray-400 mt-2">
                    <span><FontAwesomeIcon icon={fas.faThumbsUp} /> {post.likes} {t('blog.likes')}</span>
                    <span><FontAwesomeIcon icon={fas.faComment} /> {post.comments} {t('blog.comments')}</span>
                    <span><FontAwesomeIcon icon={fas.faShare} /> {post.shares} {t('blog.shares')}</span>
                 </div> */}
            </div>
         </Card>
    );
};

// --- Blog Section Component (Handles Loading State) ---
interface BlogSectionProps {
    posts: BlogPost[];
    isLoading: boolean; // Prop to control skeleton state
}
const BlogSection: React.FC<BlogSectionProps> = ({ posts, isLoading }) => {
    const { t } = useLanguage();
    const postsToShow = isLoading ? Array(4).fill({}) : posts.slice(0, 4); // Show 4 skeletons or first 4 posts

    return (
        <div className="space-y-6">
             <h2 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">{t('blog.latestPosts')}</h2>

            {isLoading && (
                <div className="text-center py-6 text-gray-500 dark:text-gray-400">
                    <FontAwesomeIcon icon={fas.faSpinner} className="animate-spin text-2xl mr-2" />
                    {t('blog.loading')}
                </div>
            )}

             <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                 {postsToShow.map((post, index) => (
                    <BlogPostCard key={isLoading ? `skeleton-${index}` : post.id} post={post} isLoading={isLoading} />
                 ))}
             </div>

             {!isLoading && posts.length > 4 && (
                 <div className="text-center mt-6">
                     <Button variant="secondary" onClick={() => { /* TODO: Navigate to full blog page */ }}>
                         View All Posts
                     </Button>
                 </div>
             )}
             {!isLoading && posts.length === 0 && (
                <p className="text-center py-6 text-gray-500 dark:text-gray-400">No blog posts available yet.</p>
             )}
        </div>
    );
};


// --- Contact Form Component ---
interface ContactFormProps {
    onSubmit: (data: { name: string; email: string; subject: string; message: string }) => Promise<boolean>; // Returns true on success
    onClose: () => void;
}
const ContactForm: React.FC<ContactFormProps> = ({ onSubmit, onClose }) => {
    const { t } = useLanguage();
    const [formData, setFormData] = useState({ name: "", email: "", subject: "", message: "" });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsSubmitting(true);
        setError(null);
        try {
            const success = await onSubmit(formData);
            if (success) {
                // Optionally clear form or show success message handled by parent
                onClose(); // Close the form/modal on success
            } else {
                 setError(t('contactForm.errorMessage'));
            }
        } catch (err) {
             console.error("Contact form submission error:", err);
             setError(t('contactForm.errorMessage'));
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            {error && (
                <div className="p-3 bg-red-100 dark:bg-red-900 border border-red-300 dark:border-red-700 rounded-md text-red-700 dark:text-red-300 text-sm">
                    {error}
                </div>
            )}
            <div>
                <label htmlFor="contact-name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    {t('contactForm.name')} <span className="text-red-500">*</span>
                </label>
                <input
                    type="text"
                    id="contact-name"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    className="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                    disabled={isSubmitting}
                />
            </div>
            <div>
                <label htmlFor="contact-email" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    {t('contactForm.email')} <span className="text-red-500">*</span>
                </label>
                <input
                    type="email"
                    id="contact-email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    required
                    className="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                    disabled={isSubmitting}
                />
            </div>
             <div>
                <label htmlFor="contact-subject" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    {t('contactForm.subject')}
                </label>
                <input
                    type="text"
                    id="contact-subject"
                    name="subject"
                    value={formData.subject}
                    onChange={handleInputChange}
                    className="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                    disabled={isSubmitting}
                />
            </div>
            <div>
                <label htmlFor="contact-message" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    {t('contactForm.message')} <span className="text-red-500">*</span>
                </label>
                <textarea
                    id="contact-message"
                    name="message"
                    rows={4}
                    value={formData.message}
                    onChange={handleInputChange}
                    required
                    className="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                    disabled={isSubmitting}
                />
            </div>
            <div className="flex justify-end space-x-3">
                 <Button type="button" variant="secondary" onClick={onClose} disabled={isSubmitting}>
                     Cancel
                 </Button>
                <Button type="submit" variant="primary" loading={isSubmitting} disabled={isSubmitting}>
                    {isSubmitting ? t('contactForm.sending') : t('contactForm.send')}
                </Button>
            </div>
        </form>
    );
};

// --- Add Placeholder Components for other sections ---
const SkillsTab: React.FC = () => <Card><p className="text-gray-500">Skills Section Placeholder</p></Card>;
const ExperienceTab: React.FC = () => <Card><p className="text-gray-500">Experience Section Placeholder</p></Card>;
const EducationTab: React.FC = () => <Card><p className="text-gray-500">Education Section Placeholder</p></Card>;
const AchievementsTab: React.FC = () => <Card><p className="text-gray-500">Achievements Section Placeholder</p></Card>;
const ActivityTab: React.FC = () => <Card><p className="text-gray-500">Activity Section Placeholder</p></Card>;
const TestimonialsTab: React.FC = () => <Card><p className="text-gray-500">Testimonials Section Placeholder</p></Card>;
const ContactTab: React.FC<{ onContactSubmit: ContactFormProps['onSubmit'] }> = ({ onContactSubmit }) => (
     <Card title="Contact Me Directly">
        <ContactForm onSubmit={onContactSubmit} onClose={() => {}} /> {/* Simple placeholder close */}
    </Card>
);

// --- Footer Component (Basic Example) ---
const Footer: React.FC = () => {
    const currentYear = new Date().getFullYear();
    return (
        <footer className="mt-12 py-6 border-t border-gray-200 dark:border-gray-700 text-center text-sm text-gray-500 dark:text-gray-400">
            <p>&copy; {currentYear} {PROFILE_DATA.username}. All rights reserved.</p>
            <p className="mt-1">Built with Next.js & Tailwind CSS</p>
             {/* Optional: Add social links again or other footer info */}
        </footer>
    );
};


// ============================================================================
// MAIN PAGE COMPONENT (`HomePage`)
// ============================================================================
const HomePage = () => {
  // State management
  const [activeTab, setActiveTab] = useState("overview"); // Default tab
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [isProjectDialogOpen, setIsProjectDialogOpen] = useState(false);
  const [isNavbarFixed, setIsNavbarFixed] = useState(false);
  const [isLoading, setIsLoading] = useState(true); // Global loading state
  const [isBlogLoading, setIsBlogLoading] = useState(true); // Blog specific loading
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [isContactFormOpen, setIsContactFormOpen] = useState(false); // State for modal contact form
  const [chartInstances, setChartInstances] = useState<{ [key: string]: Chart | null }>({}); // Allow null for cleanup


  // Get context values - NOTE: This assumes Providers wrap the component usage
  const { theme } = useTheme(); // Get current theme
  const { t } = useLanguage(); // Get translation function


  // Refs for charts (if used in other tabs)
  const activityChartRef = useRef<HTMLCanvasElement>(null);
  // Add refs for other charts as needed

  // --- Effects ---

  // Simulate initial loading and blog loading
  useEffect(() => {
    const globalTimer = setTimeout(() => setIsLoading(false), 1200); // Faster global load
    const blogTimer = setTimeout(() => setIsBlogLoading(false), 1800); // Slightly longer blog load for demo
    return () => {
      clearTimeout(globalTimer);
      clearTimeout(blogTimer);
    };
  }, []);

  // Navbar scroll effect
  const scrollPosition = useScrollPosition();
  useEffect(() => {
      // Adjust threshold as needed
      const threshold = 80; // Fix navbar after scrolling down 80px
      setIsNavbarFixed(scrollPosition > threshold);
  }, [scrollPosition]);


  // Generate mock notifications (replace with real fetch/logic)
  useEffect(() => {
    const mockNotifications: Notification[] = [
      { id: generateId('notif'), title: 'Collaboration Request', message: 'Sarah Johnson wants to collaborate on DevTracker.', type: 'info', date: new Date(Date.now() - 86400000 * 1), read: false, actionUrl: '#' }, // 1 day ago
      { id: generateId('notif'), title: 'Repo Starred!', message: `Tokoeno E-Commerce reached ${PROFILE_DATA.devStats.stars} stars!`, type: 'success', date: new Date(Date.now() - 86400000 * 2), read: true, actionUrl: PROFILE_DATA.projects[0].githubUrl }, // 2 days ago
      { id: generateId('notif'), title: 'Certification Expiring Soon', message: 'Your AWS certification expires next month.', type: 'warning', date: new Date(Date.now() - 86400000 * 5), read: false }, // 5 days ago
    ];
    setNotifications(mockNotifications);
  }, []); // Run only once

  // Chart cleanup effect
    useEffect(() => {
        // Cleanup function to destroy charts when component unmounts or theme changes
        return () => {
            Object.values(chartInstances).forEach(chart => {
                if (chart) chart.destroy();
            });
            setChartInstances({}); // Reset instances state
        };
    }, [theme]); // Re-run if theme changes to potentially re-render charts with new colors


  // --- Event Handlers ---

  const handleTabChange = (tabId: string) => {
    setActiveTab(tabId);
    // Optionally scroll to top or specific section
    window.scrollTo({ top: 0, behavior: 'smooth' }); // Scroll to top on tab change
  };

  const handleProjectClick = (project: Project) => {
    setSelectedProject(project);
    setIsProjectDialogOpen(true);
  };

  const handleCloseProjectDialog = () => {
    setIsProjectDialogOpen(false);
    // Delay clearing selected project for smoother transition
    setTimeout(() => setSelectedProject(null), 300);
  };

   const handleDownloadCV = () => {
       // TODO: Implement actual CV download logic
       console.log("Download CV clicked");
       // Example: Trigger download from a URL
       // window.location.href = '/path/to/your_cv.pdf';
       addNotification({ title: 'CV Download', message: 'Your CV download should start shortly.', type: 'info' });
   };

   const handleContactFormSubmit = async (data: any): Promise<boolean> => {
        console.log("Contact form submitted:", data);
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        const success = Math.random() > 0.2; // Simulate 80% success rate

        if (success) {
             addNotification({ title: t('contactForm.successTitle'), message: t('contactForm.successMessage'), type: 'success' });
             setIsContactFormOpen(false); // Close modal on success
             return true;
        } else {
             // Error handled within ContactForm component state
             // addNotification({ title: t('contactForm.errorTitle'), message: t('contactForm.errorMessage'), type: 'error' });
             return false;
        }
    };

   // Notification handlers
    const addNotification = (notificationData: Omit<Notification, 'id' | 'date' | 'read'>) => {
        const newNotification: Notification = {
            ...notificationData,
            id: generateId('notif'),
            date: new Date(),
            read: false,
        };
        // Add to the beginning of the array and limit total notifications (e.g., 10)
        setNotifications(prev => [newNotification, ...prev.slice(0, 9)]);
    };

    const handleMarkNotificationRead = (id: string) => {
        setNotifications(prev =>
            prev.map(n => n.id === id ? { ...n, read: true } : n)
        );
    };

    const handleClearAllNotifications = () => {
        setNotifications([]);
    };

  // --- Render Logic ---

  const renderActiveTabContent = () => {
    switch (activeTab) {
      case "overview":
        return <OverviewTab onNavigate={handleTabChange} />;
      case "projects":
        return <ProjectsTab projects={PROFILE_DATA.projects} onProjectClick={handleProjectClick} />;
       case "blog":
        return <BlogSection posts={PROFILE_DATA.blogPosts} isLoading={isBlogLoading} />;
       case "contact":
        // Render contact form directly or via modal trigger
        // This example renders it directly in the tab content area
         return (
             <Card title={t('contactForm.title')} titleIcon={fas.faPaperPlane}>
                 <ContactForm onSubmit={handleContactFormSubmit} onClose={() => console.log("Inline form closed - N/A")} />
             </Card>
         );
      // Add cases for other tabs, importing their components
      case "skills": return <SkillsTab />;
      case "experience": return <ExperienceTab />;
      case "education": return <EducationTab />;
      case "achievements": return <AchievementsTab />;
      case "activity": return <ActivityTab />;
      case "testimonials": return <TestimonialsTab />;
      default:
        return <OverviewTab onNavigate={handleTabChange} />; // Fallback to overview
    }
  };

  // --- Main Return JSX ---
  // Use a key on the main content area that changes with theme/language
  // to force re-renders if necessary for certain libraries or styles.
  // const contentKey = `${theme}-${useLanguage().language}`;

  return (
      <div className={`min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-200`}>
          {/* Render Navbar */}
          <Navbar
              activeTab={activeTab}
              onTabChange={handleTabChange}
              isFixed={isNavbarFixed}
              notifications={notifications}
              onMarkNotificationRead={handleMarkNotificationRead}
              onClearNotifications={handleClearAllNotifications}
          />

          {/* Spacer for fixed navbar */}
           <div className="pt-16"> {/* Match navbar height */}
              {/* Render Profile Header */}
               <ProfileHeader
                    onContactClick={() => setIsContactFormOpen(true)}
                    onDownloadCV={handleDownloadCV}
               />
           </div>


          {/* Main Content Area */}
          <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-6">
              {/* Render active tab content */}
              {renderActiveTabContent()}
          </main>

          {/* Render Footer */}
          <Footer />

          {/* Render Modals/Dialogs */}
          <ProjectDialog
              project={selectedProject}
              isOpen={isProjectDialogOpen}
              onClose={handleCloseProjectDialog}
          />

          {/* Contact Form Modal */}
           <Modal
                isOpen={isContactFormOpen}
                onClose={() => setIsContactFormOpen(false)}
                title={t('contactForm.title')}
                size="lg"
           >
                 <ContactForm onSubmit={handleContactFormSubmit} onClose={() => setIsContactFormOpen(false)} />
           </Modal>

           {/* Optional: Add a global loading overlay */}
           {isLoading && (
                <div className="fixed inset-0 bg-gray-800 bg-opacity-70 flex items-center justify-center z-[100]">
                    <FontAwesomeIcon icon={fas.faSpinner} className="text-white text-4xl animate-spin" />
                </div>
           )}
      </div>
  );
};

// ============================================================================
// APP WRAPPER WITH PROVIDERS
// ============================================================================

// This would typically be in layout.tsx, but putting it here for the single-file request
const AppWrapper = () => {
    return (
        <ThemeProvider>
            <LanguageProvider>
                 <AccessibilityProvider>
                    <HomePage />
                 </AccessibilityProvider>
            </LanguageProvider>
        </ThemeProvider>
    );
};

// Export the wrapped component as the default export for the page
export default AppWrapper;

// Add necessary global styles for accessibility features (High Contrast, Reduce Motion)
// These would normally go in globals.css
const GlobalAccessibilityStyles = () => (
    <style jsx global>{`
        body.high-contrast {
            // Example high-contrast overrides (adjust extensively)
            --tw-bg-opacity: 1 !important;
            background-color: #000 !important;
            color: #fff !important;

            .dark\\:bg-gray-800 { background-color: #111 !important; }
            .dark\\:bg-gray-900 { background-color: #000 !important; }
            .dark\\:text-gray-100 { color: #fff !important; }
            .dark\\:text-gray-300 { color: #eee !important; }
            .dark\\:text-gray-400 { color: #ccc !important; }
            .dark\\:border-gray-700 { border-color: #aaa !important; }

            // Ensure links are visible
             a { color: #0ff !important; text-decoration: underline !important; }
             button { border: 1px solid #fff !important; }
             .bg-blue-600 { background-color: #0ff !important; color: #000 !important; }
             .text-blue-400 { color: #0ff !important; }

             // Add more overrides for specific component styles...
        }

         body.reduce-motion * {
            // Disable or reduce animations and transitions
            transition-property: none !important;
            transform: none !important;
            animation: none !important;
        }
         // You might need more specific selectors to override animations
         .animate-pulse { animation: none !important; }
         .animate-spin { animation: none !important; }
    `}</style>
);

// Inject the global styles (This is a hacky way for a single file, normally done via CSS import)
const OriginalHomePage = HomePage;
const HomePageWithGlobalStyles = () => (
    <>
        <GlobalAccessibilityStyles />
        <OriginalHomePage />
    </>
);

// Re-wrap with providers including the global styles component
const AppWrapperWithStyles = () => {
     return (
        <ThemeProvider>
            <LanguageProvider>
                 <AccessibilityProvider>
                    <HomePageWithGlobalStyles />
                 </AccessibilityProvider>
            </LanguageProvider>
        </ThemeProvider>
    );
};


// FINAL EXPORT - Use the version with providers and global styles
export default AppWrapperWithStyles;