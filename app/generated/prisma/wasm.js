
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  phone: 'phone',
  location: 'location',
  bio: 'bio',
  website: 'website',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  percentage: 'percentage',
  color: 'color',
  icon: 'icon',
  category: 'category',
  description: 'description',
  years: 'years',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  slug: 'slug',
  description: 'description',
  longDescription: 'longDescription',
  category: 'category',
  image: 'image',
  demoUrl: 'demoUrl',
  githubUrl: 'githubUrl',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  branches: 'branches',
  stars: 'stars',
  views: 'views',
  forks: 'forks',
  issues: 'issues',
  commits: 'commits',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectFeatureScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  feature: 'feature'
};

exports.Prisma.ProjectTechStackScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  tech: 'tech'
};

exports.Prisma.ProjectCollaboratorScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  username: 'username'
};

exports.Prisma.ProjectLearningScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  learning: 'learning'
};

exports.Prisma.WorkExperienceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  company: 'company',
  position: 'position',
  period: 'period',
  description: 'description',
  location: 'location',
  type: 'type',
  logo: 'logo',
  website: 'website',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkResponsibilityScalarFieldEnum = {
  id: 'id',
  experienceId: 'experienceId',
  responsibility: 'responsibility'
};

exports.Prisma.WorkTechnologyScalarFieldEnum = {
  id: 'id',
  experienceId: 'experienceId',
  technology: 'technology'
};

exports.Prisma.WorkAchievementScalarFieldEnum = {
  id: 'id',
  experienceId: 'experienceId',
  achievement: 'achievement'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institution: 'institution',
  degree: 'degree',
  field: 'field',
  period: 'period',
  description: 'description',
  gpa: 'gpa',
  location: 'location',
  logo: 'logo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EducationAchievementScalarFieldEnum = {
  id: 'id',
  educationId: 'educationId',
  achievement: 'achievement'
};

exports.Prisma.CertificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  issuer: 'issuer',
  date: 'date',
  icon: 'icon',
  credentialId: 'credentialId',
  expiry: 'expiry',
  description: 'description',
  verificationUrl: 'verificationUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificationSkillScalarFieldEnum = {
  id: 'id',
  certificationId: 'certificationId',
  skill: 'skill'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  date: 'date',
  description: 'description',
  icon: 'icon',
  category: 'category',
  issuer: 'issuer',
  link: 'link',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  slug: 'slug',
  title: 'title',
  excerpt: 'excerpt',
  content: 'content',
  date: 'date',
  readTime: 'readTime',
  image: 'image',
  likes: 'likes',
  comments: 'comments',
  shares: 'shares',
  views: 'views',
  category: 'category',
  author: 'author',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogTagScalarFieldEnum = {
  id: 'id',
  blogId: 'blogId',
  tag: 'tag'
};

exports.Prisma.TestimonialScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  position: 'position',
  company: 'company',
  text: 'text',
  avatar: 'avatar',
  rating: 'rating',
  date: 'date',
  relation: 'relation',
  projectLink: 'projectLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  value: 'value',
  icon: 'icon',
  isPublic: 'isPublic',
  link: 'link'
};

exports.Prisma.SocialMediaScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  platform: 'platform',
  url: 'url',
  icon: 'icon',
  username: 'username'
};

exports.Prisma.DevStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  repos: 'repos',
  stars: 'stars',
  contributions: 'contributions',
  rating: 'rating',
  followers: 'followers',
  following: 'following',
  streak: 'streak',
  commits: 'commits',
  prsOpened: 'prsOpened',
  issuesClosed: 'issuesClosed',
  rank: 'rank',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContributionDataScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  year: 'year',
  total: 'total',
  startRange: 'startRange',
  endRange: 'endRange'
};

exports.Prisma.ContributionDayScalarFieldEnum = {
  id: 'id',
  contributionDataId: 'contributionDataId',
  date: 'date',
  count: 'count',
  level: 'level'
};

exports.Prisma.TimelineEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  type: 'type',
  title: 'title',
  subtitle: 'subtitle',
  description: 'description',
  icon: 'icon',
  color: 'color'
};

exports.Prisma.ProjectTestimonialScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  testimonialId: 'testimonialId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Skill: 'Skill',
  Project: 'Project',
  ProjectFeature: 'ProjectFeature',
  ProjectTechStack: 'ProjectTechStack',
  ProjectCollaborator: 'ProjectCollaborator',
  ProjectLearning: 'ProjectLearning',
  WorkExperience: 'WorkExperience',
  WorkResponsibility: 'WorkResponsibility',
  WorkTechnology: 'WorkTechnology',
  WorkAchievement: 'WorkAchievement',
  Education: 'Education',
  EducationAchievement: 'EducationAchievement',
  Certification: 'Certification',
  CertificationSkill: 'CertificationSkill',
  Achievement: 'Achievement',
  BlogPost: 'BlogPost',
  BlogTag: 'BlogTag',
  Testimonial: 'Testimonial',
  Contact: 'Contact',
  SocialMedia: 'SocialMedia',
  DevStats: 'DevStats',
  ContributionData: 'ContributionData',
  ContributionDay: 'ContributionDay',
  TimelineEvent: 'TimelineEvent',
  ProjectTestimonial: 'ProjectTestimonial'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
